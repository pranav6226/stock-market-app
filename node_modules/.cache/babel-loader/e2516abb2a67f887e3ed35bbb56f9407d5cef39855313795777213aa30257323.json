{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/stock-market-app/src/components/StockComparison.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ComposedChart, Bar } from 'recharts';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockComparison = ({\n  primaryStock,\n  API_URLS\n}) => {\n  _s();\n  const [comparisonSymbols, setComparisonSymbols] = useState(['MSFT', 'GOOG']);\n  const [comparisonData, setComparisonData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [apiUrlIndex, setApiUrlIndex] = useState(0);\n  const [showInput, setShowInput] = useState(false);\n  const [newSymbol, setNewSymbol] = useState('');\n  const [chartType, setChartType] = useState('price');\n\n  // Colors for different stocks\n  const COLORS = ['#4CAF50',\n  // Primary stock (green)\n  '#2196F3',\n  // Microsoft (blue)\n  '#FF5722',\n  // Google (orange)\n  '#9C27B0',\n  // Purple\n  '#FFEB3B',\n  // Yellow\n  '#607D8B' // Blue Grey\n  ];\n\n  // Fetch data for comparison stocks\n  useEffect(() => {\n    const fetchComparisonData = async () => {\n      if (!primaryStock || !primaryStock['01. symbol']) return;\n      setLoading(true);\n      const newData = {\n        [primaryStock['01. symbol']]: {\n          price: parseFloat(primaryStock['05. price']),\n          change: parseFloat(primaryStock['09. change']),\n          percentChange: parseFloat(primaryStock['10. change percent'].replace('%', '')),\n          historicalData: generateMockHistoricalData(parseFloat(primaryStock['05. price']))\n        }\n      };\n\n      // Fetch data for each comparison symbol\n      for (const symbol of comparisonSymbols) {\n        if (symbol === primaryStock['01. symbol']) continue;\n        try {\n          // Try each API URL until one works\n          for (let i = 0; i < API_URLS.length; i++) {\n            try {\n              const response = await axios.get(`${API_URLS[i]}?symbol=${symbol}`, {\n                timeout: 5000\n              });\n              if (response.data && !response.data.error) {\n                setApiUrlIndex(i);\n                newData[symbol] = {\n                  price: parseFloat(response.data['05. price']),\n                  change: parseFloat(response.data['09. change']),\n                  percentChange: parseFloat(response.data['10. change percent'].replace('%', '')),\n                  historicalData: generateMockHistoricalData(parseFloat(response.data['05. price']))\n                };\n                break; // Exit the loop if successful\n              }\n            } catch (err) {\n              if (i === API_URLS.length - 1) {\n                console.error(`Failed to fetch data for ${symbol}`);\n                // Create mock data if API fails\n                newData[symbol] = {\n                  price: Math.random() * 200 + 50,\n                  change: Math.random() * 10 - 5,\n                  percentChange: Math.random() * 5 - 2.5,\n                  historicalData: generateMockHistoricalData(Math.random() * 200 + 50)\n                };\n              }\n            }\n          }\n        } catch (err) {\n          console.error(`Error fetching data for ${symbol}:`, err);\n        }\n      }\n      setComparisonData(newData);\n      setLoading(false);\n    };\n    fetchComparisonData();\n  }, [primaryStock, comparisonSymbols, API_URLS]);\n\n  // Generate mock historical data for visualization\n  const generateMockHistoricalData = currentPrice => {\n    const data = [];\n    const volatility = 0.02;\n    let price = currentPrice * 0.9; // Start 10% lower\n\n    const today = new Date();\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`;\n      const change = price * volatility * (Math.random() - 0.48); // Slight upward bias\n      price += change;\n      data.push({\n        date: formattedDate,\n        price: parseFloat(price.toFixed(2))\n      });\n    }\n    return data;\n  };\n\n  // Merge historical data for comparison chart\n  const prepareComparisonChartData = () => {\n    var _comparisonData$prima;\n    if (Object.keys(comparisonData).length === 0) return [];\n\n    // Get all dates from the primary stock\n    const primarySymbol = primaryStock['01. symbol'];\n    if (!((_comparisonData$prima = comparisonData[primarySymbol]) !== null && _comparisonData$prima !== void 0 && _comparisonData$prima.historicalData)) return [];\n    const mergedData = {};\n\n    // Process each stock's data\n    Object.keys(comparisonData).forEach(symbol => {\n      var _comparisonData$symbo;\n      if (!((_comparisonData$symbo = comparisonData[symbol]) !== null && _comparisonData$symbo !== void 0 && _comparisonData$symbo.historicalData)) return;\n      comparisonData[symbol].historicalData.forEach(dataPoint => {\n        if (!mergedData[dataPoint.date]) {\n          mergedData[dataPoint.date] = {\n            date: dataPoint.date\n          };\n        }\n        mergedData[dataPoint.date][symbol] = dataPoint.price;\n      });\n    });\n\n    // Convert to array and sort by date\n    return Object.values(mergedData).sort((a, b) => {\n      const dateA = new Date(a.date.split('/')[0], a.date.split('/')[1]);\n      const dateB = new Date(b.date.split('/')[0], b.date.split('/')[1]);\n      return dateA - dateB;\n    });\n  };\n\n  // Add a new stock to compare\n  const handleAddSymbol = () => {\n    if (!newSymbol || comparisonSymbols.includes(newSymbol)) {\n      setShowInput(false);\n      setNewSymbol('');\n      return;\n    }\n    setComparisonSymbols([...comparisonSymbols, newSymbol.toUpperCase()]);\n    setShowInput(false);\n    setNewSymbol('');\n  };\n\n  // Remove a stock from comparison\n  const handleRemoveSymbol = symbol => {\n    setComparisonSymbols(comparisonSymbols.filter(s => s !== symbol));\n  };\n\n  // Prepare performance comparison data\n  const preparePerformanceData = () => {\n    const performanceData = [];\n    Object.keys(comparisonData).forEach((symbol, index) => {\n      if (comparisonData[symbol]) {\n        performanceData.push({\n          name: symbol,\n          value: comparisonData[symbol].percentChange,\n          color: COLORS[index % COLORS.length],\n          price: comparisonData[symbol].price\n        });\n      }\n    });\n    return performanceData;\n  };\n  const comparisonChartData = prepareComparisonChartData();\n  const performanceData = preparePerformanceData();\n\n  // Render price comparison chart\n  const renderPriceChart = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 350,\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: comparisonChartData,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        tickFormatter: value => `$${value}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        formatter: value => [`$${value.toFixed(2)}`, ''],\n        labelFormatter: label => `Date: ${label}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), Object.keys(comparisonData).map((symbol, index) => /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: symbol,\n        stroke: COLORS[index % COLORS.length],\n        activeDot: {\n          r: 8\n        },\n        name: symbol\n      }, symbol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n\n  // Render performance comparison chart\n  const renderPerformanceChart = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 350,\n    children: /*#__PURE__*/_jsxDEV(ComposedChart, {\n      layout: \"vertical\",\n      data: performanceData,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 70,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        type: \"number\",\n        tickFormatter: value => `${value.toFixed(2)}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        dataKey: \"name\",\n        type: \"category\",\n        width: 60\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        formatter: (value, name, props) => {\n          if (name === 'value') return [`${value.toFixed(2)}%`, 'Change'];\n          return [value, name];\n        },\n        labelFormatter: value => `${value}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"value\",\n        fill: \"#8884d8\",\n        barSize: 20,\n        children: performanceData.map((entry, index) => /*#__PURE__*/_jsxDEV(Bar, {\n          fill: entry.color\n        }, `cell-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card stock-comparison\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comparison-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Stock Comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-type-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'price' ? 'active' : '',\n          onClick: () => setChartType('price'),\n          children: \"Price History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'performance' ? 'active' : '',\n          onClick: () => setChartType('performance'),\n          children: \"Performance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comparison-symbols\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Comparing: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"symbol-tags\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"symbol-tag primary\",\n          children: primaryStock['01. symbol']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), comparisonSymbols.map(symbol => symbol !== primaryStock['01. symbol'] && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"symbol-tag\",\n          children: [symbol, /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-symbol\",\n            onClick: () => handleRemoveSymbol(symbol),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 17\n          }, this)]\n        }, symbol, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 15\n        }, this)), !showInput && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-symbol-btn\",\n          onClick: () => setShowInput(true),\n          children: \"+ Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), showInput && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-symbol-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newSymbol,\n            onChange: e => setNewSymbol(e.target.value),\n            placeholder: \"Symbol\",\n            maxLength: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddSymbol,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowInput(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-comparison\",\n      children: \"Loading comparison data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comparison-chart\",\n      children: chartType === 'price' ? renderPriceChart() : renderPerformanceChart()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_s(StockComparison, \"ul2cl2MwOPAF6r8Looba6XgiLts=\");\n_c = StockComparison;\nexport default StockComparison;\nvar _c;\n$RefreshReg$(_c, \"StockComparison\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","ComposedChart","Bar","axios","jsxDEV","_jsxDEV","StockComparison","primaryStock","API_URLS","_s","comparisonSymbols","setComparisonSymbols","comparisonData","setComparisonData","loading","setLoading","error","setError","apiUrlIndex","setApiUrlIndex","showInput","setShowInput","newSymbol","setNewSymbol","chartType","setChartType","COLORS","fetchComparisonData","newData","price","parseFloat","change","percentChange","replace","historicalData","generateMockHistoricalData","symbol","i","length","response","get","timeout","data","err","console","Math","random","currentPrice","volatility","today","Date","date","setDate","getDate","formattedDate","getMonth","push","toFixed","prepareComparisonChartData","_comparisonData$prima","Object","keys","primarySymbol","mergedData","forEach","_comparisonData$symbo","dataPoint","values","sort","a","b","dateA","split","dateB","handleAddSymbol","includes","toUpperCase","handleRemoveSymbol","filter","s","preparePerformanceData","performanceData","index","name","value","color","comparisonChartData","renderPriceChart","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","tickFormatter","formatter","labelFormatter","label","map","type","stroke","activeDot","r","renderPerformanceChart","layout","props","fill","barSize","entry","className","onClick","onChange","e","target","placeholder","maxLength","_c","$RefreshReg$"],"sources":["/Users/pranav/stock-market-app/src/components/StockComparison.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  LineChart, Line, XAxis, YAxis, CartesianGrid, \n  Tooltip, Legend, ResponsiveContainer, ComposedChart, Bar\n} from 'recharts';\nimport axios from 'axios';\n\nconst StockComparison = ({ primaryStock, API_URLS }) => {\n  const [comparisonSymbols, setComparisonSymbols] = useState(['MSFT', 'GOOG']);\n  const [comparisonData, setComparisonData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [apiUrlIndex, setApiUrlIndex] = useState(0);\n  const [showInput, setShowInput] = useState(false);\n  const [newSymbol, setNewSymbol] = useState('');\n  const [chartType, setChartType] = useState('price');\n\n  // Colors for different stocks\n  const COLORS = [\n    '#4CAF50', // Primary stock (green)\n    '#2196F3', // Microsoft (blue)\n    '#FF5722', // Google (orange)\n    '#9C27B0', // Purple\n    '#FFEB3B', // Yellow\n    '#607D8B'  // Blue Grey\n  ];\n\n  // Fetch data for comparison stocks\n  useEffect(() => {\n    const fetchComparisonData = async () => {\n      if (!primaryStock || !primaryStock['01. symbol']) return;\n      \n      setLoading(true);\n      const newData = {\n        [primaryStock['01. symbol']]: {\n          price: parseFloat(primaryStock['05. price']),\n          change: parseFloat(primaryStock['09. change']),\n          percentChange: parseFloat(primaryStock['10. change percent'].replace('%', '')),\n          historicalData: generateMockHistoricalData(parseFloat(primaryStock['05. price']))\n        }\n      };\n      \n      // Fetch data for each comparison symbol\n      for (const symbol of comparisonSymbols) {\n        if (symbol === primaryStock['01. symbol']) continue;\n        \n        try {\n          // Try each API URL until one works\n          for (let i = 0; i < API_URLS.length; i++) {\n            try {\n              const response = await axios.get(\n                `${API_URLS[i]}?symbol=${symbol}`,\n                { timeout: 5000 }\n              );\n              \n              if (response.data && !response.data.error) {\n                setApiUrlIndex(i);\n                \n                newData[symbol] = {\n                  price: parseFloat(response.data['05. price']),\n                  change: parseFloat(response.data['09. change']),\n                  percentChange: parseFloat(response.data['10. change percent'].replace('%', '')),\n                  historicalData: generateMockHistoricalData(parseFloat(response.data['05. price']))\n                };\n                \n                break; // Exit the loop if successful\n              }\n            } catch (err) {\n              if (i === API_URLS.length - 1) {\n                console.error(`Failed to fetch data for ${symbol}`);\n                // Create mock data if API fails\n                newData[symbol] = {\n                  price: Math.random() * 200 + 50,\n                  change: (Math.random() * 10) - 5,\n                  percentChange: (Math.random() * 5) - 2.5,\n                  historicalData: generateMockHistoricalData(Math.random() * 200 + 50)\n                };\n              }\n            }\n          }\n        } catch (err) {\n          console.error(`Error fetching data for ${symbol}:`, err);\n        }\n      }\n      \n      setComparisonData(newData);\n      setLoading(false);\n    };\n    \n    fetchComparisonData();\n  }, [primaryStock, comparisonSymbols, API_URLS]);\n\n  // Generate mock historical data for visualization\n  const generateMockHistoricalData = (currentPrice) => {\n    const data = [];\n    const volatility = 0.02;\n    let price = currentPrice * 0.9; // Start 10% lower\n    \n    const today = new Date();\n    \n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`;\n      \n      const change = price * volatility * (Math.random() - 0.48); // Slight upward bias\n      price += change;\n      \n      data.push({\n        date: formattedDate,\n        price: parseFloat(price.toFixed(2))\n      });\n    }\n    \n    return data;\n  };\n\n  // Merge historical data for comparison chart\n  const prepareComparisonChartData = () => {\n    if (Object.keys(comparisonData).length === 0) return [];\n    \n    // Get all dates from the primary stock\n    const primarySymbol = primaryStock['01. symbol'];\n    if (!comparisonData[primarySymbol]?.historicalData) return [];\n    \n    const mergedData = {};\n    \n    // Process each stock's data\n    Object.keys(comparisonData).forEach(symbol => {\n      if (!comparisonData[symbol]?.historicalData) return;\n      \n      comparisonData[symbol].historicalData.forEach(dataPoint => {\n        if (!mergedData[dataPoint.date]) {\n          mergedData[dataPoint.date] = { date: dataPoint.date };\n        }\n        mergedData[dataPoint.date][symbol] = dataPoint.price;\n      });\n    });\n    \n    // Convert to array and sort by date\n    return Object.values(mergedData).sort((a, b) => {\n      const dateA = new Date(a.date.split('/')[0], a.date.split('/')[1]);\n      const dateB = new Date(b.date.split('/')[0], b.date.split('/')[1]);\n      return dateA - dateB;\n    });\n  };\n\n  // Add a new stock to compare\n  const handleAddSymbol = () => {\n    if (!newSymbol || comparisonSymbols.includes(newSymbol)) {\n      setShowInput(false);\n      setNewSymbol('');\n      return;\n    }\n    \n    setComparisonSymbols([...comparisonSymbols, newSymbol.toUpperCase()]);\n    setShowInput(false);\n    setNewSymbol('');\n  };\n\n  // Remove a stock from comparison\n  const handleRemoveSymbol = (symbol) => {\n    setComparisonSymbols(comparisonSymbols.filter(s => s !== symbol));\n  };\n\n  // Prepare performance comparison data\n  const preparePerformanceData = () => {\n    const performanceData = [];\n    \n    Object.keys(comparisonData).forEach((symbol, index) => {\n      if (comparisonData[symbol]) {\n        performanceData.push({\n          name: symbol,\n          value: comparisonData[symbol].percentChange,\n          color: COLORS[index % COLORS.length],\n          price: comparisonData[symbol].price\n        });\n      }\n    });\n    \n    return performanceData;\n  };\n\n  const comparisonChartData = prepareComparisonChartData();\n  const performanceData = preparePerformanceData();\n\n  // Render price comparison chart\n  const renderPriceChart = () => (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <LineChart\n        data={comparisonChartData}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" />\n        <YAxis tickFormatter={(value) => `$${value}`} />\n        <Tooltip \n          formatter={(value) => [`$${value.toFixed(2)}`, '']}\n          labelFormatter={(label) => `Date: ${label}`}\n        />\n        <Legend />\n        {Object.keys(comparisonData).map((symbol, index) => (\n          <Line\n            key={symbol}\n            type=\"monotone\"\n            dataKey={symbol}\n            stroke={COLORS[index % COLORS.length]}\n            activeDot={{ r: 8 }}\n            name={symbol}\n          />\n        ))}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n\n  // Render performance comparison chart\n  const renderPerformanceChart = () => (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <ComposedChart\n        layout=\"vertical\"\n        data={performanceData}\n        margin={{ top: 20, right: 30, left: 70, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis \n          type=\"number\" \n          tickFormatter={(value) => `${value.toFixed(2)}%`} \n        />\n        <YAxis \n          dataKey=\"name\" \n          type=\"category\" \n          width={60} \n        />\n        <Tooltip \n          formatter={(value, name, props) => {\n            if (name === 'value') return [`${value.toFixed(2)}%`, 'Change'];\n            return [value, name];\n          }}\n          labelFormatter={(value) => `${value}`}\n        />\n        <Bar \n          dataKey=\"value\" \n          fill=\"#8884d8\" \n          barSize={20}\n        >\n          {performanceData.map((entry, index) => (\n            <Bar key={`cell-${index}`} fill={entry.color} />\n          ))}\n        </Bar>\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n\n  return (\n    <div className=\"card stock-comparison\">\n      <div className=\"comparison-header\">\n        <h2>Stock Comparison</h2>\n        <div className=\"chart-type-selector\">\n          <button \n            className={chartType === 'price' ? 'active' : ''} \n            onClick={() => setChartType('price')}\n          >\n            Price History\n          </button>\n          <button \n            className={chartType === 'performance' ? 'active' : ''} \n            onClick={() => setChartType('performance')}\n          >\n            Performance\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"comparison-symbols\">\n        <p>Comparing: </p>\n        <div className=\"symbol-tags\">\n          <span className=\"symbol-tag primary\">{primaryStock['01. symbol']}</span>\n          {comparisonSymbols.map(symbol => (\n            symbol !== primaryStock['01. symbol'] && (\n              <span key={symbol} className=\"symbol-tag\">\n                {symbol}\n                <button \n                  className=\"remove-symbol\" \n                  onClick={() => handleRemoveSymbol(symbol)}\n                >\n                  ×\n                </button>\n              </span>\n            )\n          ))}\n          \n          {!showInput && (\n            <button \n              className=\"add-symbol-btn\" \n              onClick={() => setShowInput(true)}\n            >\n              + Add\n            </button>\n          )}\n          \n          {showInput && (\n            <div className=\"add-symbol-input\">\n              <input\n                type=\"text\"\n                value={newSymbol}\n                onChange={(e) => setNewSymbol(e.target.value)}\n                placeholder=\"Symbol\"\n                maxLength={5}\n              />\n              <button onClick={handleAddSymbol}>Add</button>\n              <button onClick={() => setShowInput(false)}>Cancel</button>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {loading ? (\n        <div className=\"loading-comparison\">Loading comparison data...</div>\n      ) : (\n        <div className=\"comparison-chart\">\n          {chartType === 'price' ? renderPriceChart() : renderPerformanceChart()}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StockComparison; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}