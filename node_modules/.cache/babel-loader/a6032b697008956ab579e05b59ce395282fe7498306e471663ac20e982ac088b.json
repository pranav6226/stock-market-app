{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TechnicalAnalysis=_ref=>{let{stockData}=_ref;const[historicalData,setHistoricalData]=useState([]);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const[technicalIndicators,setTechnicalIndicators]=useState({});// Fetch historical data for technical analysis\nuseEffect(()=>{if(stockData&&stockData['01. symbol']){setIsLoading(true);setError(null);const symbol=stockData['01. symbol'];// Get 3 months of data for better technical analysis\nconst period='3mo';const interval='1d';fetch(`http://localhost:5001/api/stock/history?symbol=${symbol}&period=${period}&interval=${interval}`).then(response=>{if(!response.ok){throw new Error('Failed to fetch historical data for technical analysis');}return response.json();}).then(data=>{if(data&&data.data&&Array.isArray(data.data)){setHistoricalData(data.data);// Calculate technical indicators\nconst indicators=calculateTechnicalIndicators(data.data,stockData);setTechnicalIndicators(indicators);}else{setError('Invalid data format received');}setIsLoading(false);}).catch(err=>{console.error('Error fetching historical data for technical analysis:',err);setError(err.message);setIsLoading(false);});}},[stockData]);// Calculate technical indicators from historical data\nconst calculateTechnicalIndicators=(data,currentStockData)=>{if(!data||data.length<14){return{error:\"Insufficient data for analysis\"};}// Make sure data is sorted by date (oldest first)\nconst sortedData=[...data].sort((a,b)=>new Date(a.date)-new Date(b.date));// Extract prices for easier calculation\nconst prices=sortedData.map(item=>parseFloat(item.price));const volumes=sortedData.map(item=>parseInt(item.volume));// Get current price info\nconst currentPrice=parseFloat(currentStockData['05. price']);const prevClose=parseFloat(currentStockData['08. previous close']);// Calculate Simple Moving Averages\nconst sma20=calculateSMA(prices,20);const sma50=calculateSMA(prices,50);const sma200=calculateSMA(prices,Math.min(200,prices.length));// Calculate RSI (Relative Strength Index)\nconst rsi=calculateRSI(prices);// Calculate MACD\nconst macd=calculateMACD(prices);// Calculate Bollinger Bands\nconst bollingerBands=calculateBollingerBands(prices);// Volume analysis\nconst averageVolume=volumes.slice(-10).reduce((sum,vol)=>sum+vol,0)/10;const currentVolume=parseInt(currentStockData['06. volume']);const volumeRatio=currentVolume/averageVolume;// Price momentum\nconst priceChange1Day=currentPrice-prevClose;const priceChange5Day=currentPrice-prices[prices.length-5];const priceChange1Month=currentPrice-prices[0];// Calculate trend strength\nconst trendStrength=calculateTrendStrength(prices);// Analyze support and resistance\nconst supportResistance=analyzeSupportResistance(prices,currentPrice);return{sma:{sma20:sma20.toFixed(2),sma50:sma50.toFixed(2),sma200:sma200.toFixed(2),isBullish:currentPrice>sma20&&sma20>sma50},rsi:{value:rsi.toFixed(2),isOverbought:rsi>70,isOversold:rsi<30},macd:{value:macd.macdLine.toFixed(2),signal:macd.signalLine.toFixed(2),histogram:macd.histogram.toFixed(2),isBullish:macd.histogram>0},bollingerBands:{upper:bollingerBands.upper.toFixed(2),middle:bollingerBands.middle.toFixed(2),lower:bollingerBands.lower.toFixed(2),width:((bollingerBands.upper-bollingerBands.lower)/bollingerBands.middle*100).toFixed(2),isOutsideUpper:currentPrice>bollingerBands.upper,isOutsideLower:currentPrice<bollingerBands.lower},volume:{average:averageVolume.toFixed(0),current:currentVolume,ratio:volumeRatio.toFixed(2),isHigh:volumeRatio>1.5},priceChange:{oneDay:priceChange1Day.toFixed(2),oneDayPercent:(priceChange1Day/prevClose*100).toFixed(2),fiveDay:priceChange5Day.toFixed(2),fiveDayPercent:(priceChange5Day/prices[prices.length-5]*100).toFixed(2),oneMonth:priceChange1Month.toFixed(2),oneMonthPercent:(priceChange1Month/prices[0]*100).toFixed(2)},trend:{strength:trendStrength.strength,direction:trendStrength.direction},supportResistance:supportResistance};};// Calculate Simple Moving Average\nconst calculateSMA=(prices,period)=>{if(prices.length<period){return prices[prices.length-1]||0;}const sum=prices.slice(-period).reduce((total,price)=>total+price,0);return sum/period;};// Calculate RSI (Relative Strength Index)\nconst calculateRSI=function(prices){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:14;if(prices.length<period+1){return 50;// Neutral if not enough data\n}let gains=0;let losses=0;// Calculate initial average gain/loss\nfor(let i=1;i<=period;i++){const change=prices[prices.length-period-1+i]-prices[prices.length-period-1+i-1];if(change>=0){gains+=change;}else{losses-=change;}}let avgGain=gains/period;let avgLoss=losses/period;// Calculate RSI using Wilder's smoothing method\nfor(let i=period+1;i<prices.length;i++){const change=prices[i]-prices[i-1];let currentGain=0;let currentLoss=0;if(change>=0){currentGain=change;}else{currentLoss=-change;}avgGain=(avgGain*(period-1)+currentGain)/period;avgLoss=(avgLoss*(period-1)+currentLoss)/period;}if(avgLoss===0){return 100;// No losses means RSI = 100\n}const rs=avgGain/avgLoss;return 100-100/(1+rs);};// Calculate MACD\nconst calculateMACD=prices=>{// Default periods: 12, 26, 9\nconst fastEMA=calculateEMA(prices,12);const slowEMA=calculateEMA(prices,26);const macdLine=fastEMA-slowEMA;// Calculate signal line (9-day EMA of MACD line)\n// For simplicity, we'll use a simplified approach\nconst signalLine=macdLine*0.9+calculateEMA(prices,9)*0.1;const histogram=macdLine-signalLine;return{macdLine,signalLine,histogram};};// Calculate Exponential Moving Average\nconst calculateEMA=(prices,period)=>{if(prices.length<period){return prices[prices.length-1]||0;}const sma=calculateSMA(prices.slice(0,period),period);const multiplier=2/(period+1);let ema=sma;for(let i=period;i<prices.length;i++){ema=(prices[i]-ema)*multiplier+ema;}return ema;};// Calculate Bollinger Bands\nconst calculateBollingerBands=function(prices){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;let stdDev=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2;if(prices.length<period){const price=prices[prices.length-1]||0;return{upper:price*1.05,middle:price,lower:price*0.95};}const recentPrices=prices.slice(-period);const middle=calculateSMA(recentPrices,period);// Calculate standard deviation\nconst sqrDiff=recentPrices.map(price=>{const diff=price-middle;return diff*diff;});const avgSquareDiff=sqrDiff.reduce((sum,val)=>sum+val,0)/period;const standardDeviation=Math.sqrt(avgSquareDiff);const upper=middle+standardDeviation*stdDev;const lower=middle-standardDeviation*stdDev;return{upper,middle,lower};};// Calculate trend strength\nconst calculateTrendStrength=prices=>{if(prices.length<10){return{strength:\"Unknown\",direction:\"Neutral\"};}const shortTerm=(prices[prices.length-1]-prices[prices.length-5])/prices[prices.length-5];const mediumTerm=(prices[prices.length-1]-prices[prices.length-10])/prices[prices.length-10];let direction=\"Neutral\";if(shortTerm>0&&mediumTerm>0){direction=\"Bullish\";}else if(shortTerm<0&&mediumTerm<0){direction=\"Bearish\";}else if(shortTerm>0&&mediumTerm<0){direction=\"Recovering\";}else if(shortTerm<0&&mediumTerm>0){direction=\"Weakening\";}let strength=\"Weak\";const totalStrength=Math.abs(shortTerm)+Math.abs(mediumTerm);if(totalStrength>0.1){strength=\"Strong\";}else if(totalStrength>0.05){strength=\"Moderate\";}return{strength,direction};};// Analyze support and resistance levels\nconst analyzeSupportResistance=(prices,currentPrice)=>{if(prices.length<20){return{support:currentPrice*0.95,resistance:currentPrice*1.05};}// Find recent highs and lows\nconst recentPrices=prices.slice(-30);let potentialResistance=[];let potentialSupport=[];// Find price points that may be support or resistance\nfor(let i=2;i<recentPrices.length-2;i++){// Check if it's a local peak (resistance)\nif(recentPrices[i]>recentPrices[i-1]&&recentPrices[i]>recentPrices[i-2]&&recentPrices[i]>recentPrices[i+1]&&recentPrices[i]>recentPrices[i+2]){potentialResistance.push(recentPrices[i]);}// Check if it's a local trough (support)\nif(recentPrices[i]<recentPrices[i-1]&&recentPrices[i]<recentPrices[i-2]&&recentPrices[i]<recentPrices[i+1]&&recentPrices[i]<recentPrices[i+2]){potentialSupport.push(recentPrices[i]);}}// Find closest levels\nlet resistance=Math.max(...recentPrices)*1.02;let support=Math.min(...recentPrices)*0.98;if(potentialResistance.length>0){// Find the nearest resistance level above current price\nconst aboveResistances=potentialResistance.filter(price=>price>currentPrice);if(aboveResistances.length>0){resistance=Math.min(...aboveResistances);}}if(potentialSupport.length>0){// Find the nearest support level below current price\nconst belowSupports=potentialSupport.filter(price=>price<currentPrice);if(belowSupports.length>0){support=Math.max(...belowSupports);}}return{support:parseFloat(support.toFixed(2)),resistance:parseFloat(resistance.toFixed(2))};};// Calculate recommendation based on technical indicators\nconst calculateRecommendation=()=>{if(isLoading||error||!technicalIndicators.sma){return{recommendation:\"Hold\",signals:[],color:\"#f0ad4e\"};}const price=parseFloat(stockData['05. price']||0);const indicators=technicalIndicators;let score=0;let signals=[];// SMA analysis\nif(indicators.sma){const sma20=parseFloat(indicators.sma.sma20);const sma50=parseFloat(indicators.sma.sma50);const sma200=parseFloat(indicators.sma.sma200);if(price>sma20&&price>sma50&&price>sma200){score+=2;signals.push(\"Price is above all major moving averages (strongly bullish)\");}else if(price>sma20&&price>sma50){score+=1;signals.push(\"Price is above short-term moving averages (bullish)\");}else if(price<sma20&&price<sma50&&price<sma200){score-=2;signals.push(\"Price is below all major moving averages (strongly bearish)\");}else if(price<sma20&&price<sma50){score-=1;signals.push(\"Price is below short-term moving averages (bearish)\");}// Golden cross / Death cross\nif(sma20>sma50&&sma20-sma50<sma20*0.01){score+=2;signals.push(\"Recent golden cross detected (bullish)\");}else if(sma20<sma50&&sma50-sma20<sma50*0.01){score-=2;signals.push(\"Recent death cross detected (bearish)\");}}// RSI analysis\nif(indicators.rsi){const rsi=parseFloat(indicators.rsi.value);if(rsi>70){score-=1.5;signals.push(`RSI is overbought at ${rsi} (bearish)`);}else if(rsi<30){score+=1.5;signals.push(`RSI is oversold at ${rsi} (bullish)`);}else if(rsi>60){score+=0.5;signals.push(`RSI shows strong momentum at ${rsi} (bullish)`);}else if(rsi<40){score-=0.5;signals.push(`RSI shows weak momentum at ${rsi} (bearish)`);}}// MACD analysis\nif(indicators.macd){if(indicators.macd.isBullish){score+=1;signals.push(\"MACD histogram is positive (bullish)\");}else{score-=1;signals.push(\"MACD histogram is negative (bearish)\");}}// Bollinger Bands analysis\nif(indicators.bollingerBands){if(indicators.bollingerBands.isOutsideUpper){score-=1;signals.push(\"Price is above upper Bollinger Band (potential reversal or strong uptrend)\");}else if(indicators.bollingerBands.isOutsideLower){score+=1;signals.push(\"Price is below lower Bollinger Band (potential reversal or strong downtrend)\");}// Check Bollinger Band width for potential breakout\nconst bbWidth=parseFloat(indicators.bollingerBands.width);if(bbWidth<2){signals.push(\"Tight Bollinger Bands suggest potential breakout soon\");}}// Volume analysis\nif(indicators.volume&&indicators.volume.isHigh){const volumeRatio=parseFloat(indicators.volume.ratio);if(indicators.priceChange&&parseFloat(indicators.priceChange.oneDay)>0){score+=1;signals.push(`High volume (${volumeRatio}x avg) with price increase (bullish)`);}else if(indicators.priceChange&&parseFloat(indicators.priceChange.oneDay)<0){score-=1;signals.push(`High volume (${volumeRatio}x avg) with price decrease (bearish)`);}}// Trend analysis\nif(indicators.trend){if(indicators.trend.direction===\"Bullish\"&&indicators.trend.strength===\"Strong\"){score+=1.5;signals.push(\"Strong bullish trend detected\");}else if(indicators.trend.direction===\"Bearish\"&&indicators.trend.strength===\"Strong\"){score-=1.5;signals.push(\"Strong bearish trend detected\");}else if(indicators.trend.direction===\"Recovering\"){score+=0.5;signals.push(\"Recovering trend detected (potential reversal)\");}}// Support/Resistance analysis\nif(indicators.supportResistance){const support=indicators.supportResistance.support;const resistance=indicators.supportResistance.resistance;const nearSupportPercent=(price-support)/price*100;const nearResistancePercent=(resistance-price)/price*100;if(nearSupportPercent<1){score+=0.5;signals.push(`Price is near support level at $${support} (potential bounce)`);}else if(nearResistancePercent<1){score-=0.5;signals.push(`Price is near resistance level at $${resistance} (potential rejection)`);}}// Determine recommendation\nlet recommendation=\"Hold\";let color=\"#f0ad4e\";// Yellow/orange for hold\nif(score>=3){recommendation=\"Strong Buy\";color=\"#5cb85c\";// Green\n}else if(score>1){recommendation=\"Buy\";color=\"#5bc0de\";// Light blue\n}else if(score<-2){recommendation=\"Strong Sell\";color=\"#d9534f\";// Red\n}else if(score<0){recommendation=\"Sell\";color=\"#f0605e\";// Light red\n}return{recommendation,signals,color};};const{recommendation,signals,color}=calculateRecommendation();if(isLoading){return/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Technical Analysis\"}),/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center',padding:'20px'},children:/*#__PURE__*/_jsx(\"p\",{children:\"Loading technical indicators...\"})})]});}if(error){return/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Technical Analysis\"}),/*#__PURE__*/_jsx(\"div\",{style:{color:'#F44336',textAlign:'center',padding:'20px'},children:/*#__PURE__*/_jsxs(\"p\",{children:[\"Error: \",error]})})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Technical Analysis\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"recommendation-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"recommendation\",style:{backgroundColor:color,padding:'15px',borderRadius:'5px',color:'white',fontWeight:'bold',textAlign:'center',fontSize:'1.2rem',marginBottom:'15px'},children:recommendation}),/*#__PURE__*/_jsxs(\"div\",{className:\"indicators-summary\",children:[technicalIndicators.sma&&/*#__PURE__*/_jsxs(\"div\",{className:\"indicator-group\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Moving Averages\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{children:[\"SMA 20: $\",technicalIndicators.sma.sma20]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"SMA 50: $\",technicalIndicators.sma.sma50]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"SMA 200: $\",technicalIndicators.sma.sma200]})]})]}),technicalIndicators.rsi&&/*#__PURE__*/_jsxs(\"div\",{className:\"indicator-group\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Momentum\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{children:[\"RSI (14): \",technicalIndicators.rsi.value,technicalIndicators.rsi.isOverbought&&\" (Overbought)\",technicalIndicators.rsi.isOversold&&\" (Oversold)\"]}),technicalIndicators.macd&&/*#__PURE__*/_jsxs(\"li\",{children:[\"MACD: \",technicalIndicators.macd.histogram>0?\"Bullish\":\"Bearish\"]})]})]}),technicalIndicators.supportResistance&&/*#__PURE__*/_jsxs(\"div\",{className:\"indicator-group\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Support/Resistance\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{children:[\"Support: $\",technicalIndicators.supportResistance.support]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"Resistance: $\",technicalIndicators.supportResistance.resistance]})]})]})]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Analysis:\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"signals-list\",children:signals.map((signal,index)=>/*#__PURE__*/_jsx(\"li\",{children:signal},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"disclaimer\",children:/*#__PURE__*/_jsx(\"small\",{children:/*#__PURE__*/_jsx(\"em\",{children:\"Disclaimer: This analysis is based on technical indicators only and should not be the sole basis for investment decisions.\"})})})]})]});};export default TechnicalAnalysis;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","TechnicalAnalysis","_ref","stockData","historicalData","setHistoricalData","isLoading","setIsLoading","error","setError","technicalIndicators","setTechnicalIndicators","symbol","period","interval","fetch","then","response","ok","Error","json","data","Array","isArray","indicators","calculateTechnicalIndicators","catch","err","console","message","currentStockData","length","sortedData","sort","a","b","Date","date","prices","map","item","parseFloat","price","volumes","parseInt","volume","currentPrice","prevClose","sma20","calculateSMA","sma50","sma200","Math","min","rsi","calculateRSI","macd","calculateMACD","bollingerBands","calculateBollingerBands","averageVolume","slice","reduce","sum","vol","currentVolume","volumeRatio","priceChange1Day","priceChange5Day","priceChange1Month","trendStrength","calculateTrendStrength","supportResistance","analyzeSupportResistance","sma","toFixed","isBullish","value","isOverbought","isOversold","macdLine","signal","signalLine","histogram","upper","middle","lower","width","isOutsideUpper","isOutsideLower","average","current","ratio","isHigh","priceChange","oneDay","oneDayPercent","fiveDay","fiveDayPercent","oneMonth","oneMonthPercent","trend","strength","direction","total","arguments","undefined","gains","losses","i","change","avgGain","avgLoss","currentGain","currentLoss","rs","fastEMA","calculateEMA","slowEMA","multiplier","ema","stdDev","recentPrices","sqrDiff","diff","avgSquareDiff","val","standardDeviation","sqrt","shortTerm","mediumTerm","totalStrength","abs","support","resistance","potentialResistance","potentialSupport","push","max","aboveResistances","filter","belowSupports","calculateRecommendation","recommendation","signals","color","score","bbWidth","nearSupportPercent","nearResistancePercent","className","children","style","textAlign","padding","backgroundColor","borderRadius","fontWeight","fontSize","marginBottom","index"],"sources":["/Users/pranav/Desktop/stock-market-app/src/components/TechnicalAnalysis.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TechnicalAnalysis = ({ stockData }) => {\n  const [historicalData, setHistoricalData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [technicalIndicators, setTechnicalIndicators] = useState({});\n\n  // Fetch historical data for technical analysis\n  useEffect(() => {\n    if (stockData && stockData['01. symbol']) {\n      setIsLoading(true);\n      setError(null);\n      \n      const symbol = stockData['01. symbol'];\n      // Get 3 months of data for better technical analysis\n      const period = '3mo';\n      const interval = '1d';\n      \n      fetch(`http://localhost:5001/api/stock/history?symbol=${symbol}&period=${period}&interval=${interval}`)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Failed to fetch historical data for technical analysis');\n          }\n          return response.json();\n        })\n        .then(data => {\n          if (data && data.data && Array.isArray(data.data)) {\n            setHistoricalData(data.data);\n            \n            // Calculate technical indicators\n            const indicators = calculateTechnicalIndicators(data.data, stockData);\n            setTechnicalIndicators(indicators);\n          } else {\n            setError('Invalid data format received');\n          }\n          setIsLoading(false);\n        })\n        .catch(err => {\n          console.error('Error fetching historical data for technical analysis:', err);\n          setError(err.message);\n          setIsLoading(false);\n        });\n    }\n  }, [stockData]);\n\n  // Calculate technical indicators from historical data\n  const calculateTechnicalIndicators = (data, currentStockData) => {\n    if (!data || data.length < 14) {\n      return { error: \"Insufficient data for analysis\" };\n    }\n\n    // Make sure data is sorted by date (oldest first)\n    const sortedData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date));\n    \n    // Extract prices for easier calculation\n    const prices = sortedData.map(item => parseFloat(item.price));\n    const volumes = sortedData.map(item => parseInt(item.volume));\n    \n    // Get current price info\n    const currentPrice = parseFloat(currentStockData['05. price']);\n    const prevClose = parseFloat(currentStockData['08. previous close']);\n    \n    // Calculate Simple Moving Averages\n    const sma20 = calculateSMA(prices, 20);\n    const sma50 = calculateSMA(prices, 50);\n    const sma200 = calculateSMA(prices, Math.min(200, prices.length));\n    \n    // Calculate RSI (Relative Strength Index)\n    const rsi = calculateRSI(prices);\n    \n    // Calculate MACD\n    const macd = calculateMACD(prices);\n    \n    // Calculate Bollinger Bands\n    const bollingerBands = calculateBollingerBands(prices);\n    \n    // Volume analysis\n    const averageVolume = volumes.slice(-10).reduce((sum, vol) => sum + vol, 0) / 10;\n    const currentVolume = parseInt(currentStockData['06. volume']);\n    const volumeRatio = currentVolume / averageVolume;\n    \n    // Price momentum\n    const priceChange1Day = currentPrice - prevClose;\n    const priceChange5Day = currentPrice - prices[prices.length - 5];\n    const priceChange1Month = currentPrice - prices[0];\n    \n    // Calculate trend strength\n    const trendStrength = calculateTrendStrength(prices);\n    \n    // Analyze support and resistance\n    const supportResistance = analyzeSupportResistance(prices, currentPrice);\n    \n    return {\n      sma: { \n        sma20: sma20.toFixed(2), \n        sma50: sma50.toFixed(2), \n        sma200: sma200.toFixed(2),\n        isBullish: currentPrice > sma20 && sma20 > sma50\n      },\n      rsi: {\n        value: rsi.toFixed(2),\n        isOverbought: rsi > 70,\n        isOversold: rsi < 30\n      },\n      macd: {\n        value: macd.macdLine.toFixed(2),\n        signal: macd.signalLine.toFixed(2),\n        histogram: macd.histogram.toFixed(2),\n        isBullish: macd.histogram > 0\n      },\n      bollingerBands: {\n        upper: bollingerBands.upper.toFixed(2),\n        middle: bollingerBands.middle.toFixed(2),\n        lower: bollingerBands.lower.toFixed(2),\n        width: ((bollingerBands.upper - bollingerBands.lower) / bollingerBands.middle * 100).toFixed(2),\n        isOutsideUpper: currentPrice > bollingerBands.upper,\n        isOutsideLower: currentPrice < bollingerBands.lower\n      },\n      volume: {\n        average: averageVolume.toFixed(0),\n        current: currentVolume,\n        ratio: volumeRatio.toFixed(2),\n        isHigh: volumeRatio > 1.5\n      },\n      priceChange: {\n        oneDay: priceChange1Day.toFixed(2),\n        oneDayPercent: (priceChange1Day / prevClose * 100).toFixed(2),\n        fiveDay: priceChange5Day.toFixed(2),\n        fiveDayPercent: (priceChange5Day / prices[prices.length - 5] * 100).toFixed(2),\n        oneMonth: priceChange1Month.toFixed(2),\n        oneMonthPercent: (priceChange1Month / prices[0] * 100).toFixed(2)\n      },\n      trend: {\n        strength: trendStrength.strength,\n        direction: trendStrength.direction\n      },\n      supportResistance: supportResistance\n    };\n  };\n\n  // Calculate Simple Moving Average\n  const calculateSMA = (prices, period) => {\n    if (prices.length < period) {\n      return prices[prices.length - 1] || 0;\n    }\n    \n    const sum = prices.slice(-period).reduce((total, price) => total + price, 0);\n    return sum / period;\n  };\n\n  // Calculate RSI (Relative Strength Index)\n  const calculateRSI = (prices, period = 14) => {\n    if (prices.length < period + 1) {\n      return 50; // Neutral if not enough data\n    }\n    \n    let gains = 0;\n    let losses = 0;\n    \n    // Calculate initial average gain/loss\n    for (let i = 1; i <= period; i++) {\n      const change = prices[prices.length - period - 1 + i] - prices[prices.length - period - 1 + i - 1];\n      if (change >= 0) {\n        gains += change;\n      } else {\n        losses -= change;\n      }\n    }\n    \n    let avgGain = gains / period;\n    let avgLoss = losses / period;\n    \n    // Calculate RSI using Wilder's smoothing method\n    for (let i = period + 1; i < prices.length; i++) {\n      const change = prices[i] - prices[i - 1];\n      let currentGain = 0;\n      let currentLoss = 0;\n      \n      if (change >= 0) {\n        currentGain = change;\n      } else {\n        currentLoss = -change;\n      }\n      \n      avgGain = (avgGain * (period - 1) + currentGain) / period;\n      avgLoss = (avgLoss * (period - 1) + currentLoss) / period;\n    }\n    \n    if (avgLoss === 0) {\n      return 100; // No losses means RSI = 100\n    }\n    \n    const rs = avgGain / avgLoss;\n    return 100 - (100 / (1 + rs));\n  };\n\n  // Calculate MACD\n  const calculateMACD = (prices) => {\n    // Default periods: 12, 26, 9\n    const fastEMA = calculateEMA(prices, 12);\n    const slowEMA = calculateEMA(prices, 26);\n    const macdLine = fastEMA - slowEMA;\n    \n    // Calculate signal line (9-day EMA of MACD line)\n    // For simplicity, we'll use a simplified approach\n    const signalLine = macdLine * 0.9 + calculateEMA(prices, 9) * 0.1;\n    const histogram = macdLine - signalLine;\n    \n    return { macdLine, signalLine, histogram };\n  };\n\n  // Calculate Exponential Moving Average\n  const calculateEMA = (prices, period) => {\n    if (prices.length < period) {\n      return prices[prices.length - 1] || 0;\n    }\n    \n    const sma = calculateSMA(prices.slice(0, period), period);\n    const multiplier = 2 / (period + 1);\n    \n    let ema = sma;\n    for (let i = period; i < prices.length; i++) {\n      ema = (prices[i] - ema) * multiplier + ema;\n    }\n    \n    return ema;\n  };\n\n  // Calculate Bollinger Bands\n  const calculateBollingerBands = (prices, period = 20, stdDev = 2) => {\n    if (prices.length < period) {\n      const price = prices[prices.length - 1] || 0;\n      return { upper: price * 1.05, middle: price, lower: price * 0.95 };\n    }\n    \n    const recentPrices = prices.slice(-period);\n    const middle = calculateSMA(recentPrices, period);\n    \n    // Calculate standard deviation\n    const sqrDiff = recentPrices.map(price => {\n      const diff = price - middle;\n      return diff * diff;\n    });\n    \n    const avgSquareDiff = sqrDiff.reduce((sum, val) => sum + val, 0) / period;\n    const standardDeviation = Math.sqrt(avgSquareDiff);\n    \n    const upper = middle + (standardDeviation * stdDev);\n    const lower = middle - (standardDeviation * stdDev);\n    \n    return { upper, middle, lower };\n  };\n\n  // Calculate trend strength\n  const calculateTrendStrength = (prices) => {\n    if (prices.length < 10) {\n      return { strength: \"Unknown\", direction: \"Neutral\" };\n    }\n    \n    const shortTerm = (prices[prices.length - 1] - prices[prices.length - 5]) / prices[prices.length - 5];\n    const mediumTerm = (prices[prices.length - 1] - prices[prices.length - 10]) / prices[prices.length - 10];\n    \n    let direction = \"Neutral\";\n    if (shortTerm > 0 && mediumTerm > 0) {\n      direction = \"Bullish\";\n    } else if (shortTerm < 0 && mediumTerm < 0) {\n      direction = \"Bearish\";\n    } else if (shortTerm > 0 && mediumTerm < 0) {\n      direction = \"Recovering\";\n    } else if (shortTerm < 0 && mediumTerm > 0) {\n      direction = \"Weakening\";\n    }\n    \n    let strength = \"Weak\";\n    const totalStrength = Math.abs(shortTerm) + Math.abs(mediumTerm);\n    if (totalStrength > 0.1) {\n      strength = \"Strong\";\n    } else if (totalStrength > 0.05) {\n      strength = \"Moderate\";\n    }\n    \n    return { strength, direction };\n  };\n\n  // Analyze support and resistance levels\n  const analyzeSupportResistance = (prices, currentPrice) => {\n    if (prices.length < 20) {\n      return { support: currentPrice * 0.95, resistance: currentPrice * 1.05 };\n    }\n    \n    // Find recent highs and lows\n    const recentPrices = prices.slice(-30);\n    let potentialResistance = [];\n    let potentialSupport = [];\n    \n    // Find price points that may be support or resistance\n    for (let i = 2; i < recentPrices.length - 2; i++) {\n      // Check if it's a local peak (resistance)\n      if (recentPrices[i] > recentPrices[i-1] && \n          recentPrices[i] > recentPrices[i-2] && \n          recentPrices[i] > recentPrices[i+1] && \n          recentPrices[i] > recentPrices[i+2]) {\n        potentialResistance.push(recentPrices[i]);\n      }\n      \n      // Check if it's a local trough (support)\n      if (recentPrices[i] < recentPrices[i-1] && \n          recentPrices[i] < recentPrices[i-2] && \n          recentPrices[i] < recentPrices[i+1] && \n          recentPrices[i] < recentPrices[i+2]) {\n        potentialSupport.push(recentPrices[i]);\n      }\n    }\n    \n    // Find closest levels\n    let resistance = Math.max(...recentPrices) * 1.02;\n    let support = Math.min(...recentPrices) * 0.98;\n    \n    if (potentialResistance.length > 0) {\n      // Find the nearest resistance level above current price\n      const aboveResistances = potentialResistance.filter(price => price > currentPrice);\n      if (aboveResistances.length > 0) {\n        resistance = Math.min(...aboveResistances);\n      }\n    }\n    \n    if (potentialSupport.length > 0) {\n      // Find the nearest support level below current price\n      const belowSupports = potentialSupport.filter(price => price < currentPrice);\n      if (belowSupports.length > 0) {\n        support = Math.max(...belowSupports);\n      }\n    }\n    \n    return { support: parseFloat(support.toFixed(2)), resistance: parseFloat(resistance.toFixed(2)) };\n  };\n\n  // Calculate recommendation based on technical indicators\n  const calculateRecommendation = () => {\n    if (isLoading || error || !technicalIndicators.sma) {\n      return { recommendation: \"Hold\", signals: [], color: \"#f0ad4e\" };\n    }\n    \n    const price = parseFloat(stockData['05. price'] || 0);\n    const indicators = technicalIndicators;\n    \n    let score = 0;\n    let signals = [];\n    \n    // SMA analysis\n    if (indicators.sma) {\n      const sma20 = parseFloat(indicators.sma.sma20);\n      const sma50 = parseFloat(indicators.sma.sma50);\n      const sma200 = parseFloat(indicators.sma.sma200);\n      \n      if (price > sma20 && price > sma50 && price > sma200) {\n        score += 2;\n        signals.push(\"Price is above all major moving averages (strongly bullish)\");\n      } else if (price > sma20 && price > sma50) {\n        score += 1;\n        signals.push(\"Price is above short-term moving averages (bullish)\");\n      } else if (price < sma20 && price < sma50 && price < sma200) {\n        score -= 2;\n        signals.push(\"Price is below all major moving averages (strongly bearish)\");\n      } else if (price < sma20 && price < sma50) {\n        score -= 1;\n        signals.push(\"Price is below short-term moving averages (bearish)\");\n      }\n      \n      // Golden cross / Death cross\n      if (sma20 > sma50 && sma20 - sma50 < sma20 * 0.01) {\n        score += 2;\n        signals.push(\"Recent golden cross detected (bullish)\");\n      } else if (sma20 < sma50 && sma50 - sma20 < sma50 * 0.01) {\n        score -= 2;\n        signals.push(\"Recent death cross detected (bearish)\");\n      }\n    }\n    \n    // RSI analysis\n    if (indicators.rsi) {\n      const rsi = parseFloat(indicators.rsi.value);\n      \n      if (rsi > 70) {\n        score -= 1.5;\n        signals.push(`RSI is overbought at ${rsi} (bearish)`);\n      } else if (rsi < 30) {\n        score += 1.5;\n        signals.push(`RSI is oversold at ${rsi} (bullish)`);\n      } else if (rsi > 60) {\n        score += 0.5;\n        signals.push(`RSI shows strong momentum at ${rsi} (bullish)`);\n      } else if (rsi < 40) {\n        score -= 0.5;\n        signals.push(`RSI shows weak momentum at ${rsi} (bearish)`);\n      }\n    }\n    \n    // MACD analysis\n    if (indicators.macd) {\n      if (indicators.macd.isBullish) {\n        score += 1;\n        signals.push(\"MACD histogram is positive (bullish)\");\n      } else {\n        score -= 1;\n        signals.push(\"MACD histogram is negative (bearish)\");\n      }\n    }\n    \n    // Bollinger Bands analysis\n    if (indicators.bollingerBands) {\n      if (indicators.bollingerBands.isOutsideUpper) {\n        score -= 1;\n        signals.push(\"Price is above upper Bollinger Band (potential reversal or strong uptrend)\");\n      } else if (indicators.bollingerBands.isOutsideLower) {\n        score += 1;\n        signals.push(\"Price is below lower Bollinger Band (potential reversal or strong downtrend)\");\n      }\n      \n      // Check Bollinger Band width for potential breakout\n      const bbWidth = parseFloat(indicators.bollingerBands.width);\n      if (bbWidth < 2) {\n        signals.push(\"Tight Bollinger Bands suggest potential breakout soon\");\n      }\n    }\n    \n    // Volume analysis\n    if (indicators.volume && indicators.volume.isHigh) {\n      const volumeRatio = parseFloat(indicators.volume.ratio);\n      if (indicators.priceChange && parseFloat(indicators.priceChange.oneDay) > 0) {\n        score += 1;\n        signals.push(`High volume (${volumeRatio}x avg) with price increase (bullish)`);\n      } else if (indicators.priceChange && parseFloat(indicators.priceChange.oneDay) < 0) {\n        score -= 1;\n        signals.push(`High volume (${volumeRatio}x avg) with price decrease (bearish)`);\n      }\n    }\n    \n    // Trend analysis\n    if (indicators.trend) {\n      if (indicators.trend.direction === \"Bullish\" && indicators.trend.strength === \"Strong\") {\n        score += 1.5;\n        signals.push(\"Strong bullish trend detected\");\n      } else if (indicators.trend.direction === \"Bearish\" && indicators.trend.strength === \"Strong\") {\n        score -= 1.5;\n        signals.push(\"Strong bearish trend detected\");\n      } else if (indicators.trend.direction === \"Recovering\") {\n        score += 0.5;\n        signals.push(\"Recovering trend detected (potential reversal)\");\n      }\n    }\n    \n    // Support/Resistance analysis\n    if (indicators.supportResistance) {\n      const support = indicators.supportResistance.support;\n      const resistance = indicators.supportResistance.resistance;\n      const nearSupportPercent = ((price - support) / price) * 100;\n      const nearResistancePercent = ((resistance - price) / price) * 100;\n      \n      if (nearSupportPercent < 1) {\n        score += 0.5;\n        signals.push(`Price is near support level at $${support} (potential bounce)`);\n      } else if (nearResistancePercent < 1) {\n        score -= 0.5;\n        signals.push(`Price is near resistance level at $${resistance} (potential rejection)`);\n      }\n    }\n    \n    // Determine recommendation\n    let recommendation = \"Hold\";\n    let color = \"#f0ad4e\"; // Yellow/orange for hold\n    \n    if (score >= 3) {\n      recommendation = \"Strong Buy\";\n      color = \"#5cb85c\"; // Green\n    } else if (score > 1) {\n      recommendation = \"Buy\";\n      color = \"#5bc0de\"; // Light blue\n    } else if (score < -2) {\n      recommendation = \"Strong Sell\";\n      color = \"#d9534f\"; // Red\n    } else if (score < 0) {\n      recommendation = \"Sell\";\n      color = \"#f0605e\"; // Light red\n    }\n    \n    return { recommendation, signals, color };\n  };\n\n  const { recommendation, signals, color } = calculateRecommendation();\n\n  if (isLoading) {\n    return (\n      <div className=\"card\">\n        <h2>Technical Analysis</h2>\n        <div style={{ textAlign: 'center', padding: '20px' }}>\n          <p>Loading technical indicators...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"card\">\n        <h2>Technical Analysis</h2>\n        <div style={{ color: '#F44336', textAlign: 'center', padding: '20px' }}>\n          <p>Error: {error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card\">\n      <h2>Technical Analysis</h2>\n      \n      <div className=\"recommendation-container\">\n        <div \n          className=\"recommendation\" \n          style={{ \n            backgroundColor: color,\n            padding: '15px',\n            borderRadius: '5px',\n            color: 'white',\n            fontWeight: 'bold',\n            textAlign: 'center',\n            fontSize: '1.2rem',\n            marginBottom: '15px'\n          }}\n        >\n          {recommendation}\n        </div>\n        \n        <div className=\"indicators-summary\">\n          {technicalIndicators.sma && (\n            <div className=\"indicator-group\">\n              <h3>Moving Averages</h3>\n              <ul>\n                <li>SMA 20: ${technicalIndicators.sma.sma20}</li>\n                <li>SMA 50: ${technicalIndicators.sma.sma50}</li>\n                <li>SMA 200: ${technicalIndicators.sma.sma200}</li>\n              </ul>\n            </div>\n          )}\n          \n          {technicalIndicators.rsi && (\n            <div className=\"indicator-group\">\n              <h3>Momentum</h3>\n              <ul>\n                <li>RSI (14): {technicalIndicators.rsi.value} \n                  {technicalIndicators.rsi.isOverbought && \" (Overbought)\"}\n                  {technicalIndicators.rsi.isOversold && \" (Oversold)\"}\n                </li>\n                {technicalIndicators.macd && (\n                  <li>MACD: {technicalIndicators.macd.histogram > 0 ? \"Bullish\" : \"Bearish\"}</li>\n                )}\n              </ul>\n            </div>\n          )}\n          \n          {technicalIndicators.supportResistance && (\n            <div className=\"indicator-group\">\n              <h3>Support/Resistance</h3>\n              <ul>\n                <li>Support: ${technicalIndicators.supportResistance.support}</li>\n                <li>Resistance: ${technicalIndicators.supportResistance.resistance}</li>\n              </ul>\n            </div>\n          )}\n        </div>\n        \n        <h3>Analysis:</h3>\n        <ul className=\"signals-list\">\n          {signals.map((signal, index) => (\n            <li key={index}>{signal}</li>\n          ))}\n        </ul>\n        \n        <div className=\"disclaimer\">\n          <small>\n            <em>Disclaimer: This analysis is based on technical indicators only and should not be the sole basis for investment decisions.</em>\n          </small>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TechnicalAnalysis; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}