{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/SU/Spring'25/IST 615 - Cloud Management/stock-market-app/src/components/StockChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { BarChart, Bar, LineChart, Line, ComposedChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell, CandlestickChart, Candlestick, ReferenceLine, Area, Scatter } from 'recharts';\nimport { fetchHistoricalData, fetchStockData } from '../services/stockService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockChart = ({\n  stockData\n}) => {\n  _s();\n  const [chartType, setChartType] = useState('bar');\n  const [historicalData, setHistoricalData] = useState([]);\n  const [sectorData, setSectorData] = useState(null);\n  const [marketData, setMarketData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [timePeriod, setTimePeriod] = useState('1M');\n\n  // Fetch historical data from backend API\n  useEffect(() => {\n    if (stockData && stockData['01. symbol']) {\n      setIsLoading(true);\n      setError(null);\n      setHistoricalData([]);\n      const symbol = stockData['01. symbol'];\n\n      // Map time period selection to API parameter\n      let period = '1mo'; // Default to 1 month\n      if (timePeriod === '3M') period = '3mo';\n      if (timePeriod === '6M') period = '6mo';\n      if (timePeriod === '1Y') period = '1y';\n      const interval = '1d'; // Default to daily data\n\n      // Fetch stock historical data using our service\n      fetchHistoricalData(symbol, period, interval).then(data => {\n        if (data && data.data && Array.isArray(data.data)) {\n          setHistoricalData(data.data);\n\n          // Get sector for the stock (simplified mapping)\n          let sector = 'TECHNOLOGY';\n          if (['AAPL', 'MSFT', 'GOOG', 'GOOGL', 'META', 'NVDA', 'ADBE', 'CSCO', 'INTC'].includes(symbol)) {\n            sector = 'XLK'; // Technology sector ETF\n          } else if (['AMZN', 'TSLA', 'NFLX', 'DIS', 'CMCSA'].includes(symbol)) {\n            sector = 'XLC'; // Communication Services sector ETF\n          } else if (['JPM', 'BAC', 'V', 'MA', 'PYPL'].includes(symbol)) {\n            sector = 'XLF'; // Financial sector ETF\n          } else if (['JNJ', 'PFE', 'MRK', 'TMO'].includes(symbol)) {\n            sector = 'XLV'; // Healthcare sector ETF\n          } else if (['WMT', 'PG', 'COST', 'KO', 'PEP'].includes(symbol)) {\n            sector = 'XLP'; // Consumer Staples sector ETF\n          }\n\n          // Fetch sector ETF data\n          fetchComparisonData(sector, 'sector');\n\n          // Fetch market index data (S&P 500)\n          fetchComparisonData('SPY', 'market');\n        } else {\n          setError('Invalid data format received');\n        }\n        setIsLoading(false);\n      }).catch(err => {\n        console.error('Error fetching historical data:', err);\n        setError(err.message);\n        setIsLoading(false);\n      });\n    }\n  }, [stockData, timePeriod]);\n\n  // Helper function to fetch comparison data (sector, market index)\n  const fetchComparisonData = (symbol, type) => {\n    // Use stockService to fetch data\n    fetchStockData(symbol).then(data => {\n      if (type === 'sector') {\n        setSectorData(data);\n      } else if (type === 'market') {\n        setMarketData(data);\n      }\n    }).catch(err => {\n      console.error(`Error fetching ${type} data:`, err);\n    });\n  };\n\n  // Creating data for current day price levels\n  const prepareChartData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    const basePrice = parseFloat(stockData['05. price']);\n\n    // Create daily price data for visualization\n    return [{\n      name: 'Open',\n      price: parseFloat(stockData['02. open'])\n    }, {\n      name: 'Low',\n      price: parseFloat(stockData['04. low'])\n    }, {\n      name: 'Current',\n      price: basePrice\n    }, {\n      name: 'High',\n      price: parseFloat(stockData['03. high'])\n    }];\n  };\n\n  // Generate data for price comparison with sector and index using real data\n  const generateComparisonData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n\n    // Stock data\n    const stockPrice = parseFloat(stockData['05. price']);\n    const stockChange = parseFloat(stockData['09. change'] || 0);\n    const stockPercentChange = stockChange / stockPrice * 100;\n    const result = [{\n      name: stockData['01. symbol'],\n      performance: parseFloat(stockPercentChange.toFixed(2)),\n      fill: stockPercentChange >= 0 ? '#4CAF50' : '#F44336'\n    }];\n\n    // Add sector data if available\n    if (sectorData && sectorData['05. price'] && sectorData['09. change']) {\n      const sectorChange = parseFloat(sectorData['09. change']);\n      const sectorPrice = parseFloat(sectorData['05. price']);\n      const sectorPercentChange = sectorChange / sectorPrice * 100;\n      result.push({\n        name: `${sectorData['01. symbol']} (Sector)`,\n        performance: parseFloat(sectorPercentChange.toFixed(2)),\n        fill: sectorPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      });\n    } else {\n      // Default sector if data not available yet\n      result.push({\n        name: 'Sector Avg',\n        performance: 0,\n        fill: '#9E9E9E'\n      });\n    }\n\n    // Add market index data if available\n    if (marketData && marketData['05. price'] && marketData['09. change']) {\n      const marketChange = parseFloat(marketData['09. change']);\n      const marketPrice = parseFloat(marketData['05. price']);\n      const marketPercentChange = marketChange / marketPrice * 100;\n      result.push({\n        name: `${marketData['01. symbol']} (Market)`,\n        performance: parseFloat(marketPercentChange.toFixed(2)),\n        fill: marketPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      });\n    } else {\n      // Default market if data not available yet\n      result.push({\n        name: 'Market Index',\n        performance: 0,\n        fill: '#9E9E9E'\n      });\n    }\n    return result;\n  };\n  const chartData = prepareChartData();\n  const comparisonData = generateComparisonData();\n\n  // Determine if stock is up or down for color schemes\n  const isStockUp = parseFloat(stockData['09. change'] || 0) >= 0;\n  const mainColor = isStockUp ? '#4CAF50' : '#F44336';\n\n  // Chart type options\n  const chartTypes = [{\n    id: 'bar',\n    label: 'Price Levels'\n  }, {\n    id: 'line',\n    label: 'Price History'\n  }, {\n    id: 'volume',\n    label: 'Volume Analysis'\n  }, {\n    id: 'comparison',\n    label: 'Performance Comparison'\n  }];\n\n  // Loading state\n  if ((chartType === 'line' || chartType === 'volume') && isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '400px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading historical data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Error state\n  if ((chartType === 'line' || chartType === 'volume') && error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '400px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: '#F44336'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error, \". Unable to display historical data.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this);\n  }\n\n  // No data state\n  if ((chartType === 'line' || chartType === 'volume') && historicalData.length === 0 && !isLoading && !error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '400px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No historical data available for this stock.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render different chart based on selection\n  const renderSelectedChart = () => {\n    switch (chartType) {\n      case 'bar':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: chartData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: [dataMin => Math.floor(dataMin * 0.995), dataMax => Math.ceil(dataMax * 1.005)],\n              tickFormatter: value => `$${value.toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Price']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"price\",\n              fill: mainColor\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this);\n      case 'line':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: historicalData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: ['auto', 'auto'],\n              tickFormatter: value => `$${value.toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Price'],\n              labelFormatter: label => `Date: ${label}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"price\",\n              stroke: mainColor,\n              strokeWidth: 2,\n              dot: {\n                r: 0\n              },\n              activeDot: {\n                r: 6\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this);\n      case 'volume':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(ComposedChart, {\n            data: historicalData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              yAxisId: \"left\",\n              orientation: \"left\",\n              tickFormatter: value => `$${value.toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              yAxisId: \"right\",\n              orientation: \"right\",\n              domain: ['auto', 'auto'],\n              tickFormatter: value => `${(value / 1000000).toFixed(1)}M`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: (value, name) => {\n                return name === 'price' ? [`$${value.toFixed(2)}`, 'Price'] : [`${(value / 1000000).toFixed(1)}M`, 'Volume'];\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              yAxisId: \"left\",\n              type: \"monotone\",\n              dataKey: \"price\",\n              stroke: mainColor,\n              strokeWidth: 2,\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              yAxisId: \"right\",\n              dataKey: \"volume\",\n              fill: \"#8884d8\",\n              opacity: 0.5\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this);\n      case 'comparison':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: comparisonData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              tickFormatter: value => `${value}%`,\n              domain: [dataMin => Math.min(dataMin, -2), dataMax => Math.max(dataMax, 2)]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`${value}%`, 'Performance']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"performance\",\n              fill: \"#8884d8\",\n              children: comparisonData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: entry.fill\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please select a chart type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this);\n    }\n  };\n\n  // Function to generate price levels data\n  const generatePriceLevelsData = useCallback(() => {\n    if (!stockData) return null;\n    const open = parseFloat((stockData === null || stockData === void 0 ? void 0 : stockData['02. open']) || 0);\n    const high = parseFloat((stockData === null || stockData === void 0 ? void 0 : stockData['03. high']) || 0);\n    const low = parseFloat((stockData === null || stockData === void 0 ? void 0 : stockData['04. low']) || 0);\n    const price = parseFloat((stockData === null || stockData === void 0 ? void 0 : stockData['05. price']) || 0);\n    const previousClose = parseFloat((stockData === null || stockData === void 0 ? void 0 : stockData['08. previous close']) || 0);\n    return [{\n      name: 'Previous Close',\n      value: previousClose,\n      fill: '#8884d8'\n    }, {\n      name: 'Open',\n      value: open,\n      fill: '#82ca9d'\n    }, {\n      name: 'Low',\n      value: low,\n      fill: '#ff8042'\n    }, {\n      name: 'Price',\n      value: price,\n      fill: '#ffc658'\n    }, {\n      name: 'High',\n      value: high,\n      fill: '#0088FE'\n    }];\n  }, [stockData]);\n\n  // Function to prepare candlestick data for enhanced price levels graph\n  const prepareCandlestickData = useCallback(() => {\n    if (!historicalData || !historicalData.length) return [];\n\n    // Get the last 10 trading days for the candlestick chart\n    return historicalData.slice(0, 10).map(item => ({\n      date: item.date,\n      open: parseFloat(item.open),\n      high: parseFloat(item.high),\n      low: parseFloat(item.low),\n      close: parseFloat(item.price),\n      volume: parseFloat(item.volume)\n    }));\n  }, [historicalData]);\n\n  // Enhanced rendering of the price levels chart\n  const renderPriceLevelsChart = () => {\n    const priceLevelsData = generatePriceLevelsData();\n    const candlestickData = prepareCandlestickData();\n    if (!priceLevelsData || !candlestickData.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No data available for price levels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Price Levels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"price-levels-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"candlestick-chart\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Last 10 Trading Days\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: 250,\n            children: /*#__PURE__*/_jsxDEV(ComposedChart, {\n              data: candlestickData,\n              margin: {\n                top: 20,\n                right: 30,\n                left: 20,\n                bottom: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                domain: ['auto', 'auto']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                formatter: (value, name) => [parseFloat(value).toFixed(2), name],\n                labelFormatter: value => `Date: ${value}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: \"volume\",\n                fill: \"#8884d8\",\n                opacity: 0.3,\n                yAxisId: \"volume\",\n                name: \"Volume\",\n                barSize: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"close\",\n                stroke: \"#ff7300\",\n                name: \"Close Price\",\n                dot: {\n                  r: 5\n                },\n                activeDot: {\n                  r: 8\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                y: parseFloat((stockData === null || stockData === void 0 ? void 0 : stockData['05. price']) || 0),\n                stroke: \"red\",\n                strokeDasharray: \"3 3\",\n                label: \"Current\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"price-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Today's Price Summary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: 200,\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: priceLevelsData,\n              layout: \"vertical\",\n              margin: {\n                top: 5,\n                right: 30,\n                left: 50,\n                bottom: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 466,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                type: \"number\",\n                domain: ['dataMin - 5', 'dataMax + 5']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                type: \"category\",\n                dataKey: \"name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 468,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                formatter: value => [`$${parseFloat(value).toFixed(2)}`, 'Price']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: \"value\",\n                fill: \"#8884d8\",\n                name: \"Price Level\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                x: parseFloat((stockData === null || stockData === void 0 ? void 0 : stockData['05. price']) || 0),\n                stroke: \"red\",\n                strokeDasharray: \"3 3\",\n                label: \"Current\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render daily chart\n  const renderDailyChart = () => {\n    if (!historicalData || !historicalData.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No historical data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Daily Price Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 400,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: historicalData,\n          margin: {\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            domain: ['auto', 'auto'],\n            tickFormatter: value => `$${value.toFixed(2)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => [`$${value.toFixed(2)}`, 'Price'],\n            labelFormatter: label => `Date: ${label}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"price\",\n            stroke: mainColor,\n            strokeWidth: 2,\n            dot: {\n              r: 0\n            },\n            activeDot: {\n              r: 6\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render comparison chart\n  const renderComparisonChart = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Performance Comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 400,\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: comparisonData,\n          margin: {\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            tickFormatter: value => `${value}%`,\n            domain: [dataMin => Math.min(dataMin, -2), dataMax => Math.max(dataMax, 2)]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => [`${value}%`, 'Performance']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"performance\",\n            fill: \"#8884d8\",\n            children: comparisonData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n              fill: entry.fill\n            }, `cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-chart-container card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-type-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'price-levels' ? 'active' : '',\n          onClick: () => setChartType('price-levels'),\n          children: \"Price Levels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'daily' ? 'active' : '',\n          onClick: () => setChartType('daily'),\n          children: \"Daily\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'comparison' ? 'active' : '',\n          onClick: () => setChartType('comparison'),\n          children: \"Comparison\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 9\n      }, this), chartType === 'daily' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-period-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: timePeriod === '1M' ? 'active' : '',\n          onClick: () => setTimePeriod('1M'),\n          children: \"1M\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: timePeriod === '3M' ? 'active' : '',\n          onClick: () => setTimePeriod('3M'),\n          children: \"3M\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: timePeriod === '6M' ? 'active' : '',\n          onClick: () => setTimePeriod('6M'),\n          children: \"6M\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: timePeriod === '1Y' ? 'active' : '',\n          onClick: () => setTimePeriod('1Y'),\n          children: \"1Y\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-content\",\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading chart data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [chartType === 'price-levels' && renderPriceLevelsChart(), chartType === 'daily' && renderDailyChart(), chartType === 'comparison' && renderComparisonChart()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 562,\n    columnNumber: 5\n  }, this);\n};\n_s(StockChart, \"E0zb28u83ylnZcyp0o8J43IF7VU=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","BarChart","Bar","LineChart","Line","ComposedChart","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","CandlestickChart","Candlestick","ReferenceLine","Area","Scatter","fetchHistoricalData","fetchStockData","jsxDEV","_jsxDEV","StockChart","stockData","_s","chartType","setChartType","historicalData","setHistoricalData","sectorData","setSectorData","marketData","setMarketData","isLoading","setIsLoading","error","setError","timePeriod","setTimePeriod","symbol","period","interval","then","data","Array","isArray","sector","includes","fetchComparisonData","catch","err","console","message","type","prepareChartData","basePrice","parseFloat","name","price","generateComparisonData","stockPrice","stockChange","stockPercentChange","result","performance","toFixed","fill","sectorChange","sectorPrice","sectorPercentChange","push","marketChange","marketPrice","marketPercentChange","chartData","comparisonData","isStockUp","mainColor","chartTypes","id","label","className","style","height","display","justifyContent","alignItems","children","fileName","_jsxFileName","lineNumber","columnNumber","color","length","renderSelectedChart","width","margin","top","right","left","bottom","strokeDasharray","dataKey","domain","dataMin","Math","floor","dataMax","ceil","tickFormatter","value","formatter","labelFormatter","stroke","strokeWidth","dot","r","activeDot","yAxisId","orientation","opacity","min","max","map","entry","index","generatePriceLevelsData","open","high","low","previousClose","prepareCandlestickData","slice","item","date","close","volume","renderPriceLevelsChart","priceLevelsData","candlestickData","barSize","y","layout","x","renderDailyChart","renderComparisonChart","onClick","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/SU/Spring'25/IST 615 - Cloud Management/stock-market-app/src/components/StockChart.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { \n  BarChart, Bar, LineChart, Line, ComposedChart, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, \n  ResponsiveContainer, Cell, CandlestickChart, Candlestick,\n  ReferenceLine, Area, Scatter\n} from 'recharts';\nimport { fetchHistoricalData, fetchStockData } from '../services/stockService';\n\nconst StockChart = ({ stockData }) => {\n  const [chartType, setChartType] = useState('bar');\n  const [historicalData, setHistoricalData] = useState([]);\n  const [sectorData, setSectorData] = useState(null);\n  const [marketData, setMarketData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [timePeriod, setTimePeriod] = useState('1M');\n  \n  // Fetch historical data from backend API\n  useEffect(() => {\n    if (stockData && stockData['01. symbol']) {\n      setIsLoading(true);\n      setError(null);\n      setHistoricalData([]);\n      \n      const symbol = stockData['01. symbol'];\n      \n      // Map time period selection to API parameter\n      let period = '1mo'; // Default to 1 month\n      if (timePeriod === '3M') period = '3mo';\n      if (timePeriod === '6M') period = '6mo';\n      if (timePeriod === '1Y') period = '1y';\n      \n      const interval = '1d'; // Default to daily data\n      \n      // Fetch stock historical data using our service\n      fetchHistoricalData(symbol, period, interval)\n        .then(data => {\n          if (data && data.data && Array.isArray(data.data)) {\n            setHistoricalData(data.data);\n            \n            // Get sector for the stock (simplified mapping)\n            let sector = 'TECHNOLOGY';\n            if (['AAPL', 'MSFT', 'GOOG', 'GOOGL', 'META', 'NVDA', 'ADBE', 'CSCO', 'INTC'].includes(symbol)) {\n              sector = 'XLK'; // Technology sector ETF\n            } else if (['AMZN', 'TSLA', 'NFLX', 'DIS', 'CMCSA'].includes(symbol)) {\n              sector = 'XLC'; // Communication Services sector ETF\n            } else if (['JPM', 'BAC', 'V', 'MA', 'PYPL'].includes(symbol)) {\n              sector = 'XLF'; // Financial sector ETF\n            } else if (['JNJ', 'PFE', 'MRK', 'TMO'].includes(symbol)) {\n              sector = 'XLV'; // Healthcare sector ETF\n            } else if (['WMT', 'PG', 'COST', 'KO', 'PEP'].includes(symbol)) {\n              sector = 'XLP'; // Consumer Staples sector ETF\n            }\n            \n            // Fetch sector ETF data\n            fetchComparisonData(sector, 'sector');\n            \n            // Fetch market index data (S&P 500)\n            fetchComparisonData('SPY', 'market');\n          } else {\n            setError('Invalid data format received');\n          }\n          setIsLoading(false);\n        })\n        .catch(err => {\n          console.error('Error fetching historical data:', err);\n          setError(err.message);\n          setIsLoading(false);\n        });\n    }\n  }, [stockData, timePeriod]);\n  \n  // Helper function to fetch comparison data (sector, market index)\n  const fetchComparisonData = (symbol, type) => {\n    // Use stockService to fetch data\n    fetchStockData(symbol)\n      .then(data => {\n        if (type === 'sector') {\n          setSectorData(data);\n        } else if (type === 'market') {\n          setMarketData(data);\n        }\n      })\n      .catch(err => {\n        console.error(`Error fetching ${type} data:`, err);\n      });\n  };\n  \n  // Creating data for current day price levels\n  const prepareChartData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n\n    const basePrice = parseFloat(stockData['05. price']);\n    \n    // Create daily price data for visualization\n    return [\n      { name: 'Open', price: parseFloat(stockData['02. open']) },\n      { name: 'Low', price: parseFloat(stockData['04. low']) },\n      { name: 'Current', price: basePrice },\n      { name: 'High', price: parseFloat(stockData['03. high']) },\n    ];\n  };\n\n  // Generate data for price comparison with sector and index using real data\n  const generateComparisonData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    \n    // Stock data\n    const stockPrice = parseFloat(stockData['05. price']);\n    const stockChange = parseFloat(stockData['09. change'] || 0);\n    const stockPercentChange = (stockChange / stockPrice) * 100;\n    \n    const result = [\n      {\n        name: stockData['01. symbol'],\n        performance: parseFloat(stockPercentChange.toFixed(2)),\n        fill: stockPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      }\n    ];\n    \n    // Add sector data if available\n    if (sectorData && sectorData['05. price'] && sectorData['09. change']) {\n      const sectorChange = parseFloat(sectorData['09. change']);\n      const sectorPrice = parseFloat(sectorData['05. price']);\n      const sectorPercentChange = (sectorChange / sectorPrice) * 100;\n      \n      result.push({\n        name: `${sectorData['01. symbol']} (Sector)`,\n        performance: parseFloat(sectorPercentChange.toFixed(2)),\n        fill: sectorPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      });\n    } else {\n      // Default sector if data not available yet\n      result.push({\n        name: 'Sector Avg',\n        performance: 0,\n        fill: '#9E9E9E'\n      });\n    }\n    \n    // Add market index data if available\n    if (marketData && marketData['05. price'] && marketData['09. change']) {\n      const marketChange = parseFloat(marketData['09. change']);\n      const marketPrice = parseFloat(marketData['05. price']);\n      const marketPercentChange = (marketChange / marketPrice) * 100;\n      \n      result.push({\n        name: `${marketData['01. symbol']} (Market)`,\n        performance: parseFloat(marketPercentChange.toFixed(2)),\n        fill: marketPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      });\n    } else {\n      // Default market if data not available yet\n      result.push({\n        name: 'Market Index',\n        performance: 0,\n        fill: '#9E9E9E'\n      });\n    }\n    \n    return result;\n  };\n\n  const chartData = prepareChartData();\n  const comparisonData = generateComparisonData();\n  \n  // Determine if stock is up or down for color schemes\n  const isStockUp = parseFloat(stockData['09. change'] || 0) >= 0;\n  const mainColor = isStockUp ? '#4CAF50' : '#F44336';\n\n  // Chart type options\n  const chartTypes = [\n    { id: 'bar', label: 'Price Levels' },\n    { id: 'line', label: 'Price History' },\n    { id: 'volume', label: 'Volume Analysis' },\n    { id: 'comparison', label: 'Performance Comparison' }\n  ];\n\n  // Loading state\n  if ((chartType === 'line' || chartType === 'volume') && isLoading) {\n    return (\n      <div className=\"chart-container\" style={{ height: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <p>Loading historical data...</p>\n      </div>\n    );\n  }\n\n  // Error state\n  if ((chartType === 'line' || chartType === 'volume') && error) {\n    return (\n      <div className=\"chart-container\" style={{ height: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#F44336' }}>\n        <p>Error: {error}. Unable to display historical data.</p>\n      </div>\n    );\n  }\n\n  // No data state\n  if ((chartType === 'line' || chartType === 'volume') && historicalData.length === 0 && !isLoading && !error) {\n    return (\n      <div className=\"chart-container\" style={{ height: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <p>No historical data available for this stock.</p>\n      </div>\n    );\n  }\n\n  // Render different chart based on selection\n  const renderSelectedChart = () => {\n    switch(chartType) {\n      case 'bar':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={chartData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis \n                domain={[\n                  (dataMin) => Math.floor(dataMin * 0.995),\n                  (dataMax) => Math.ceil(dataMax * 1.005)\n                ]}\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <Tooltip \n                formatter={(value) => [`$${value.toFixed(2)}`, 'Price']}\n              />\n              <Legend />\n              <Bar dataKey=\"price\" fill={mainColor} />\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'line':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart\n              data={historicalData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis \n                domain={['auto', 'auto']}\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <Tooltip \n                formatter={(value) => [`$${value.toFixed(2)}`, 'Price']} \n                labelFormatter={(label) => `Date: ${label}`}\n              />\n              <Legend />\n              <Line \n                type=\"monotone\" \n                dataKey=\"price\" \n                stroke={mainColor} \n                strokeWidth={2}\n                dot={{ r: 0 }}\n                activeDot={{ r: 6 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'volume':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <ComposedChart\n              data={historicalData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis \n                yAxisId=\"left\"\n                orientation=\"left\"\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <YAxis \n                yAxisId=\"right\"\n                orientation=\"right\"\n                domain={['auto', 'auto']}\n                tickFormatter={(value) => `${(value/1000000).toFixed(1)}M`}\n              />\n              <Tooltip \n                formatter={(value, name) => {\n                  return name === 'price' \n                    ? [`$${value.toFixed(2)}`, 'Price'] \n                    : [`${(value/1000000).toFixed(1)}M`, 'Volume'];\n                }}\n              />\n              <Legend />\n              <Line \n                yAxisId=\"left\"\n                type=\"monotone\" \n                dataKey=\"price\" \n                stroke={mainColor} \n                strokeWidth={2}\n                dot={false}\n              />\n              <Bar \n                yAxisId=\"right\"\n                dataKey=\"volume\" \n                fill=\"#8884d8\" \n                opacity={0.5} \n              />\n            </ComposedChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'comparison':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={comparisonData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis \n                tickFormatter={(value) => `${value}%`}\n                domain={[\n                  dataMin => Math.min(dataMin, -2),\n                  dataMax => Math.max(dataMax, 2)\n                ]}\n              />\n              <Tooltip \n                formatter={(value) => [`${value}%`, 'Performance']}\n              />\n              <Legend />\n              <Bar dataKey=\"performance\" fill=\"#8884d8\">\n                {\n                  comparisonData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))\n                }\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      \n      default:\n        return (\n          <div>Please select a chart type</div>\n        );\n    }\n  };\n\n  // Function to generate price levels data\n  const generatePriceLevelsData = useCallback(() => {\n    if (!stockData) return null;\n\n    const open = parseFloat(stockData?.['02. open'] || 0);\n    const high = parseFloat(stockData?.['03. high'] || 0);\n    const low = parseFloat(stockData?.['04. low'] || 0);\n    const price = parseFloat(stockData?.['05. price'] || 0);\n    const previousClose = parseFloat(stockData?.['08. previous close'] || 0);\n\n    return [\n      {\n        name: 'Previous Close',\n        value: previousClose,\n        fill: '#8884d8'\n      },\n      {\n        name: 'Open',\n        value: open,\n        fill: '#82ca9d'\n      },\n      {\n        name: 'Low',\n        value: low,\n        fill: '#ff8042'\n      },\n      {\n        name: 'Price',\n        value: price,\n        fill: '#ffc658'\n      },\n      {\n        name: 'High',\n        value: high,\n        fill: '#0088FE'\n      }\n    ];\n  }, [stockData]);\n\n  // Function to prepare candlestick data for enhanced price levels graph\n  const prepareCandlestickData = useCallback(() => {\n    if (!historicalData || !historicalData.length) return [];\n    \n    // Get the last 10 trading days for the candlestick chart\n    return historicalData.slice(0, 10).map(item => ({\n      date: item.date,\n      open: parseFloat(item.open),\n      high: parseFloat(item.high),\n      low: parseFloat(item.low),\n      close: parseFloat(item.price),\n      volume: parseFloat(item.volume)\n    }));\n  }, [historicalData]);\n\n  // Enhanced rendering of the price levels chart\n  const renderPriceLevelsChart = () => {\n    const priceLevelsData = generatePriceLevelsData();\n    const candlestickData = prepareCandlestickData();\n    \n    if (!priceLevelsData || !candlestickData.length) {\n      return <div>No data available for price levels</div>;\n    }\n\n    return (\n      <div className=\"chart-container\">\n        <h3>Price Levels</h3>\n        <div className=\"price-levels-container\">\n          <div className=\"candlestick-chart\">\n            <h4>Last 10 Trading Days</h4>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <ComposedChart data={candlestickData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis domain={['auto', 'auto']} />\n                <Tooltip \n                  formatter={(value, name) => [parseFloat(value).toFixed(2), name]}\n                  labelFormatter={(value) => `Date: ${value}`}\n                />\n                <Legend />\n                <Bar \n                  dataKey=\"volume\" \n                  fill=\"#8884d8\" \n                  opacity={0.3} \n                  yAxisId=\"volume\" \n                  name=\"Volume\" \n                  barSize={20} \n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"close\" \n                  stroke=\"#ff7300\" \n                  name=\"Close Price\" \n                  dot={{ r: 5 }} \n                  activeDot={{ r: 8 }} \n                />\n                <ReferenceLine \n                  y={parseFloat(stockData?.['05. price'] || 0)} \n                  stroke=\"red\" \n                  strokeDasharray=\"3 3\" \n                  label=\"Current\" \n                />\n              </ComposedChart>\n            </ResponsiveContainer>\n          </div>\n          \n          <div className=\"price-summary\">\n            <h4>Today's Price Summary</h4>\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <BarChart \n                data={priceLevelsData} \n                layout=\"vertical\"\n                margin={{ top: 5, right: 30, left: 50, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis type=\"number\" domain={['dataMin - 5', 'dataMax + 5']} />\n                <YAxis type=\"category\" dataKey=\"name\" />\n                <Tooltip formatter={(value) => [`$${parseFloat(value).toFixed(2)}`, 'Price']} />\n                <Legend />\n                <Bar dataKey=\"value\" fill=\"#8884d8\" name=\"Price Level\" />\n                <ReferenceLine \n                  x={parseFloat(stockData?.['05. price'] || 0)} \n                  stroke=\"red\" \n                  strokeDasharray=\"3 3\" \n                  label=\"Current\" \n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Render daily chart\n  const renderDailyChart = () => {\n    if (!historicalData || !historicalData.length) {\n      return <div>No historical data available</div>;\n    }\n\n    return (\n      <div className=\"chart-container\">\n        <h3>Daily Price Chart</h3>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <LineChart\n            data={historicalData}\n            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis \n              domain={['auto', 'auto']}\n              tickFormatter={(value) => `$${value.toFixed(2)}`}\n            />\n            <Tooltip \n              formatter={(value) => [`$${value.toFixed(2)}`, 'Price']} \n              labelFormatter={(label) => `Date: ${label}`}\n            />\n            <Legend />\n            <Line \n              type=\"monotone\" \n              dataKey=\"price\" \n              stroke={mainColor} \n              strokeWidth={2}\n              dot={{ r: 0 }}\n              activeDot={{ r: 6 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  };\n\n  // Render comparison chart\n  const renderComparisonChart = () => {\n    return (\n      <div className=\"chart-container\">\n        <h3>Performance Comparison</h3>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <BarChart\n            data={comparisonData}\n            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis \n              tickFormatter={(value) => `${value}%`}\n              domain={[\n                dataMin => Math.min(dataMin, -2),\n                dataMax => Math.max(dataMax, 2)\n              ]}\n            />\n            <Tooltip \n              formatter={(value) => [`${value}%`, 'Performance']}\n            />\n            <Legend />\n            <Bar dataKey=\"performance\" fill=\"#8884d8\">\n              {\n                comparisonData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.fill} />\n                ))\n              }\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"stock-chart-container card\">\n      <div className=\"chart-controls\">\n        <div className=\"chart-type-selector\">\n          <button\n            className={chartType === 'price-levels' ? 'active' : ''}\n            onClick={() => setChartType('price-levels')}\n          >\n            Price Levels\n          </button>\n          <button\n            className={chartType === 'daily' ? 'active' : ''}\n            onClick={() => setChartType('daily')}\n          >\n            Daily\n          </button>\n          <button\n            className={chartType === 'comparison' ? 'active' : ''}\n            onClick={() => setChartType('comparison')}\n          >\n            Comparison\n          </button>\n        </div>\n        \n        {chartType === 'daily' && (\n          <div className=\"time-period-selector\">\n            <button\n              className={timePeriod === '1M' ? 'active' : ''}\n              onClick={() => setTimePeriod('1M')}\n            >\n              1M\n            </button>\n            <button\n              className={timePeriod === '3M' ? 'active' : ''}\n              onClick={() => setTimePeriod('3M')}\n            >\n              3M\n            </button>\n            <button\n              className={timePeriod === '6M' ? 'active' : ''}\n              onClick={() => setTimePeriod('6M')}\n            >\n              6M\n            </button>\n            <button\n              className={timePeriod === '1Y' ? 'active' : ''}\n              onClick={() => setTimePeriod('1Y')}\n            >\n              1Y\n            </button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"chart-content\">\n        {isLoading ? (\n          <div className=\"loading\">Loading chart data...</div>\n        ) : error ? (\n          <div className=\"error\">{error}</div>\n        ) : (\n          <div>\n            {chartType === 'price-levels' && renderPriceLevelsChart()}\n            {chartType === 'daily' && renderDailyChart()}\n            {chartType === 'comparison' && renderComparisonChart()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StockChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}