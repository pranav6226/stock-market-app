{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/stock-market-app/src/components/StockComparison.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ComposedChart, Bar } from 'recharts';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockComparison = ({\n  primaryStock = {},\n  API_URLS = []\n}) => {\n  _s();\n  const [comparisonSymbols, setComparisonSymbols] = useState(['MSFT', 'GOOG']);\n  const [comparisonData, setComparisonData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [apiUrlIndex, setApiUrlIndex] = useState(0);\n  const [showInput, setShowInput] = useState(false);\n  const [newSymbol, setNewSymbol] = useState('');\n  const [chartType, setChartType] = useState('price');\n\n  // Colors for different stocks\n  const COLORS = ['#4CAF50',\n  // Primary stock (green)\n  '#2196F3',\n  // Microsoft (blue)\n  '#FF5722',\n  // Google (orange)\n  '#9C27B0',\n  // Purple\n  '#FFEB3B',\n  // Yellow\n  '#607D8B' // Blue Grey\n  ];\n\n  // Fetch data for comparison stocks\n  useEffect(() => {\n    // If we don't have API_URLS, can't proceed\n    if (!API_URLS || API_URLS.length === 0) {\n      setError(\"API URLs not available\");\n      return;\n    }\n    const fetchComparisonData = async () => {\n      // Use a default primary symbol if none provided\n      const primarySymbol = primaryStock && primaryStock['01. symbol'] ? primaryStock['01. symbol'] : 'AAPL';\n      setLoading(true);\n      const newData = {};\n\n      // Add primary stock data if available, otherwise fetch it\n      if (primaryStock && primaryStock['01. symbol']) {\n        newData[primaryStock['01. symbol']] = {\n          price: parseFloat(primaryStock['05. price']),\n          change: parseFloat(primaryStock['09. change']),\n          percentChange: parseFloat(primaryStock['10. change percent'].replace('%', '')),\n          historicalData: generateMockHistoricalData(parseFloat(primaryStock['05. price']))\n        };\n      } else {\n        // Fetch primary stock data if not provided\n        try {\n          const symbol = 'AAPL'; // Default\n          await fetchStockData(symbol, newData);\n        } catch (err) {\n          console.error(`Error fetching data for default stock:`, err);\n        }\n      }\n\n      // Fetch data for each comparison symbol\n      for (const symbol of comparisonSymbols) {\n        if (symbol === primarySymbol) continue;\n        await fetchStockData(symbol, newData);\n      }\n      setComparisonData(newData);\n      setLoading(false);\n    };\n    fetchComparisonData();\n  }, [primaryStock, comparisonSymbols, API_URLS]);\n\n  // Helper function to fetch stock data\n  const fetchStockData = async (symbol, dataObject) => {\n    try {\n      // Try each API URL until one works\n      for (let i = 0; i < API_URLS.length; i++) {\n        try {\n          const response = await axios.get(`${API_URLS[i]}?symbol=${symbol}`, {\n            timeout: 5000\n          });\n          if (response.data && !response.data.error) {\n            setApiUrlIndex(i);\n            dataObject[symbol] = {\n              price: parseFloat(response.data['05. price']),\n              change: parseFloat(response.data['09. change']),\n              percentChange: parseFloat(response.data['10. change percent'].replace('%', '')),\n              historicalData: generateMockHistoricalData(parseFloat(response.data['05. price']))\n            };\n            break; // Exit the loop if successful\n          }\n        } catch (err) {\n          if (i === API_URLS.length - 1) {\n            console.error(`Failed to fetch data for ${symbol}`);\n            // Create mock data if API fails\n            dataObject[symbol] = {\n              price: Math.random() * 200 + 50,\n              change: Math.random() * 10 - 5,\n              percentChange: Math.random() * 5 - 2.5,\n              historicalData: generateMockHistoricalData(Math.random() * 200 + 50)\n            };\n          }\n        }\n      }\n    } catch (err) {\n      console.error(`Error fetching data for ${symbol}:`, err);\n    }\n  };\n\n  // Generate mock historical data for visualization\n  const generateMockHistoricalData = currentPrice => {\n    const data = [];\n    const volatility = 0.02;\n    let price = currentPrice * 0.9; // Start 10% lower\n\n    const today = new Date();\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`;\n      const change = price * volatility * (Math.random() - 0.48); // Slight upward bias\n      price += change;\n      data.push({\n        date: formattedDate,\n        price: parseFloat(price.toFixed(2))\n      });\n    }\n    return data;\n  };\n\n  // Merge historical data for comparison chart\n  const prepareComparisonChartData = () => {\n    var _comparisonData$prima;\n    if (Object.keys(comparisonData).length === 0) return [];\n\n    // Get all dates from the primary stock\n    const primarySymbol = primaryStock['01. symbol'];\n    if (!((_comparisonData$prima = comparisonData[primarySymbol]) !== null && _comparisonData$prima !== void 0 && _comparisonData$prima.historicalData)) return [];\n    const mergedData = {};\n\n    // Process each stock's data\n    Object.keys(comparisonData).forEach(symbol => {\n      var _comparisonData$symbo;\n      if (!((_comparisonData$symbo = comparisonData[symbol]) !== null && _comparisonData$symbo !== void 0 && _comparisonData$symbo.historicalData)) return;\n      comparisonData[symbol].historicalData.forEach(dataPoint => {\n        if (!mergedData[dataPoint.date]) {\n          mergedData[dataPoint.date] = {\n            date: dataPoint.date\n          };\n        }\n        mergedData[dataPoint.date][symbol] = dataPoint.price;\n      });\n    });\n\n    // Convert to array and sort by date\n    return Object.values(mergedData).sort((a, b) => {\n      const dateA = new Date(a.date.split('/')[0], a.date.split('/')[1]);\n      const dateB = new Date(b.date.split('/')[0], b.date.split('/')[1]);\n      return dateA - dateB;\n    });\n  };\n\n  // Add a new stock to compare\n  const handleAddSymbol = () => {\n    if (!newSymbol || comparisonSymbols.includes(newSymbol)) {\n      setShowInput(false);\n      setNewSymbol('');\n      return;\n    }\n    setComparisonSymbols([...comparisonSymbols, newSymbol.toUpperCase()]);\n    setShowInput(false);\n    setNewSymbol('');\n  };\n\n  // Remove a stock from comparison\n  const handleRemoveSymbol = symbol => {\n    setComparisonSymbols(comparisonSymbols.filter(s => s !== symbol));\n  };\n\n  // Prepare performance comparison data\n  const preparePerformanceData = () => {\n    const performanceData = [];\n    Object.keys(comparisonData).forEach((symbol, index) => {\n      if (comparisonData[symbol]) {\n        performanceData.push({\n          name: symbol,\n          value: comparisonData[symbol].percentChange,\n          color: COLORS[index % COLORS.length],\n          price: comparisonData[symbol].price\n        });\n      }\n    });\n    return performanceData;\n  };\n  const comparisonChartData = prepareComparisonChartData();\n  const performanceData = preparePerformanceData();\n\n  // Render price comparison chart\n  const renderPriceChart = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 350,\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: comparisonChartData,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        tickFormatter: value => `$${value}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        formatter: value => [`$${value.toFixed(2)}`, ''],\n        labelFormatter: label => `Date: ${label}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), Object.keys(comparisonData).map((symbol, index) => /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: symbol,\n        stroke: COLORS[index % COLORS.length],\n        activeDot: {\n          r: 8\n        },\n        name: symbol\n      }, symbol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n\n  // Render performance comparison chart\n  const renderPerformanceChart = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 350,\n    children: /*#__PURE__*/_jsxDEV(ComposedChart, {\n      layout: \"vertical\",\n      data: performanceData,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 70,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        type: \"number\",\n        tickFormatter: value => `${value.toFixed(2)}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        dataKey: \"name\",\n        type: \"category\",\n        width: 60\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        formatter: (value, name, props) => {\n          if (name === 'value') return [`${value.toFixed(2)}%`, 'Change'];\n          return [value, name];\n        },\n        labelFormatter: value => `${value}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"value\",\n        fill: \"#8884d8\",\n        barSize: 20,\n        children: performanceData.map((entry, index) => /*#__PURE__*/_jsxDEV(Bar, {\n          fill: entry.color\n        }, `cell-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card stock-comparison\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comparison-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Stock Comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-type-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'price' ? 'active' : '',\n          onClick: () => setChartType('price'),\n          children: \"Price History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'performance' ? 'active' : '',\n          onClick: () => setChartType('performance'),\n          children: \"Performance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comparison-symbols\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Comparing: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"symbol-tags\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"symbol-tag primary\",\n          children: primaryStock['01. symbol']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), comparisonSymbols.map(symbol => symbol !== primaryStock['01. symbol'] && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"symbol-tag\",\n          children: [symbol, /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-symbol\",\n            onClick: () => handleRemoveSymbol(symbol),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 17\n          }, this)]\n        }, symbol, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 15\n        }, this)), !showInput && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-symbol-btn\",\n          onClick: () => setShowInput(true),\n          children: \"+ Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), showInput && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-symbol-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newSymbol,\n            onChange: e => setNewSymbol(e.target.value),\n            placeholder: \"Symbol\",\n            maxLength: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddSymbol,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowInput(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-comparison\",\n      children: \"Loading comparison data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comparison-chart\",\n      children: chartType === 'price' ? renderPriceChart() : renderPerformanceChart()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n};\n_s(StockComparison, \"ul2cl2MwOPAF6r8Looba6XgiLts=\");\n_c = StockComparison;\nexport default StockComparison;\nvar _c;\n$RefreshReg$(_c, \"StockComparison\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","ComposedChart","Bar","axios","jsxDEV","_jsxDEV","StockComparison","primaryStock","API_URLS","_s","comparisonSymbols","setComparisonSymbols","comparisonData","setComparisonData","loading","setLoading","error","setError","apiUrlIndex","setApiUrlIndex","showInput","setShowInput","newSymbol","setNewSymbol","chartType","setChartType","COLORS","length","fetchComparisonData","primarySymbol","newData","price","parseFloat","change","percentChange","replace","historicalData","generateMockHistoricalData","symbol","fetchStockData","err","console","dataObject","i","response","get","timeout","data","Math","random","currentPrice","volatility","today","Date","date","setDate","getDate","formattedDate","getMonth","push","toFixed","prepareComparisonChartData","_comparisonData$prima","Object","keys","mergedData","forEach","_comparisonData$symbo","dataPoint","values","sort","a","b","dateA","split","dateB","handleAddSymbol","includes","toUpperCase","handleRemoveSymbol","filter","s","preparePerformanceData","performanceData","index","name","value","color","comparisonChartData","renderPriceChart","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","tickFormatter","formatter","labelFormatter","label","map","type","stroke","activeDot","r","renderPerformanceChart","layout","props","fill","barSize","entry","className","onClick","onChange","e","target","placeholder","maxLength","_c","$RefreshReg$"],"sources":["/Users/pranav/stock-market-app/src/components/StockComparison.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  LineChart, Line, XAxis, YAxis, CartesianGrid, \n  Tooltip, Legend, ResponsiveContainer, ComposedChart, Bar\n} from 'recharts';\nimport axios from 'axios';\n\nconst StockComparison = ({ primaryStock = {}, API_URLS = [] }) => {\n  const [comparisonSymbols, setComparisonSymbols] = useState(['MSFT', 'GOOG']);\n  const [comparisonData, setComparisonData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [apiUrlIndex, setApiUrlIndex] = useState(0);\n  const [showInput, setShowInput] = useState(false);\n  const [newSymbol, setNewSymbol] = useState('');\n  const [chartType, setChartType] = useState('price');\n\n  // Colors for different stocks\n  const COLORS = [\n    '#4CAF50', // Primary stock (green)\n    '#2196F3', // Microsoft (blue)\n    '#FF5722', // Google (orange)\n    '#9C27B0', // Purple\n    '#FFEB3B', // Yellow\n    '#607D8B'  // Blue Grey\n  ];\n\n  // Fetch data for comparison stocks\n  useEffect(() => {\n    // If we don't have API_URLS, can't proceed\n    if (!API_URLS || API_URLS.length === 0) {\n      setError(\"API URLs not available\");\n      return;\n    }\n    \n    const fetchComparisonData = async () => {\n      // Use a default primary symbol if none provided\n      const primarySymbol = primaryStock && primaryStock['01. symbol'] \n        ? primaryStock['01. symbol'] \n        : 'AAPL';\n      \n      setLoading(true);\n      const newData = {};\n      \n      // Add primary stock data if available, otherwise fetch it\n      if (primaryStock && primaryStock['01. symbol']) {\n        newData[primaryStock['01. symbol']] = {\n          price: parseFloat(primaryStock['05. price']),\n          change: parseFloat(primaryStock['09. change']),\n          percentChange: parseFloat(primaryStock['10. change percent'].replace('%', '')),\n          historicalData: generateMockHistoricalData(parseFloat(primaryStock['05. price']))\n        };\n      } else {\n        // Fetch primary stock data if not provided\n        try {\n          const symbol = 'AAPL'; // Default\n          await fetchStockData(symbol, newData);\n        } catch (err) {\n          console.error(`Error fetching data for default stock:`, err);\n        }\n      }\n      \n      // Fetch data for each comparison symbol\n      for (const symbol of comparisonSymbols) {\n        if (symbol === primarySymbol) continue;\n        \n        await fetchStockData(symbol, newData);\n      }\n      \n      setComparisonData(newData);\n      setLoading(false);\n    };\n    \n    fetchComparisonData();\n  }, [primaryStock, comparisonSymbols, API_URLS]);\n  \n  // Helper function to fetch stock data\n  const fetchStockData = async (symbol, dataObject) => {\n    try {\n      // Try each API URL until one works\n      for (let i = 0; i < API_URLS.length; i++) {\n        try {\n          const response = await axios.get(\n            `${API_URLS[i]}?symbol=${symbol}`,\n            { timeout: 5000 }\n          );\n          \n          if (response.data && !response.data.error) {\n            setApiUrlIndex(i);\n            \n            dataObject[symbol] = {\n              price: parseFloat(response.data['05. price']),\n              change: parseFloat(response.data['09. change']),\n              percentChange: parseFloat(response.data['10. change percent'].replace('%', '')),\n              historicalData: generateMockHistoricalData(parseFloat(response.data['05. price']))\n            };\n            \n            break; // Exit the loop if successful\n          }\n        } catch (err) {\n          if (i === API_URLS.length - 1) {\n            console.error(`Failed to fetch data for ${symbol}`);\n            // Create mock data if API fails\n            dataObject[symbol] = {\n              price: Math.random() * 200 + 50,\n              change: (Math.random() * 10) - 5,\n              percentChange: (Math.random() * 5) - 2.5,\n              historicalData: generateMockHistoricalData(Math.random() * 200 + 50)\n            };\n          }\n        }\n      }\n    } catch (err) {\n      console.error(`Error fetching data for ${symbol}:`, err);\n    }\n  };\n\n  // Generate mock historical data for visualization\n  const generateMockHistoricalData = (currentPrice) => {\n    const data = [];\n    const volatility = 0.02;\n    let price = currentPrice * 0.9; // Start 10% lower\n    \n    const today = new Date();\n    \n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`;\n      \n      const change = price * volatility * (Math.random() - 0.48); // Slight upward bias\n      price += change;\n      \n      data.push({\n        date: formattedDate,\n        price: parseFloat(price.toFixed(2))\n      });\n    }\n    \n    return data;\n  };\n\n  // Merge historical data for comparison chart\n  const prepareComparisonChartData = () => {\n    if (Object.keys(comparisonData).length === 0) return [];\n    \n    // Get all dates from the primary stock\n    const primarySymbol = primaryStock['01. symbol'];\n    if (!comparisonData[primarySymbol]?.historicalData) return [];\n    \n    const mergedData = {};\n    \n    // Process each stock's data\n    Object.keys(comparisonData).forEach(symbol => {\n      if (!comparisonData[symbol]?.historicalData) return;\n      \n      comparisonData[symbol].historicalData.forEach(dataPoint => {\n        if (!mergedData[dataPoint.date]) {\n          mergedData[dataPoint.date] = { date: dataPoint.date };\n        }\n        mergedData[dataPoint.date][symbol] = dataPoint.price;\n      });\n    });\n    \n    // Convert to array and sort by date\n    return Object.values(mergedData).sort((a, b) => {\n      const dateA = new Date(a.date.split('/')[0], a.date.split('/')[1]);\n      const dateB = new Date(b.date.split('/')[0], b.date.split('/')[1]);\n      return dateA - dateB;\n    });\n  };\n\n  // Add a new stock to compare\n  const handleAddSymbol = () => {\n    if (!newSymbol || comparisonSymbols.includes(newSymbol)) {\n      setShowInput(false);\n      setNewSymbol('');\n      return;\n    }\n    \n    setComparisonSymbols([...comparisonSymbols, newSymbol.toUpperCase()]);\n    setShowInput(false);\n    setNewSymbol('');\n  };\n\n  // Remove a stock from comparison\n  const handleRemoveSymbol = (symbol) => {\n    setComparisonSymbols(comparisonSymbols.filter(s => s !== symbol));\n  };\n\n  // Prepare performance comparison data\n  const preparePerformanceData = () => {\n    const performanceData = [];\n    \n    Object.keys(comparisonData).forEach((symbol, index) => {\n      if (comparisonData[symbol]) {\n        performanceData.push({\n          name: symbol,\n          value: comparisonData[symbol].percentChange,\n          color: COLORS[index % COLORS.length],\n          price: comparisonData[symbol].price\n        });\n      }\n    });\n    \n    return performanceData;\n  };\n\n  const comparisonChartData = prepareComparisonChartData();\n  const performanceData = preparePerformanceData();\n\n  // Render price comparison chart\n  const renderPriceChart = () => (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <LineChart\n        data={comparisonChartData}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" />\n        <YAxis tickFormatter={(value) => `$${value}`} />\n        <Tooltip \n          formatter={(value) => [`$${value.toFixed(2)}`, '']}\n          labelFormatter={(label) => `Date: ${label}`}\n        />\n        <Legend />\n        {Object.keys(comparisonData).map((symbol, index) => (\n          <Line\n            key={symbol}\n            type=\"monotone\"\n            dataKey={symbol}\n            stroke={COLORS[index % COLORS.length]}\n            activeDot={{ r: 8 }}\n            name={symbol}\n          />\n        ))}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n\n  // Render performance comparison chart\n  const renderPerformanceChart = () => (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <ComposedChart\n        layout=\"vertical\"\n        data={performanceData}\n        margin={{ top: 20, right: 30, left: 70, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis \n          type=\"number\" \n          tickFormatter={(value) => `${value.toFixed(2)}%`} \n        />\n        <YAxis \n          dataKey=\"name\" \n          type=\"category\" \n          width={60} \n        />\n        <Tooltip \n          formatter={(value, name, props) => {\n            if (name === 'value') return [`${value.toFixed(2)}%`, 'Change'];\n            return [value, name];\n          }}\n          labelFormatter={(value) => `${value}`}\n        />\n        <Bar \n          dataKey=\"value\" \n          fill=\"#8884d8\" \n          barSize={20}\n        >\n          {performanceData.map((entry, index) => (\n            <Bar key={`cell-${index}`} fill={entry.color} />\n          ))}\n        </Bar>\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n\n  return (\n    <div className=\"card stock-comparison\">\n      <div className=\"comparison-header\">\n        <h2>Stock Comparison</h2>\n        <div className=\"chart-type-selector\">\n          <button \n            className={chartType === 'price' ? 'active' : ''} \n            onClick={() => setChartType('price')}\n          >\n            Price History\n          </button>\n          <button \n            className={chartType === 'performance' ? 'active' : ''} \n            onClick={() => setChartType('performance')}\n          >\n            Performance\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"comparison-symbols\">\n        <p>Comparing: </p>\n        <div className=\"symbol-tags\">\n          <span className=\"symbol-tag primary\">{primaryStock['01. symbol']}</span>\n          {comparisonSymbols.map(symbol => (\n            symbol !== primaryStock['01. symbol'] && (\n              <span key={symbol} className=\"symbol-tag\">\n                {symbol}\n                <button \n                  className=\"remove-symbol\" \n                  onClick={() => handleRemoveSymbol(symbol)}\n                >\n                  ×\n                </button>\n              </span>\n            )\n          ))}\n          \n          {!showInput && (\n            <button \n              className=\"add-symbol-btn\" \n              onClick={() => setShowInput(true)}\n            >\n              + Add\n            </button>\n          )}\n          \n          {showInput && (\n            <div className=\"add-symbol-input\">\n              <input\n                type=\"text\"\n                value={newSymbol}\n                onChange={(e) => setNewSymbol(e.target.value)}\n                placeholder=\"Symbol\"\n                maxLength={5}\n              />\n              <button onClick={handleAddSymbol}>Add</button>\n              <button onClick={() => setShowInput(false)}>Cancel</button>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {loading ? (\n        <div className=\"loading-comparison\">Loading comparison data...</div>\n      ) : (\n        <div className=\"comparison-chart\">\n          {chartType === 'price' ? renderPriceChart() : renderPerformanceChart()}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StockComparison; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}