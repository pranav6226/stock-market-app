{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/stock-market-app/src/components/StockComparison.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ComposedChart, Bar } from 'recharts';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockComparison = ({\n  primaryStock = {},\n  API_URLS = []\n}) => {\n  _s();\n  const [comparisonSymbols, setComparisonSymbols] = useState(['MSFT', 'GOOG']);\n  const [comparisonData, setComparisonData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [apiUrlIndex, setApiUrlIndex] = useState(0);\n  const [showInput, setShowInput] = useState(false);\n  const [newSymbol, setNewSymbol] = useState('');\n  const [chartType, setChartType] = useState('price');\n  const [dataLoaded, setDataLoaded] = useState(false);\n\n  // Colors for different stocks\n  const COLORS = ['#4CAF50',\n  // Primary stock (green)\n  '#2196F3',\n  // Microsoft (blue)\n  '#FF5722',\n  // Google (orange)\n  '#9C27B0',\n  // Purple\n  '#FFEB3B',\n  // Yellow\n  '#607D8B' // Blue Grey\n  ];\n\n  // Fetch data for comparison stocks\n  useEffect(() => {\n    // If we don't have API_URLS, can't proceed\n    if (!API_URLS || API_URLS.length === 0) {\n      setError(\"API URLs not available\");\n      return;\n    }\n\n    // Prevent re-fetching if data is already loaded\n    if (dataLoaded && Object.keys(comparisonData).length > 0) {\n      return;\n    }\n    const fetchComparisonData = async () => {\n      // Use a default primary symbol if none provided\n      const primarySymbol = primaryStock && primaryStock['01. symbol'] ? primaryStock['01. symbol'] : 'AAPL';\n      setLoading(true);\n      const newData = {};\n\n      // Add primary stock data if available, otherwise fetch it\n      if (primaryStock && primaryStock['01. symbol']) {\n        newData[primaryStock['01. symbol']] = {\n          price: parseFloat(primaryStock['05. price']),\n          change: parseFloat(primaryStock['09. change']),\n          percentChange: parseFloat(primaryStock['10. change percent'].replace('%', '')),\n          historicalData: generateMockHistoricalData(parseFloat(primaryStock['05. price']))\n        };\n      } else {\n        // Fetch primary stock data if not provided\n        try {\n          const symbol = 'AAPL'; // Default\n          await fetchStockData(symbol, newData);\n        } catch (err) {\n          console.error(`Error fetching data for default stock:`, err);\n        }\n      }\n\n      // Fetch data for each comparison symbol\n      for (const symbol of comparisonSymbols) {\n        if (symbol === primarySymbol) continue;\n        await fetchStockData(symbol, newData);\n      }\n      setComparisonData(newData);\n      setLoading(false);\n      setDataLoaded(true); // Mark data as loaded after successful fetch\n    };\n    fetchComparisonData();\n  }, [primaryStock, comparisonSymbols, API_URLS, dataLoaded]);\n\n  // Helper function to fetch stock data\n  const fetchStockData = async (symbol, dataObject) => {\n    try {\n      // Try each API URL until one works\n      for (let i = 0; i < API_URLS.length; i++) {\n        try {\n          const response = await axios.get(`${API_URLS[i]}?symbol=${symbol}`, {\n            timeout: 5000\n          });\n          if (response.data && !response.data.error) {\n            setApiUrlIndex(i);\n            dataObject[symbol] = {\n              price: parseFloat(response.data['05. price']),\n              change: parseFloat(response.data['09. change']),\n              percentChange: parseFloat(response.data['10. change percent'].replace('%', '')),\n              historicalData: generateMockHistoricalData(parseFloat(response.data['05. price']))\n            };\n            break; // Exit the loop if successful\n          }\n        } catch (err) {\n          if (i === API_URLS.length - 1) {\n            console.error(`Failed to fetch data for ${symbol}`);\n            // Create mock data if API fails\n            dataObject[symbol] = {\n              price: Math.random() * 200 + 50,\n              change: Math.random() * 10 - 5,\n              percentChange: Math.random() * 5 - 2.5,\n              historicalData: generateMockHistoricalData(Math.random() * 200 + 50)\n            };\n          }\n        }\n      }\n    } catch (err) {\n      console.error(`Error fetching data for ${symbol}:`, err);\n    }\n  };\n\n  // Generate mock historical data for visualization\n  const generateMockHistoricalData = currentPrice => {\n    const data = [];\n    const volatility = 0.02;\n    let price = currentPrice * 0.9; // Start 10% lower\n\n    const today = new Date();\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`;\n      const change = price * volatility * (Math.random() - 0.48); // Slight upward bias\n      price += change;\n      data.push({\n        date: formattedDate,\n        price: parseFloat(price.toFixed(2))\n      });\n    }\n    return data;\n  };\n\n  // Merge historical data for comparison chart\n  const prepareComparisonChartData = () => {\n    var _comparisonData$first;\n    if (Object.keys(comparisonData).length === 0) return [];\n\n    // Get all dates from the first stock (any stock)\n    const firstSymbol = Object.keys(comparisonData)[0];\n    if (!((_comparisonData$first = comparisonData[firstSymbol]) !== null && _comparisonData$first !== void 0 && _comparisonData$first.historicalData)) return [];\n    const mergedData = {};\n\n    // Process each stock's data\n    Object.keys(comparisonData).forEach(symbol => {\n      var _comparisonData$symbo;\n      if (!((_comparisonData$symbo = comparisonData[symbol]) !== null && _comparisonData$symbo !== void 0 && _comparisonData$symbo.historicalData)) return;\n      comparisonData[symbol].historicalData.forEach(dataPoint => {\n        if (!mergedData[dataPoint.date]) {\n          mergedData[dataPoint.date] = {\n            date: dataPoint.date\n          };\n        }\n        mergedData[dataPoint.date][symbol] = dataPoint.price;\n      });\n    });\n\n    // Convert to array and sort by date\n    return Object.values(mergedData).sort((a, b) => {\n      const dateA = new Date(a.date.split('/')[0], a.date.split('/')[1]);\n      const dateB = new Date(b.date.split('/')[0], b.date.split('/')[1]);\n      return dateA - dateB;\n    });\n  };\n\n  // Add a new stock to compare\n  const handleAddSymbol = () => {\n    if (!newSymbol || comparisonSymbols.includes(newSymbol)) {\n      setShowInput(false);\n      setNewSymbol('');\n      return;\n    }\n    setComparisonSymbols([...comparisonSymbols, newSymbol.toUpperCase()]);\n    setShowInput(false);\n    setNewSymbol('');\n  };\n\n  // Remove a stock from comparison\n  const handleRemoveSymbol = symbol => {\n    setComparisonSymbols(comparisonSymbols.filter(s => s !== symbol));\n  };\n\n  // Prepare performance comparison data\n  const preparePerformanceData = () => {\n    const performanceData = [];\n    Object.keys(comparisonData).forEach((symbol, index) => {\n      if (comparisonData[symbol]) {\n        performanceData.push({\n          name: symbol,\n          value: comparisonData[symbol].percentChange,\n          color: COLORS[index % COLORS.length],\n          price: comparisonData[symbol].price\n        });\n      }\n    });\n    return performanceData;\n  };\n  const comparisonChartData = prepareComparisonChartData();\n  const performanceData = preparePerformanceData();\n\n  // Render price comparison chart\n  const renderPriceChart = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 350,\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: comparisonChartData,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        tickFormatter: value => {\n          // Format large numbers with K/M suffixes\n          if (value >= 1000 && value < 1000000) {\n            return `$${(value / 1000).toFixed(1)}K`;\n          } else if (value >= 1000000) {\n            return `$${(value / 1000000).toFixed(1)}M`;\n          }\n          return `$${value.toFixed(2)}`;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        formatter: value => {\n          // Format the value with commas for thousands\n          return [`$${parseFloat(value).toLocaleString(undefined, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n          })}`, ''];\n        },\n        labelFormatter: label => `Date: ${label}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), Object.keys(comparisonData).map((symbol, index) => /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: symbol,\n        stroke: COLORS[index % COLORS.length],\n        activeDot: {\n          r: 8\n        },\n        name: symbol\n      }, symbol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n\n  // Render performance comparison chart\n  const renderPerformanceChart = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 350,\n    children: /*#__PURE__*/_jsxDEV(ComposedChart, {\n      layout: \"vertical\",\n      data: performanceData,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 70,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        type: \"number\",\n        tickFormatter: value => `${value.toFixed(2)}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        dataKey: \"name\",\n        type: \"category\",\n        width: 60\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        formatter: (value, name, props) => {\n          if (name === 'value') return [`${value.toFixed(2)}%`, 'Change'];\n          return [value, name];\n        },\n        labelFormatter: value => `${value}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"value\",\n        fill: \"#8884d8\",\n        barSize: 20,\n        children: performanceData.map((entry, index) => /*#__PURE__*/_jsxDEV(Bar, {\n          fill: entry.color\n        }, `cell-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card stock-comparison\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comparison-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Stock Comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-type-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'price' ? 'active' : '',\n          onClick: () => setChartType('price'),\n          children: \"Price History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'performance' ? 'active' : '',\n          onClick: () => setChartType('performance'),\n          children: \"Performance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comparison-symbols\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Comparing: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"symbol-tags\",\n        children: [primaryStock && primaryStock['01. symbol'] && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"symbol-tag primary\",\n          children: primaryStock['01. symbol']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }, this), comparisonSymbols.map(symbol => primaryStock && symbol !== primaryStock['01. symbol'] && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"symbol-tag\",\n          children: [symbol, /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-symbol\",\n            onClick: () => handleRemoveSymbol(symbol),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 17\n          }, this)]\n        }, symbol, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 15\n        }, this)), !showInput && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-symbol-btn\",\n          onClick: () => setShowInput(true),\n          children: \"+ Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 13\n        }, this), showInput && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-symbol-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newSymbol,\n            onChange: e => setNewSymbol(e.target.value),\n            placeholder: \"Symbol\",\n            maxLength: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddSymbol,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowInput(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-comparison\",\n      children: \"Loading comparison data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comparison-chart\",\n      children: chartType === 'price' ? renderPriceChart() : renderPerformanceChart()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n};\n_s(StockComparison, \"fFNVSUjRXSlfA/oMnM5VSH9D1kY=\");\n_c = StockComparison;\nexport default StockComparison;\nvar _c;\n$RefreshReg$(_c, \"StockComparison\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","ComposedChart","Bar","axios","jsxDEV","_jsxDEV","StockComparison","primaryStock","API_URLS","_s","comparisonSymbols","setComparisonSymbols","comparisonData","setComparisonData","loading","setLoading","error","setError","apiUrlIndex","setApiUrlIndex","showInput","setShowInput","newSymbol","setNewSymbol","chartType","setChartType","dataLoaded","setDataLoaded","COLORS","length","Object","keys","fetchComparisonData","primarySymbol","newData","price","parseFloat","change","percentChange","replace","historicalData","generateMockHistoricalData","symbol","fetchStockData","err","console","dataObject","i","response","get","timeout","data","Math","random","currentPrice","volatility","today","Date","date","setDate","getDate","formattedDate","getMonth","push","toFixed","prepareComparisonChartData","_comparisonData$first","firstSymbol","mergedData","forEach","_comparisonData$symbo","dataPoint","values","sort","a","b","dateA","split","dateB","handleAddSymbol","includes","toUpperCase","handleRemoveSymbol","filter","s","preparePerformanceData","performanceData","index","name","value","color","comparisonChartData","renderPriceChart","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","tickFormatter","formatter","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","labelFormatter","label","map","type","stroke","activeDot","r","renderPerformanceChart","layout","props","fill","barSize","entry","className","onClick","onChange","e","target","placeholder","maxLength","_c","$RefreshReg$"],"sources":["/Users/pranav/stock-market-app/src/components/StockComparison.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  LineChart, Line, XAxis, YAxis, CartesianGrid, \n  Tooltip, Legend, ResponsiveContainer, ComposedChart, Bar\n} from 'recharts';\nimport axios from 'axios';\n\nconst StockComparison = ({ primaryStock = {}, API_URLS = [] }) => {\n  const [comparisonSymbols, setComparisonSymbols] = useState(['MSFT', 'GOOG']);\n  const [comparisonData, setComparisonData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [apiUrlIndex, setApiUrlIndex] = useState(0);\n  const [showInput, setShowInput] = useState(false);\n  const [newSymbol, setNewSymbol] = useState('');\n  const [chartType, setChartType] = useState('price');\n  const [dataLoaded, setDataLoaded] = useState(false);\n\n  // Colors for different stocks\n  const COLORS = [\n    '#4CAF50', // Primary stock (green)\n    '#2196F3', // Microsoft (blue)\n    '#FF5722', // Google (orange)\n    '#9C27B0', // Purple\n    '#FFEB3B', // Yellow\n    '#607D8B'  // Blue Grey\n  ];\n\n  // Fetch data for comparison stocks\n  useEffect(() => {\n    // If we don't have API_URLS, can't proceed\n    if (!API_URLS || API_URLS.length === 0) {\n      setError(\"API URLs not available\");\n      return;\n    }\n    \n    // Prevent re-fetching if data is already loaded\n    if (dataLoaded && Object.keys(comparisonData).length > 0) {\n      return;\n    }\n    \n    const fetchComparisonData = async () => {\n      // Use a default primary symbol if none provided\n      const primarySymbol = primaryStock && primaryStock['01. symbol'] \n        ? primaryStock['01. symbol'] \n        : 'AAPL';\n      \n      setLoading(true);\n      const newData = {};\n      \n      // Add primary stock data if available, otherwise fetch it\n      if (primaryStock && primaryStock['01. symbol']) {\n        newData[primaryStock['01. symbol']] = {\n          price: parseFloat(primaryStock['05. price']),\n          change: parseFloat(primaryStock['09. change']),\n          percentChange: parseFloat(primaryStock['10. change percent'].replace('%', '')),\n          historicalData: generateMockHistoricalData(parseFloat(primaryStock['05. price']))\n        };\n      } else {\n        // Fetch primary stock data if not provided\n        try {\n          const symbol = 'AAPL'; // Default\n          await fetchStockData(symbol, newData);\n        } catch (err) {\n          console.error(`Error fetching data for default stock:`, err);\n        }\n      }\n      \n      // Fetch data for each comparison symbol\n      for (const symbol of comparisonSymbols) {\n        if (symbol === primarySymbol) continue;\n        \n        await fetchStockData(symbol, newData);\n      }\n      \n      setComparisonData(newData);\n      setLoading(false);\n      setDataLoaded(true); // Mark data as loaded after successful fetch\n    };\n    \n    fetchComparisonData();\n  }, [primaryStock, comparisonSymbols, API_URLS, dataLoaded]);\n  \n  // Helper function to fetch stock data\n  const fetchStockData = async (symbol, dataObject) => {\n    try {\n      // Try each API URL until one works\n      for (let i = 0; i < API_URLS.length; i++) {\n        try {\n          const response = await axios.get(\n            `${API_URLS[i]}?symbol=${symbol}`,\n            { timeout: 5000 }\n          );\n          \n          if (response.data && !response.data.error) {\n            setApiUrlIndex(i);\n            \n            dataObject[symbol] = {\n              price: parseFloat(response.data['05. price']),\n              change: parseFloat(response.data['09. change']),\n              percentChange: parseFloat(response.data['10. change percent'].replace('%', '')),\n              historicalData: generateMockHistoricalData(parseFloat(response.data['05. price']))\n            };\n            \n            break; // Exit the loop if successful\n          }\n        } catch (err) {\n          if (i === API_URLS.length - 1) {\n            console.error(`Failed to fetch data for ${symbol}`);\n            // Create mock data if API fails\n            dataObject[symbol] = {\n              price: Math.random() * 200 + 50,\n              change: (Math.random() * 10) - 5,\n              percentChange: (Math.random() * 5) - 2.5,\n              historicalData: generateMockHistoricalData(Math.random() * 200 + 50)\n            };\n          }\n        }\n      }\n    } catch (err) {\n      console.error(`Error fetching data for ${symbol}:`, err);\n    }\n  };\n\n  // Generate mock historical data for visualization\n  const generateMockHistoricalData = (currentPrice) => {\n    const data = [];\n    const volatility = 0.02;\n    let price = currentPrice * 0.9; // Start 10% lower\n    \n    const today = new Date();\n    \n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`;\n      \n      const change = price * volatility * (Math.random() - 0.48); // Slight upward bias\n      price += change;\n      \n      data.push({\n        date: formattedDate,\n        price: parseFloat(price.toFixed(2))\n      });\n    }\n    \n    return data;\n  };\n\n  // Merge historical data for comparison chart\n  const prepareComparisonChartData = () => {\n    if (Object.keys(comparisonData).length === 0) return [];\n    \n    // Get all dates from the first stock (any stock)\n    const firstSymbol = Object.keys(comparisonData)[0];\n    if (!comparisonData[firstSymbol]?.historicalData) return [];\n    \n    const mergedData = {};\n    \n    // Process each stock's data\n    Object.keys(comparisonData).forEach(symbol => {\n      if (!comparisonData[symbol]?.historicalData) return;\n      \n      comparisonData[symbol].historicalData.forEach(dataPoint => {\n        if (!mergedData[dataPoint.date]) {\n          mergedData[dataPoint.date] = { date: dataPoint.date };\n        }\n        mergedData[dataPoint.date][symbol] = dataPoint.price;\n      });\n    });\n    \n    // Convert to array and sort by date\n    return Object.values(mergedData).sort((a, b) => {\n      const dateA = new Date(a.date.split('/')[0], a.date.split('/')[1]);\n      const dateB = new Date(b.date.split('/')[0], b.date.split('/')[1]);\n      return dateA - dateB;\n    });\n  };\n\n  // Add a new stock to compare\n  const handleAddSymbol = () => {\n    if (!newSymbol || comparisonSymbols.includes(newSymbol)) {\n      setShowInput(false);\n      setNewSymbol('');\n      return;\n    }\n    \n    setComparisonSymbols([...comparisonSymbols, newSymbol.toUpperCase()]);\n    setShowInput(false);\n    setNewSymbol('');\n  };\n\n  // Remove a stock from comparison\n  const handleRemoveSymbol = (symbol) => {\n    setComparisonSymbols(comparisonSymbols.filter(s => s !== symbol));\n  };\n\n  // Prepare performance comparison data\n  const preparePerformanceData = () => {\n    const performanceData = [];\n    \n    Object.keys(comparisonData).forEach((symbol, index) => {\n      if (comparisonData[symbol]) {\n        performanceData.push({\n          name: symbol,\n          value: comparisonData[symbol].percentChange,\n          color: COLORS[index % COLORS.length],\n          price: comparisonData[symbol].price\n        });\n      }\n    });\n    \n    return performanceData;\n  };\n\n  const comparisonChartData = prepareComparisonChartData();\n  const performanceData = preparePerformanceData();\n\n  // Render price comparison chart\n  const renderPriceChart = () => (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <LineChart\n        data={comparisonChartData}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" />\n        <YAxis \n          tickFormatter={(value) => {\n            // Format large numbers with K/M suffixes\n            if (value >= 1000 && value < 1000000) {\n              return `$${(value / 1000).toFixed(1)}K`;\n            } else if (value >= 1000000) {\n              return `$${(value / 1000000).toFixed(1)}M`;\n            }\n            return `$${value.toFixed(2)}`;\n          }}\n        />\n        <Tooltip \n          formatter={(value) => {\n            // Format the value with commas for thousands\n            return [`$${parseFloat(value).toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2\n            })}`, ''];\n          }}\n          labelFormatter={(label) => `Date: ${label}`}\n        />\n        <Legend />\n        {Object.keys(comparisonData).map((symbol, index) => (\n          <Line\n            key={symbol}\n            type=\"monotone\"\n            dataKey={symbol}\n            stroke={COLORS[index % COLORS.length]}\n            activeDot={{ r: 8 }}\n            name={symbol}\n          />\n        ))}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n\n  // Render performance comparison chart\n  const renderPerformanceChart = () => (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <ComposedChart\n        layout=\"vertical\"\n        data={performanceData}\n        margin={{ top: 20, right: 30, left: 70, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis \n          type=\"number\" \n          tickFormatter={(value) => `${value.toFixed(2)}%`} \n        />\n        <YAxis \n          dataKey=\"name\" \n          type=\"category\" \n          width={60} \n        />\n        <Tooltip \n          formatter={(value, name, props) => {\n            if (name === 'value') return [`${value.toFixed(2)}%`, 'Change'];\n            return [value, name];\n          }}\n          labelFormatter={(value) => `${value}`}\n        />\n        <Bar \n          dataKey=\"value\" \n          fill=\"#8884d8\" \n          barSize={20}\n        >\n          {performanceData.map((entry, index) => (\n            <Bar key={`cell-${index}`} fill={entry.color} />\n          ))}\n        </Bar>\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n\n  return (\n    <div className=\"card stock-comparison\">\n      <div className=\"comparison-header\">\n        <h2>Stock Comparison</h2>\n        <div className=\"chart-type-selector\">\n          <button \n            className={chartType === 'price' ? 'active' : ''} \n            onClick={() => setChartType('price')}\n          >\n            Price History\n          </button>\n          <button \n            className={chartType === 'performance' ? 'active' : ''} \n            onClick={() => setChartType('performance')}\n          >\n            Performance\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"comparison-symbols\">\n        <p>Comparing: </p>\n        <div className=\"symbol-tags\">\n          {primaryStock && primaryStock['01. symbol'] && (\n            <span className=\"symbol-tag primary\">{primaryStock['01. symbol']}</span>\n          )}\n          {comparisonSymbols.map(symbol => (\n            (primaryStock && symbol !== primaryStock['01. symbol']) && (\n              <span key={symbol} className=\"symbol-tag\">\n                {symbol}\n                <button \n                  className=\"remove-symbol\" \n                  onClick={() => handleRemoveSymbol(symbol)}\n                >\n                  ×\n                </button>\n              </span>\n            )\n          ))}\n          \n          {!showInput && (\n            <button \n              className=\"add-symbol-btn\" \n              onClick={() => setShowInput(true)}\n            >\n              + Add\n            </button>\n          )}\n          \n          {showInput && (\n            <div className=\"add-symbol-input\">\n              <input\n                type=\"text\"\n                value={newSymbol}\n                onChange={(e) => setNewSymbol(e.target.value)}\n                placeholder=\"Symbol\"\n                maxLength={5}\n              />\n              <button onClick={handleAddSymbol}>Add</button>\n              <button onClick={() => setShowInput(false)}>Cancel</button>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {loading ? (\n        <div className=\"loading-comparison\">Loading comparison data...</div>\n      ) : (\n        <div className=\"comparison-chart\">\n          {chartType === 'price' ? renderPriceChart() : renderPerformanceChart()}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StockComparison; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}