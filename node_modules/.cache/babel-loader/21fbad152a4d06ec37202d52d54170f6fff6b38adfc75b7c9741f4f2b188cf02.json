{"ast":null,"code":"import React,{useState,useEffect}from'react';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend,ResponsiveContainer,ComposedChart,Bar}from'recharts';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const StockComparison=_ref=>{let{primaryStock={},API_URLS=[]}=_ref;const[comparisonSymbols,setComparisonSymbols]=useState(['MSFT','GOOG']);const[comparisonData,setComparisonData]=useState({});const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[apiUrlIndex,setApiUrlIndex]=useState(0);const[showInput,setShowInput]=useState(false);const[newSymbol,setNewSymbol]=useState('');const[chartType,setChartType]=useState('price');const[dataLoaded,setDataLoaded]=useState(false);// Colors for different stocks\nconst COLORS=['#4CAF50',// Primary stock (green)\n'#2196F3',// Microsoft (blue)\n'#FF5722',// Google (orange)\n'#9C27B0',// Purple\n'#FFEB3B',// Yellow\n'#607D8B'// Blue Grey\n];// Fetch data for comparison stocks\nuseEffect(()=>{// If we don't have API_URLS, can't proceed\nif(!API_URLS||API_URLS.length===0){setError(\"API URLs not available\");return;}// Prevent re-fetching if data is already loaded\nif(dataLoaded&&Object.keys(comparisonData).length>0){return;}const fetchComparisonData=async()=>{// Use a default primary symbol if none provided\nconst primarySymbol=primaryStock&&primaryStock['01. symbol']?primaryStock['01. symbol']:'AAPL';setLoading(true);const newData={};// Add primary stock data if available, otherwise fetch it\nif(primaryStock&&primaryStock['01. symbol']){newData[primaryStock['01. symbol']]={price:parseFloat(primaryStock['05. price']),change:parseFloat(primaryStock['09. change']),percentChange:parseFloat(primaryStock['10. change percent'].replace('%','')),historicalData:generateMockHistoricalData(parseFloat(primaryStock['05. price']))};}else{// Fetch primary stock data if not provided\ntry{const symbol='AAPL';// Default\nawait fetchStockData(symbol,newData);}catch(err){console.error(`Error fetching data for default stock:`,err);}}// Fetch data for each comparison symbol\nfor(const symbol of comparisonSymbols){if(symbol===primarySymbol)continue;await fetchStockData(symbol,newData);}setComparisonData(newData);setLoading(false);setDataLoaded(true);// Mark data as loaded after successful fetch\n};fetchComparisonData();},[primaryStock,comparisonSymbols,API_URLS,dataLoaded]);// Helper function to fetch stock data\nconst fetchStockData=async(symbol,dataObject)=>{try{// Try each API URL until one works\nfor(let i=0;i<API_URLS.length;i++){try{const response=await axios.get(`${API_URLS[i]}?symbol=${symbol}`,{timeout:5000});if(response.data&&!response.data.error){setApiUrlIndex(i);dataObject[symbol]={price:parseFloat(response.data['05. price']),change:parseFloat(response.data['09. change']),percentChange:parseFloat(response.data['10. change percent'].replace('%','')),historicalData:generateMockHistoricalData(parseFloat(response.data['05. price']))};break;// Exit the loop if successful\n}}catch(err){if(i===API_URLS.length-1){console.error(`Failed to fetch data for ${symbol}`);// Create mock data if API fails\ndataObject[symbol]={price:Math.random()*200+50,change:Math.random()*10-5,percentChange:Math.random()*5-2.5,historicalData:generateMockHistoricalData(Math.random()*200+50)};}}}}catch(err){console.error(`Error fetching data for ${symbol}:`,err);}};// Generate mock historical data for visualization\nconst generateMockHistoricalData=currentPrice=>{const data=[];// For expensive stocks, use smaller volatility to avoid unrealistic swings\nconst volatility=currentPrice>1000?0.005:currentPrice>500?0.008:currentPrice>100?0.01:0.015;// Start with a price that's slightly lower than current for an uptrend\nconst startingPriceRatio=0.94+Math.random()*0.04;// Between 94% and 98% of current price\nlet price=currentPrice*startingPriceRatio;const today=new Date();// Create a generally upward trend with realistic daily movements\nfor(let i=30;i>=0;i--){const date=new Date(today);date.setDate(today.getDate()-i);const formattedDate=`${date.getMonth()+1}/${date.getDate()}`;// Add slight upward bias (markets trend up over time)\n// Higher probability of small positive moves, with occasional bigger moves in either direction\nconst changeDirection=Math.random();let change;if(changeDirection>0.57){// 43% chance of decrease\nchange=-price*volatility*Math.random();// Negative change\n}else if(changeDirection>0.2){// 37% chance of small increase\nchange=price*volatility*0.5*Math.random();// Small positive change\n}else{// 20% chance of larger increase\nchange=price*volatility*Math.random();// Larger positive change\n}price+=change;// Ensure price doesn't go negative or too far from reality\nif(price<=0||price>currentPrice*1.5){price=currentPrice*(0.85+Math.random()*0.25);// Reset to a reasonable value\n}data.push({date:formattedDate,price:parseFloat(price.toFixed(2))});}// Ensure the last data point is close to the current price\n// This makes the chart consistent with the displayed current price\ndata[data.length-1].price=parseFloat((currentPrice*(0.995+Math.random()*0.01)).toFixed(2));return data;};// Merge historical data for comparison chart\nconst prepareComparisonChartData=()=>{var _comparisonData$first;if(Object.keys(comparisonData).length===0)return[];// Get all dates from the first stock (any stock)\nconst firstSymbol=Object.keys(comparisonData)[0];if(!((_comparisonData$first=comparisonData[firstSymbol])!==null&&_comparisonData$first!==void 0&&_comparisonData$first.historicalData))return[];const mergedData={};// Process each stock's data\nObject.keys(comparisonData).forEach(symbol=>{var _comparisonData$symbo;if(!((_comparisonData$symbo=comparisonData[symbol])!==null&&_comparisonData$symbo!==void 0&&_comparisonData$symbo.historicalData))return;comparisonData[symbol].historicalData.forEach(dataPoint=>{if(!mergedData[dataPoint.date]){mergedData[dataPoint.date]={date:dataPoint.date};}mergedData[dataPoint.date][symbol]=dataPoint.price;});});// Convert to array and sort by date\nreturn Object.values(mergedData).sort((a,b)=>{const dateA=new Date(a.date.split('/')[0],a.date.split('/')[1]);const dateB=new Date(b.date.split('/')[0],b.date.split('/')[1]);return dateA-dateB;});};// Add a new stock to compare\nconst handleAddSymbol=()=>{if(!newSymbol||comparisonSymbols.includes(newSymbol)){setShowInput(false);setNewSymbol('');return;}setComparisonSymbols([...comparisonSymbols,newSymbol.toUpperCase()]);setDataLoaded(false);// Reset dataLoaded state to force refresh with new symbol\nsetShowInput(false);setNewSymbol('');};// Remove a stock from comparison\nconst handleRemoveSymbol=symbol=>{setComparisonSymbols(comparisonSymbols.filter(s=>s!==symbol));setDataLoaded(false);// Reset dataLoaded state to force refresh without this symbol\n};// Prepare performance comparison data\nconst preparePerformanceData=()=>{const performanceData=[];Object.keys(comparisonData).forEach((symbol,index)=>{if(comparisonData[symbol]){performanceData.push({name:symbol,value:comparisonData[symbol].percentChange,color:COLORS[index%COLORS.length],price:comparisonData[symbol].price});}});return performanceData;};const comparisonChartData=prepareComparisonChartData();const performanceData=preparePerformanceData();// Render price comparison chart\nconst renderPriceChart=()=>/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:350,children:/*#__PURE__*/_jsxs(LineChart,{data:comparisonChartData,margin:{top:5,right:30,left:20,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"date\"}),/*#__PURE__*/_jsx(YAxis,{tickFormatter:value=>{// Format large numbers with K/M suffixes\nif(value>=1000&&value<1000000){return`$${(value/1000).toFixed(1)}K`;}else if(value>=1000000){return`$${(value/1000000).toFixed(1)}M`;}return`$${value.toFixed(2)}`;}}),/*#__PURE__*/_jsx(Tooltip,{formatter:value=>{// Format the value with commas for thousands\nreturn[`$${parseFloat(value).toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2})}`,''];},labelFormatter:label=>`Date: ${label}`}),/*#__PURE__*/_jsx(Legend,{}),Object.keys(comparisonData).map((symbol,index)=>/*#__PURE__*/_jsx(Line,{type:\"monotone\",dataKey:symbol,stroke:COLORS[index%COLORS.length],activeDot:{r:8},name:symbol},symbol))]})});// Render performance comparison chart\nconst renderPerformanceChart=()=>/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:350,children:/*#__PURE__*/_jsxs(ComposedChart,{layout:\"vertical\",data:performanceData,margin:{top:20,right:30,left:70,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{type:\"number\",tickFormatter:value=>`${value.toFixed(2)}%`}),/*#__PURE__*/_jsx(YAxis,{dataKey:\"name\",type:\"category\",width:60}),/*#__PURE__*/_jsx(Tooltip,{formatter:(value,name,props)=>{if(name==='value')return[`${value.toFixed(2)}%`,'Change'];return[value,name];},labelFormatter:value=>`${value}`}),/*#__PURE__*/_jsx(Bar,{dataKey:\"value\",fill:\"#8884d8\",barSize:20,children:performanceData.map((entry,index)=>/*#__PURE__*/_jsx(Bar,{fill:entry.color},`cell-${index}`))})]})});return/*#__PURE__*/_jsxs(\"div\",{className:\"card stock-comparison\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"comparison-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Stock Comparison\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-type-selector\",children:[/*#__PURE__*/_jsx(\"button\",{className:chartType==='price'?'active':'',onClick:()=>setChartType('price'),children:\"Price History\"}),/*#__PURE__*/_jsx(\"button\",{className:chartType==='performance'?'active':'',onClick:()=>setChartType('performance'),children:\"Performance\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{setDataLoaded(false);setLoading(true);},disabled:loading,children:loading?'Refreshing...':'Refresh Data'})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"comparison-symbols\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"Comparing: \"}),/*#__PURE__*/_jsxs(\"div\",{className:\"symbol-tags\",children:[primaryStock&&primaryStock['01. symbol']&&/*#__PURE__*/_jsx(\"span\",{className:\"symbol-tag primary\",children:primaryStock['01. symbol']}),comparisonSymbols.map(symbol=>primaryStock&&symbol!==primaryStock['01. symbol']&&/*#__PURE__*/_jsxs(\"span\",{className:\"symbol-tag\",children:[symbol,/*#__PURE__*/_jsx(\"button\",{className:\"remove-symbol\",onClick:()=>handleRemoveSymbol(symbol),children:\"\\xD7\"})]},symbol)),!showInput&&/*#__PURE__*/_jsx(\"button\",{className:\"add-symbol-btn\",onClick:()=>setShowInput(true),children:\"+ Add\"}),showInput&&/*#__PURE__*/_jsxs(\"div\",{className:\"add-symbol-input\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newSymbol,onChange:e=>setNewSymbol(e.target.value),placeholder:\"Symbol\",maxLength:5}),/*#__PURE__*/_jsx(\"button\",{onClick:handleAddSymbol,children:\"Add\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowInput(false),children:\"Cancel\"})]})]})]}),loading?/*#__PURE__*/_jsx(\"div\",{className:\"loading-comparison\",children:\"Loading comparison data...\"}):/*#__PURE__*/_jsx(\"div\",{className:\"comparison-chart\",children:chartType==='price'?renderPriceChart():renderPerformanceChart()})]});};export default StockComparison;","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","ComposedChart","Bar","axios","jsx","_jsx","jsxs","_jsxs","StockComparison","_ref","primaryStock","API_URLS","comparisonSymbols","setComparisonSymbols","comparisonData","setComparisonData","loading","setLoading","error","setError","apiUrlIndex","setApiUrlIndex","showInput","setShowInput","newSymbol","setNewSymbol","chartType","setChartType","dataLoaded","setDataLoaded","COLORS","length","Object","keys","fetchComparisonData","primarySymbol","newData","price","parseFloat","change","percentChange","replace","historicalData","generateMockHistoricalData","symbol","fetchStockData","err","console","dataObject","i","response","get","timeout","data","Math","random","currentPrice","volatility","startingPriceRatio","today","Date","date","setDate","getDate","formattedDate","getMonth","changeDirection","push","toFixed","prepareComparisonChartData","_comparisonData$first","firstSymbol","mergedData","forEach","_comparisonData$symbo","dataPoint","values","sort","a","b","dateA","split","dateB","handleAddSymbol","includes","toUpperCase","handleRemoveSymbol","filter","s","preparePerformanceData","performanceData","index","name","value","color","comparisonChartData","renderPriceChart","width","height","children","margin","top","right","left","bottom","strokeDasharray","dataKey","tickFormatter","formatter","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","labelFormatter","label","map","type","stroke","activeDot","r","renderPerformanceChart","layout","props","fill","barSize","entry","className","onClick","disabled","onChange","e","target","placeholder","maxLength"],"sources":["/Users/pranav/Desktop/stock-market-app/src/components/StockComparison.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  LineChart, Line, XAxis, YAxis, CartesianGrid, \n  Tooltip, Legend, ResponsiveContainer, ComposedChart, Bar\n} from 'recharts';\nimport axios from 'axios';\n\nconst StockComparison = ({ primaryStock = {}, API_URLS = [] }) => {\n  const [comparisonSymbols, setComparisonSymbols] = useState(['MSFT', 'GOOG']);\n  const [comparisonData, setComparisonData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [apiUrlIndex, setApiUrlIndex] = useState(0);\n  const [showInput, setShowInput] = useState(false);\n  const [newSymbol, setNewSymbol] = useState('');\n  const [chartType, setChartType] = useState('price');\n  const [dataLoaded, setDataLoaded] = useState(false);\n\n  // Colors for different stocks\n  const COLORS = [\n    '#4CAF50', // Primary stock (green)\n    '#2196F3', // Microsoft (blue)\n    '#FF5722', // Google (orange)\n    '#9C27B0', // Purple\n    '#FFEB3B', // Yellow\n    '#607D8B'  // Blue Grey\n  ];\n\n  // Fetch data for comparison stocks\n  useEffect(() => {\n    // If we don't have API_URLS, can't proceed\n    if (!API_URLS || API_URLS.length === 0) {\n      setError(\"API URLs not available\");\n      return;\n    }\n    \n    // Prevent re-fetching if data is already loaded\n    if (dataLoaded && Object.keys(comparisonData).length > 0) {\n      return;\n    }\n    \n    const fetchComparisonData = async () => {\n      // Use a default primary symbol if none provided\n      const primarySymbol = primaryStock && primaryStock['01. symbol'] \n        ? primaryStock['01. symbol'] \n        : 'AAPL';\n      \n      setLoading(true);\n      const newData = {};\n      \n      // Add primary stock data if available, otherwise fetch it\n      if (primaryStock && primaryStock['01. symbol']) {\n        newData[primaryStock['01. symbol']] = {\n          price: parseFloat(primaryStock['05. price']),\n          change: parseFloat(primaryStock['09. change']),\n          percentChange: parseFloat(primaryStock['10. change percent'].replace('%', '')),\n          historicalData: generateMockHistoricalData(parseFloat(primaryStock['05. price']))\n        };\n      } else {\n        // Fetch primary stock data if not provided\n        try {\n          const symbol = 'AAPL'; // Default\n          await fetchStockData(symbol, newData);\n        } catch (err) {\n          console.error(`Error fetching data for default stock:`, err);\n        }\n      }\n      \n      // Fetch data for each comparison symbol\n      for (const symbol of comparisonSymbols) {\n        if (symbol === primarySymbol) continue;\n        \n        await fetchStockData(symbol, newData);\n      }\n      \n      setComparisonData(newData);\n      setLoading(false);\n      setDataLoaded(true); // Mark data as loaded after successful fetch\n    };\n    \n    fetchComparisonData();\n  }, [primaryStock, comparisonSymbols, API_URLS, dataLoaded]);\n  \n  // Helper function to fetch stock data\n  const fetchStockData = async (symbol, dataObject) => {\n    try {\n      // Try each API URL until one works\n      for (let i = 0; i < API_URLS.length; i++) {\n        try {\n          const response = await axios.get(\n            `${API_URLS[i]}?symbol=${symbol}`,\n            { timeout: 5000 }\n          );\n          \n          if (response.data && !response.data.error) {\n            setApiUrlIndex(i);\n            \n            dataObject[symbol] = {\n              price: parseFloat(response.data['05. price']),\n              change: parseFloat(response.data['09. change']),\n              percentChange: parseFloat(response.data['10. change percent'].replace('%', '')),\n              historicalData: generateMockHistoricalData(parseFloat(response.data['05. price']))\n            };\n            \n            break; // Exit the loop if successful\n          }\n        } catch (err) {\n          if (i === API_URLS.length - 1) {\n            console.error(`Failed to fetch data for ${symbol}`);\n            // Create mock data if API fails\n            dataObject[symbol] = {\n              price: Math.random() * 200 + 50,\n              change: (Math.random() * 10) - 5,\n              percentChange: (Math.random() * 5) - 2.5,\n              historicalData: generateMockHistoricalData(Math.random() * 200 + 50)\n            };\n          }\n        }\n      }\n    } catch (err) {\n      console.error(`Error fetching data for ${symbol}:`, err);\n    }\n  };\n\n  // Generate mock historical data for visualization\n  const generateMockHistoricalData = (currentPrice) => {\n    const data = [];\n    \n    // For expensive stocks, use smaller volatility to avoid unrealistic swings\n    const volatility = currentPrice > 1000 ? 0.005 : \n                       currentPrice > 500 ? 0.008 : \n                       currentPrice > 100 ? 0.01 : 0.015;\n    \n    // Start with a price that's slightly lower than current for an uptrend\n    const startingPriceRatio = 0.94 + (Math.random() * 0.04); // Between 94% and 98% of current price\n    let price = currentPrice * startingPriceRatio;\n    \n    const today = new Date();\n    \n    // Create a generally upward trend with realistic daily movements\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`;\n      \n      // Add slight upward bias (markets trend up over time)\n      // Higher probability of small positive moves, with occasional bigger moves in either direction\n      const changeDirection = Math.random();\n      let change;\n      \n      if (changeDirection > 0.57) {  // 43% chance of decrease\n        change = -price * volatility * Math.random();  // Negative change\n      } else if (changeDirection > 0.2) {  // 37% chance of small increase\n        change = price * volatility * 0.5 * Math.random();  // Small positive change\n      } else {  // 20% chance of larger increase\n        change = price * volatility * Math.random();  // Larger positive change\n      }\n      \n      price += change;\n      \n      // Ensure price doesn't go negative or too far from reality\n      if (price <= 0 || price > currentPrice * 1.5) {\n        price = currentPrice * (0.85 + Math.random() * 0.25); // Reset to a reasonable value\n      }\n      \n      data.push({\n        date: formattedDate,\n        price: parseFloat(price.toFixed(2))\n      });\n    }\n    \n    // Ensure the last data point is close to the current price\n    // This makes the chart consistent with the displayed current price\n    data[data.length - 1].price = parseFloat((currentPrice * (0.995 + Math.random() * 0.01)).toFixed(2));\n    \n    return data;\n  };\n\n  // Merge historical data for comparison chart\n  const prepareComparisonChartData = () => {\n    if (Object.keys(comparisonData).length === 0) return [];\n    \n    // Get all dates from the first stock (any stock)\n    const firstSymbol = Object.keys(comparisonData)[0];\n    if (!comparisonData[firstSymbol]?.historicalData) return [];\n    \n    const mergedData = {};\n    \n    // Process each stock's data\n    Object.keys(comparisonData).forEach(symbol => {\n      if (!comparisonData[symbol]?.historicalData) return;\n      \n      comparisonData[symbol].historicalData.forEach(dataPoint => {\n        if (!mergedData[dataPoint.date]) {\n          mergedData[dataPoint.date] = { date: dataPoint.date };\n        }\n        mergedData[dataPoint.date][symbol] = dataPoint.price;\n      });\n    });\n    \n    // Convert to array and sort by date\n    return Object.values(mergedData).sort((a, b) => {\n      const dateA = new Date(a.date.split('/')[0], a.date.split('/')[1]);\n      const dateB = new Date(b.date.split('/')[0], b.date.split('/')[1]);\n      return dateA - dateB;\n    });\n  };\n\n  // Add a new stock to compare\n  const handleAddSymbol = () => {\n    if (!newSymbol || comparisonSymbols.includes(newSymbol)) {\n      setShowInput(false);\n      setNewSymbol('');\n      return;\n    }\n    \n    setComparisonSymbols([...comparisonSymbols, newSymbol.toUpperCase()]);\n    setDataLoaded(false); // Reset dataLoaded state to force refresh with new symbol\n    setShowInput(false);\n    setNewSymbol('');\n  };\n\n  // Remove a stock from comparison\n  const handleRemoveSymbol = (symbol) => {\n    setComparisonSymbols(comparisonSymbols.filter(s => s !== symbol));\n    setDataLoaded(false); // Reset dataLoaded state to force refresh without this symbol\n  };\n\n  // Prepare performance comparison data\n  const preparePerformanceData = () => {\n    const performanceData = [];\n    \n    Object.keys(comparisonData).forEach((symbol, index) => {\n      if (comparisonData[symbol]) {\n        performanceData.push({\n          name: symbol,\n          value: comparisonData[symbol].percentChange,\n          color: COLORS[index % COLORS.length],\n          price: comparisonData[symbol].price\n        });\n      }\n    });\n    \n    return performanceData;\n  };\n\n  const comparisonChartData = prepareComparisonChartData();\n  const performanceData = preparePerformanceData();\n\n  // Render price comparison chart\n  const renderPriceChart = () => (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <LineChart\n        data={comparisonChartData}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" />\n        <YAxis \n          tickFormatter={(value) => {\n            // Format large numbers with K/M suffixes\n            if (value >= 1000 && value < 1000000) {\n              return `$${(value / 1000).toFixed(1)}K`;\n            } else if (value >= 1000000) {\n              return `$${(value / 1000000).toFixed(1)}M`;\n            }\n            return `$${value.toFixed(2)}`;\n          }}\n        />\n        <Tooltip \n          formatter={(value) => {\n            // Format the value with commas for thousands\n            return [`$${parseFloat(value).toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2\n            })}`, ''];\n          }}\n          labelFormatter={(label) => `Date: ${label}`}\n        />\n        <Legend />\n        {Object.keys(comparisonData).map((symbol, index) => (\n          <Line\n            key={symbol}\n            type=\"monotone\"\n            dataKey={symbol}\n            stroke={COLORS[index % COLORS.length]}\n            activeDot={{ r: 8 }}\n            name={symbol}\n          />\n        ))}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n\n  // Render performance comparison chart\n  const renderPerformanceChart = () => (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <ComposedChart\n        layout=\"vertical\"\n        data={performanceData}\n        margin={{ top: 20, right: 30, left: 70, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis \n          type=\"number\" \n          tickFormatter={(value) => `${value.toFixed(2)}%`} \n        />\n        <YAxis \n          dataKey=\"name\" \n          type=\"category\" \n          width={60} \n        />\n        <Tooltip \n          formatter={(value, name, props) => {\n            if (name === 'value') return [`${value.toFixed(2)}%`, 'Change'];\n            return [value, name];\n          }}\n          labelFormatter={(value) => `${value}`}\n        />\n        <Bar \n          dataKey=\"value\" \n          fill=\"#8884d8\" \n          barSize={20}\n        >\n          {performanceData.map((entry, index) => (\n            <Bar key={`cell-${index}`} fill={entry.color} />\n          ))}\n        </Bar>\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n\n  return (\n    <div className=\"card stock-comparison\">\n      <div className=\"comparison-header\">\n        <h2>Stock Comparison</h2>\n        <div className=\"chart-type-selector\">\n          <button \n            className={chartType === 'price' ? 'active' : ''} \n            onClick={() => setChartType('price')}\n          >\n            Price History\n          </button>\n          <button \n            className={chartType === 'performance' ? 'active' : ''} \n            onClick={() => setChartType('performance')}\n          >\n            Performance\n          </button>\n          <button \n            onClick={() => {\n              setDataLoaded(false);\n              setLoading(true);\n            }}\n            disabled={loading}\n          >\n            {loading ? 'Refreshing...' : 'Refresh Data'}\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"comparison-symbols\">\n        <p>Comparing: </p>\n        <div className=\"symbol-tags\">\n          {primaryStock && primaryStock['01. symbol'] && (\n            <span className=\"symbol-tag primary\">{primaryStock['01. symbol']}</span>\n          )}\n          {comparisonSymbols.map(symbol => (\n            (primaryStock && symbol !== primaryStock['01. symbol']) && (\n              <span key={symbol} className=\"symbol-tag\">\n                {symbol}\n                <button \n                  className=\"remove-symbol\" \n                  onClick={() => handleRemoveSymbol(symbol)}\n                >\n                  ×\n                </button>\n              </span>\n            )\n          ))}\n          \n          {!showInput && (\n            <button \n              className=\"add-symbol-btn\" \n              onClick={() => setShowInput(true)}\n            >\n              + Add\n            </button>\n          )}\n          \n          {showInput && (\n            <div className=\"add-symbol-input\">\n              <input\n                type=\"text\"\n                value={newSymbol}\n                onChange={(e) => setNewSymbol(e.target.value)}\n                placeholder=\"Symbol\"\n                maxLength={5}\n              />\n              <button onClick={handleAddSymbol}>Add</button>\n              <button onClick={() => setShowInput(false)}>Cancel</button>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {loading ? (\n        <div className=\"loading-comparison\">Loading comparison data...</div>\n      ) : (\n        <div className=\"comparison-chart\">\n          {chartType === 'price' ? renderPriceChart() : renderPerformanceChart()}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StockComparison; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}