{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/stock-market-app/src/components/StockChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { BarChart, Bar, LineChart, Line, ComposedChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, Scatter } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockChart = ({\n  stockData\n}) => {\n  _s();\n  const [chartType, setChartType] = useState('bar');\n\n  // Creating mock data since we're only getting latest price\n  // In a real app, you would fetch historical data from an API\n  const prepareChartData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    const basePrice = parseFloat(stockData['05. price']);\n    const change = parseFloat(stockData['09. change'] || 0);\n\n    // Create mock daily price data for visualization\n    return [{\n      name: 'Open',\n      price: parseFloat(stockData['02. open'] || basePrice)\n    }, {\n      name: 'Low',\n      price: parseFloat(stockData['04. low'] || basePrice - Math.abs(change))\n    }, {\n      name: 'Current',\n      price: basePrice\n    }, {\n      name: 'High',\n      price: parseFloat(stockData['03. high'] || basePrice + Math.abs(change))\n    }];\n  };\n\n  // Generate mock historical data for line chart with actual dates\n  const generateHistoricalData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    const currentPrice = parseFloat(stockData['05. price']);\n    const volatility = 0.02; // 2% daily volatility for simulation\n    const data = [];\n\n    // Start with a price 10% lower than current as baseline\n    let previousPrice = currentPrice * 0.9;\n\n    // Generate 30 days of data with actual dates\n    const today = new Date();\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n\n      // Format date as MM/DD\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`;\n\n      // Random price movement with slight upward bias\n      const change = previousPrice * volatility * (Math.random() - 0.45);\n      const price = previousPrice + change;\n      previousPrice = price;\n\n      // Generate random volume between 100,000 and 10,000,000\n      const volume = Math.floor(Math.random() * 9900000) + 100000;\n      data.push({\n        date: formattedDate,\n        price: parseFloat(price.toFixed(2)),\n        volume: volume\n      });\n    }\n    return data;\n  };\n\n  // Generate data for price movement composition (pie chart)\n  const generatePriceCompositionData = () => {\n    if (!stockData) return [];\n    const price = parseFloat(stockData['05. price'] || 0);\n    const open = parseFloat(stockData['02. open'] || 0);\n    const change = price - open;\n\n    // Components that make up the current price (simplified for demonstration)\n    return [{\n      name: 'Base Value',\n      value: open > 0 ? open : price * 0.9\n    }, {\n      name: 'Market Movement',\n      value: Math.abs(change)\n    }, {\n      name: 'Volatility',\n      value: price * 0.01\n    }];\n  };\n\n  // Generate data for price comparison with sector and index\n  const generateComparisonData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    const stockPrice = parseFloat(stockData['05. price']);\n    const stockChange = parseFloat(stockData['09. change'] || 0);\n    const stockPercentChange = stockChange / stockPrice * 100;\n\n    // Mock data for sector and market indices performance\n    const sectorChange = (Math.random() * 2 - 1) * 2; // Between -2% and 2%\n    const marketChange = (Math.random() * 1.5 - 0.5) * 1.5; // Between -1.5% and 1.5%\n\n    return [{\n      name: stockData['01. symbol'],\n      performance: parseFloat(stockPercentChange.toFixed(2)),\n      fill: stockPercentChange >= 0 ? '#4CAF50' : '#F44336'\n    }, {\n      name: 'Sector Avg',\n      performance: parseFloat(sectorChange.toFixed(2)),\n      fill: sectorChange >= 0 ? '#4CAF50' : '#F44336'\n    }, {\n      name: 'Market Index',\n      performance: parseFloat(marketChange.toFixed(2)),\n      fill: marketChange >= 0 ? '#4CAF50' : '#F44336'\n    }];\n  };\n  const chartData = prepareChartData();\n  const historicalData = generateHistoricalData();\n  const compositionData = generatePriceCompositionData();\n  const comparisonData = generateComparisonData();\n\n  // Determine if stock is up or down for color schemes\n  const isStockUp = parseFloat(stockData['09. change'] || 0) >= 0;\n  const mainColor = isStockUp ? '#4CAF50' : '#F44336';\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28'];\n\n  // Chart type options\n  const chartTypes = [{\n    id: 'bar',\n    label: 'Price Levels'\n  }, {\n    id: 'line',\n    label: 'Price History'\n  }, {\n    id: 'volume',\n    label: 'Volume Analysis'\n  }, {\n    id: 'comparison',\n    label: 'Performance Comparison'\n  }, {\n    id: 'pie',\n    label: 'Price Composition'\n  }];\n\n  // Render different chart based on selection\n  const renderSelectedChart = () => {\n    switch (chartType) {\n      case 'bar':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: chartData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: [dataMin => Math.floor(dataMin * 0.995), dataMax => Math.ceil(dataMax * 1.005)],\n              tickFormatter: value => `$${value.toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Price']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"price\",\n              fill: mainColor\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this);\n      case 'line':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: historicalData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: ['auto', 'auto'],\n              tickFormatter: value => `$${value.toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Price']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"price\",\n              stroke: mainColor,\n              strokeWidth: 2,\n              dot: {\n                r: 0\n              },\n              activeDot: {\n                r: 6\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this);\n      case 'volume':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(ComposedChart, {\n            data: historicalData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              yAxisId: \"left\",\n              tickFormatter: value => `$${value.toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              yAxisId: \"right\",\n              orientation: \"right\",\n              tickFormatter: value => (value / 1000000).toFixed(1) + 'M'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: (value, name) => {\n                if (name === 'price') return [`$${value.toFixed(2)}`, 'Price'];\n                return [value.toLocaleString(), 'Volume'];\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              yAxisId: \"right\",\n              dataKey: \"volume\",\n              fill: \"#8884d8\",\n              opacity: 0.6\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              yAxisId: \"left\",\n              type: \"monotone\",\n              dataKey: \"price\",\n              stroke: mainColor,\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this);\n      case 'pie':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(PieChart, {\n            children: [/*#__PURE__*/_jsxDEV(Pie, {\n              data: compositionData,\n              cx: \"50%\",\n              cy: \"50%\",\n              innerRadius: 60,\n              outerRadius: 80,\n              fill: \"#8884d8\",\n              paddingAngle: 5,\n              dataKey: \"value\",\n              label: ({\n                name,\n                percent\n              }) => `${name}: ${(percent * 100).toFixed(0)}%`,\n              children: compositionData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: COLORS[index % COLORS.length]\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Amount']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this);\n      case 'comparison':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: comparisonData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            layout: \"vertical\",\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\",\n              horizontal: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              type: \"number\",\n              domain: [-5, 5],\n              tickFormatter: value => `${value}%`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              type: \"category\",\n              dataKey: \"name\",\n              width: 100\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`${value}%`, 'Performance']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"performance\",\n              radius: [0, 4, 4, 0],\n              label: {\n                position: 'right',\n                formatter: value => `${value}%`\n              },\n              children: comparisonData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: entry.fill\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a chart type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    style: {\n      height: '450px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Price Analysis - \", stockData['01. symbol']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-selector\",\n        children: chartTypes.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setChartType(type.id),\n          className: chartType === type.id ? 'active' : '',\n          style: {\n            backgroundColor: chartType === type.id ? '#007bff' : '#f8f9fa',\n            color: chartType === type.id ? 'white' : '#333',\n            padding: '5px 10px',\n            margin: '0 5px',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: type.label\n        }, type.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '360px',\n        marginTop: '15px'\n      },\n      children: chartData.length > 0 ? renderSelectedChart() : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No data available for chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n};\n_s(StockChart, \"PDMP5OFEBfA4n+CURn6/eXlfDYY=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useState","BarChart","Bar","LineChart","Line","ComposedChart","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","PieChart","Pie","Cell","Scatter","jsxDEV","_jsxDEV","StockChart","stockData","_s","chartType","setChartType","prepareChartData","basePrice","parseFloat","change","name","price","Math","abs","generateHistoricalData","currentPrice","volatility","data","previousPrice","today","Date","i","date","setDate","getDate","formattedDate","getMonth","random","volume","floor","push","toFixed","generatePriceCompositionData","open","value","generateComparisonData","stockPrice","stockChange","stockPercentChange","sectorChange","marketChange","performance","fill","chartData","historicalData","compositionData","comparisonData","isStockUp","mainColor","COLORS","chartTypes","id","label","renderSelectedChart","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","domain","dataMin","dataMax","ceil","tickFormatter","formatter","type","stroke","strokeWidth","dot","r","activeDot","yAxisId","orientation","toLocaleString","opacity","cx","cy","innerRadius","outerRadius","paddingAngle","percent","map","entry","index","length","layout","horizontal","radius","position","className","style","display","justifyContent","alignItems","onClick","backgroundColor","color","padding","border","borderRadius","cursor","marginTop","_c","$RefreshReg$"],"sources":["/Users/pranav/stock-market-app/src/components/StockChart.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { \n  BarChart, Bar, LineChart, Line, ComposedChart, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, \n  ResponsiveContainer, PieChart, Pie, Cell, Scatter\n} from 'recharts';\n\nconst StockChart = ({ stockData }) => {\n  const [chartType, setChartType] = useState('bar');\n  \n  // Creating mock data since we're only getting latest price\n  // In a real app, you would fetch historical data from an API\n  const prepareChartData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n\n    const basePrice = parseFloat(stockData['05. price']);\n    const change = parseFloat(stockData['09. change'] || 0);\n    \n    // Create mock daily price data for visualization\n    return [\n      { name: 'Open', price: parseFloat(stockData['02. open'] || basePrice) },\n      { name: 'Low', price: parseFloat(stockData['04. low'] || (basePrice - Math.abs(change))) },\n      { name: 'Current', price: basePrice },\n      { name: 'High', price: parseFloat(stockData['03. high'] || (basePrice + Math.abs(change))) },\n    ];\n  };\n\n  // Generate mock historical data for line chart with actual dates\n  const generateHistoricalData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    \n    const currentPrice = parseFloat(stockData['05. price']);\n    const volatility = 0.02; // 2% daily volatility for simulation\n    const data = [];\n    \n    // Start with a price 10% lower than current as baseline\n    let previousPrice = currentPrice * 0.9;\n    \n    // Generate 30 days of data with actual dates\n    const today = new Date();\n    \n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      \n      // Format date as MM/DD\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`;\n      \n      // Random price movement with slight upward bias\n      const change = previousPrice * volatility * (Math.random() - 0.45);\n      const price = previousPrice + change;\n      previousPrice = price;\n      \n      // Generate random volume between 100,000 and 10,000,000\n      const volume = Math.floor(Math.random() * 9900000) + 100000;\n      \n      data.push({\n        date: formattedDate,\n        price: parseFloat(price.toFixed(2)),\n        volume: volume\n      });\n    }\n    \n    return data;\n  };\n  \n  // Generate data for price movement composition (pie chart)\n  const generatePriceCompositionData = () => {\n    if (!stockData) return [];\n    \n    const price = parseFloat(stockData['05. price'] || 0);\n    const open = parseFloat(stockData['02. open'] || 0);\n    const change = price - open;\n    \n    // Components that make up the current price (simplified for demonstration)\n    return [\n      { name: 'Base Value', value: open > 0 ? open : price * 0.9 },\n      { name: 'Market Movement', value: Math.abs(change) },\n      { name: 'Volatility', value: price * 0.01 }\n    ];\n  };\n  \n  // Generate data for price comparison with sector and index\n  const generateComparisonData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    \n    const stockPrice = parseFloat(stockData['05. price']);\n    const stockChange = parseFloat(stockData['09. change'] || 0);\n    const stockPercentChange = (stockChange / stockPrice) * 100;\n    \n    // Mock data for sector and market indices performance\n    const sectorChange = (Math.random() * 2 - 1) * 2; // Between -2% and 2%\n    const marketChange = (Math.random() * 1.5 - 0.5) * 1.5; // Between -1.5% and 1.5%\n    \n    return [\n      {\n        name: stockData['01. symbol'],\n        performance: parseFloat(stockPercentChange.toFixed(2)),\n        fill: stockPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      },\n      {\n        name: 'Sector Avg',\n        performance: parseFloat(sectorChange.toFixed(2)),\n        fill: sectorChange >= 0 ? '#4CAF50' : '#F44336'\n      },\n      {\n        name: 'Market Index',\n        performance: parseFloat(marketChange.toFixed(2)),\n        fill: marketChange >= 0 ? '#4CAF50' : '#F44336'\n      }\n    ];\n  };\n\n  const chartData = prepareChartData();\n  const historicalData = generateHistoricalData();\n  const compositionData = generatePriceCompositionData();\n  const comparisonData = generateComparisonData();\n  \n  // Determine if stock is up or down for color schemes\n  const isStockUp = parseFloat(stockData['09. change'] || 0) >= 0;\n  const mainColor = isStockUp ? '#4CAF50' : '#F44336';\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28'];\n\n  // Chart type options\n  const chartTypes = [\n    { id: 'bar', label: 'Price Levels' },\n    { id: 'line', label: 'Price History' },\n    { id: 'volume', label: 'Volume Analysis' },\n    { id: 'comparison', label: 'Performance Comparison' },\n    { id: 'pie', label: 'Price Composition' },\n  ];\n\n  // Render different chart based on selection\n  const renderSelectedChart = () => {\n    switch(chartType) {\n      case 'bar':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={chartData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis \n                domain={[\n                  (dataMin) => Math.floor(dataMin * 0.995),\n                  (dataMax) => Math.ceil(dataMax * 1.005)\n                ]}\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <Tooltip \n                formatter={(value) => [`$${value.toFixed(2)}`, 'Price']}\n              />\n              <Legend />\n              <Bar dataKey=\"price\" fill={mainColor} />\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'line':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart\n              data={historicalData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis \n                domain={['auto', 'auto']}\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <Tooltip formatter={(value) => [`$${value.toFixed(2)}`, 'Price']} />\n              <Legend />\n              <Line \n                type=\"monotone\" \n                dataKey=\"price\" \n                stroke={mainColor} \n                strokeWidth={2}\n                dot={{ r: 0 }}\n                activeDot={{ r: 6 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'volume':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <ComposedChart\n              data={historicalData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis \n                yAxisId=\"left\"\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <YAxis \n                yAxisId=\"right\" \n                orientation=\"right\"\n                tickFormatter={(value) => (value / 1000000).toFixed(1) + 'M'}\n              />\n              <Tooltip \n                formatter={(value, name) => {\n                  if (name === 'price') return [`$${value.toFixed(2)}`, 'Price'];\n                  return [value.toLocaleString(), 'Volume'];\n                }}\n              />\n              <Legend />\n              <Bar \n                yAxisId=\"right\" \n                dataKey=\"volume\" \n                fill=\"#8884d8\" \n                opacity={0.6}\n              />\n              <Line \n                yAxisId=\"left\" \n                type=\"monotone\" \n                dataKey=\"price\" \n                stroke={mainColor} \n                dot={false}\n              />\n            </ComposedChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'pie':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={compositionData}\n                cx=\"50%\"\n                cy=\"50%\"\n                innerRadius={60}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                paddingAngle={5}\n                dataKey=\"value\"\n                label={({name, percent}) => `${name}: ${(percent * 100).toFixed(0)}%`}\n              >\n                {compositionData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip formatter={(value) => [`$${value.toFixed(2)}`, 'Amount']} />\n              <Legend />\n            </PieChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'comparison':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={comparisonData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n              layout=\"vertical\"\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" horizontal={false} />\n              <XAxis \n                type=\"number\" \n                domain={[-5, 5]}\n                tickFormatter={(value) => `${value}%`}\n              />\n              <YAxis type=\"category\" dataKey=\"name\" width={100} />\n              <Tooltip formatter={(value) => [`${value}%`, 'Performance']} />\n              <Legend />\n              <Bar \n                dataKey=\"performance\" \n                radius={[0, 4, 4, 0]} \n                label={{ position: 'right', formatter: (value) => `${value}%` }}\n              >\n                {comparisonData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.fill} />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      \n      default:\n        return <p>Select a chart type</p>;\n    }\n  };\n\n  return (\n    <div className=\"card\" style={{ height: '450px' }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <h2>Price Analysis - {stockData['01. symbol']}</h2>\n        <div className=\"chart-selector\">\n          {chartTypes.map(type => (\n            <button\n              key={type.id}\n              onClick={() => setChartType(type.id)}\n              className={chartType === type.id ? 'active' : ''}\n              style={{\n                backgroundColor: chartType === type.id ? '#007bff' : '#f8f9fa',\n                color: chartType === type.id ? 'white' : '#333',\n                padding: '5px 10px',\n                margin: '0 5px',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n            >\n              {type.label}\n            </button>\n          ))}\n        </div>\n      </div>\n      \n      <div style={{ height: '360px', marginTop: '15px' }}>\n        {chartData.length > 0 ? (\n          renderSelectedChart()\n        ) : (\n          <div style={{ \n            height: '100%', \n            display: 'flex', \n            alignItems: 'center', \n            justifyContent: 'center' \n          }}>\n            <p>No data available for chart</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StockChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}