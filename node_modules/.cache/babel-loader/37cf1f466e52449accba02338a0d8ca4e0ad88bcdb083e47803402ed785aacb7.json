{"ast":null,"code":"import React,{useState,useEffect}from'react';import{BarChart,Bar,LineChart,Line,ComposedChart,XAxis,YAxis,CartesianGrid,Tooltip,Legend,ResponsiveContainer,PieChart,Pie,Cell}from'recharts';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const StockChart=_ref=>{let{stockData}=_ref;const[chartType,setChartType]=useState('bar');const[historicalData,setHistoricalData]=useState([]);const[sectorData,setSectorData]=useState(null);const[marketData,setMarketData]=useState(null);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);// Fetch historical data from backend API\nuseEffect(()=>{if(stockData&&stockData['01. symbol']){setIsLoading(true);setError(null);setHistoricalData([]);const symbol=stockData['01. symbol'];const period='1mo';// Default to 1 month\nconst interval='1d';// Default to daily data\n// Fetch stock historical data\nfetch(`http://localhost:5001/api/stock/history?symbol=${symbol}&period=${period}&interval=${interval}`).then(response=>{if(!response.ok){throw new Error('Failed to fetch historical data');}return response.json();}).then(data=>{if(data&&data.data&&Array.isArray(data.data)){setHistoricalData(data.data);// Get sector for the stock (simplified mapping)\nlet sector='TECHNOLOGY';if(['AAPL','MSFT','GOOG','GOOGL','META','NVDA','ADBE','CSCO','INTC'].includes(symbol)){sector='XLK';// Technology sector ETF\n}else if(['AMZN','TSLA','NFLX','DIS','CMCSA'].includes(symbol)){sector='XLC';// Communication Services sector ETF\n}else if(['JPM','BAC','V','MA','PYPL'].includes(symbol)){sector='XLF';// Financial sector ETF\n}else if(['JNJ','PFE','MRK','TMO'].includes(symbol)){sector='XLV';// Healthcare sector ETF\n}else if(['WMT','PG','COST','KO','PEP'].includes(symbol)){sector='XLP';// Consumer Staples sector ETF\n}// Fetch sector ETF data\nfetchComparisonData(sector,'sector');// Fetch market index data (S&P 500)\nfetchComparisonData('SPY','market');}else{setError('Invalid data format received');}setIsLoading(false);}).catch(err=>{console.error('Error fetching historical data:',err);setError(err.message);setIsLoading(false);});}},[stockData]);// Helper function to fetch comparison data (sector, market index)\nconst fetchComparisonData=(symbol,type)=>{fetch(`http://localhost:5001/api/stock?symbol=${symbol}`).then(response=>{if(!response.ok){throw new Error(`Failed to fetch ${type} data`);}return response.json();}).then(data=>{if(type==='sector'){setSectorData(data);}else if(type==='market'){setMarketData(data);}}).catch(err=>{console.error(`Error fetching ${type} data:`,err);});};// Creating data for current day price levels\nconst prepareChartData=()=>{if(!stockData||!stockData['05. price']){return[];}const basePrice=parseFloat(stockData['05. price']);// Create daily price data for visualization\nreturn[{name:'Open',price:parseFloat(stockData['02. open'])},{name:'Low',price:parseFloat(stockData['04. low'])},{name:'Current',price:basePrice},{name:'High',price:parseFloat(stockData['03. high'])}];};// Generate data for price comparison with sector and index using real data\nconst generateComparisonData=()=>{if(!stockData||!stockData['05. price']){return[];}// Stock data\nconst stockPrice=parseFloat(stockData['05. price']);const stockChange=parseFloat(stockData['09. change']||0);const stockPercentChange=stockChange/stockPrice*100;const result=[{name:stockData['01. symbol'],performance:parseFloat(stockPercentChange.toFixed(2)),fill:stockPercentChange>=0?'#4CAF50':'#F44336'}];// Add sector data if available\nif(sectorData&&sectorData['05. price']&&sectorData['09. change']){const sectorChange=parseFloat(sectorData['09. change']);const sectorPrice=parseFloat(sectorData['05. price']);const sectorPercentChange=sectorChange/sectorPrice*100;result.push({name:`${sectorData['01. symbol']} (Sector)`,performance:parseFloat(sectorPercentChange.toFixed(2)),fill:sectorPercentChange>=0?'#4CAF50':'#F44336'});}else{// Default sector if data not available yet\nresult.push({name:'Sector Avg',performance:0,fill:'#9E9E9E'});}// Add market index data if available\nif(marketData&&marketData['05. price']&&marketData['09. change']){const marketChange=parseFloat(marketData['09. change']);const marketPrice=parseFloat(marketData['05. price']);const marketPercentChange=marketChange/marketPrice*100;result.push({name:`${marketData['01. symbol']} (Market)`,performance:parseFloat(marketPercentChange.toFixed(2)),fill:marketPercentChange>=0?'#4CAF50':'#F44336'});}else{// Default market if data not available yet\nresult.push({name:'Market Index',performance:0,fill:'#9E9E9E'});}return result;};const chartData=prepareChartData();const comparisonData=generateComparisonData();// Determine if stock is up or down for color schemes\nconst isStockUp=parseFloat(stockData['09. change']||0)>=0;const mainColor=isStockUp?'#4CAF50':'#F44336';const COLORS=['#0088FE','#00C49F','#FFBB28'];// Chart type options\nconst chartTypes=[{id:'bar',label:'Price Levels'},{id:'line',label:'Price History'},{id:'volume',label:'Volume Analysis'},{id:'comparison',label:'Performance Comparison'}];// Loading state\nif((chartType==='line'||chartType==='volume')&&isLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"chart-container\",style:{height:'400px',display:'flex',justifyContent:'center',alignItems:'center'},children:/*#__PURE__*/_jsx(\"p\",{children:\"Loading historical data...\"})});}// Error state\nif((chartType==='line'||chartType==='volume')&&error){return/*#__PURE__*/_jsx(\"div\",{className:\"chart-container\",style:{height:'400px',display:'flex',justifyContent:'center',alignItems:'center',color:'#F44336'},children:/*#__PURE__*/_jsxs(\"p\",{children:[\"Error: \",error,\". Unable to display historical data.\"]})});}// No data state\nif((chartType==='line'||chartType==='volume')&&historicalData.length===0&&!isLoading&&!error){return/*#__PURE__*/_jsx(\"div\",{className:\"chart-container\",style:{height:'400px',display:'flex',justifyContent:'center',alignItems:'center'},children:/*#__PURE__*/_jsx(\"p\",{children:\"No historical data available for this stock.\"})});}// Render different chart based on selection\nconst renderSelectedChart=()=>{switch(chartType){case'bar':return/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"100%\",children:/*#__PURE__*/_jsxs(BarChart,{data:chartData,margin:{top:20,right:30,left:20,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"name\"}),/*#__PURE__*/_jsx(YAxis,{domain:[dataMin=>Math.floor(dataMin*0.995),dataMax=>Math.ceil(dataMax*1.005)],tickFormatter:value=>`$${value.toFixed(2)}`}),/*#__PURE__*/_jsx(Tooltip,{formatter:value=>[`$${value.toFixed(2)}`,'Price']}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Bar,{dataKey:\"price\",fill:mainColor})]})});case'line':return/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"100%\",children:/*#__PURE__*/_jsxs(LineChart,{data:historicalData,margin:{top:20,right:30,left:20,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"date\"}),/*#__PURE__*/_jsx(YAxis,{domain:['auto','auto'],tickFormatter:value=>`$${value.toFixed(2)}`}),/*#__PURE__*/_jsx(Tooltip,{formatter:value=>[`$${value.toFixed(2)}`,'Price'],labelFormatter:label=>`Date: ${label}`}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Line,{type:\"monotone\",dataKey:\"price\",stroke:mainColor,strokeWidth:2,dot:{r:0},activeDot:{r:6}})]})});case'volume':return/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"100%\",children:/*#__PURE__*/_jsxs(ComposedChart,{data:historicalData,margin:{top:20,right:30,left:20,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"date\"}),/*#__PURE__*/_jsx(YAxis,{yAxisId:\"left\",orientation:\"left\",tickFormatter:value=>`$${value.toFixed(2)}`}),/*#__PURE__*/_jsx(YAxis,{yAxisId:\"right\",orientation:\"right\",domain:['auto','auto'],tickFormatter:value=>`${(value/1000000).toFixed(1)}M`}),/*#__PURE__*/_jsx(Tooltip,{formatter:(value,name)=>{return name==='price'?[`$${value.toFixed(2)}`,'Price']:[`${(value/1000000).toFixed(1)}M`,'Volume'];}}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Line,{yAxisId:\"left\",type:\"monotone\",dataKey:\"price\",stroke:mainColor,strokeWidth:2,dot:false}),/*#__PURE__*/_jsx(Bar,{yAxisId:\"right\",dataKey:\"volume\",fill:\"#8884d8\",opacity:0.5})]})});case'comparison':return/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"100%\",children:/*#__PURE__*/_jsxs(BarChart,{data:comparisonData,margin:{top:20,right:30,left:20,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"name\"}),/*#__PURE__*/_jsx(YAxis,{tickFormatter:value=>`${value}%`,domain:[dataMin=>Math.min(dataMin,-2),dataMax=>Math.max(dataMax,2)]}),/*#__PURE__*/_jsx(Tooltip,{formatter:value=>[`${value}%`,'Performance']}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Bar,{dataKey:\"performance\",fill:\"#8884d8\",children:comparisonData.map((entry,index)=>/*#__PURE__*/_jsx(Cell,{fill:entry.fill},`cell-${index}`))})]})});default:return/*#__PURE__*/_jsx(\"div\",{children:\"Please select a chart type\"});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"stock-chart\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chart-selectors\",children:chartTypes.map(type=>/*#__PURE__*/_jsx(\"button\",{className:`chart-type-btn ${chartType===type.id?'active':''}`,onClick:()=>setChartType(type.id),children:type.label},type.id))}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-container\",style:{height:'400px'},children:!stockData||Object.keys(stockData).length===0?/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center',height:'100%'},children:/*#__PURE__*/_jsx(\"p\",{children:\"Please select a stock to display chart\"})}):renderSelectedChart()})]});};export default StockChart;","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","LineChart","Line","ComposedChart","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","PieChart","Pie","Cell","jsx","_jsx","jsxs","_jsxs","StockChart","_ref","stockData","chartType","setChartType","historicalData","setHistoricalData","sectorData","setSectorData","marketData","setMarketData","isLoading","setIsLoading","error","setError","symbol","period","interval","fetch","then","response","ok","Error","json","data","Array","isArray","sector","includes","fetchComparisonData","catch","err","console","message","type","prepareChartData","basePrice","parseFloat","name","price","generateComparisonData","stockPrice","stockChange","stockPercentChange","result","performance","toFixed","fill","sectorChange","sectorPrice","sectorPercentChange","push","marketChange","marketPrice","marketPercentChange","chartData","comparisonData","isStockUp","mainColor","COLORS","chartTypes","id","label","className","style","height","display","justifyContent","alignItems","children","color","length","renderSelectedChart","width","margin","top","right","left","bottom","strokeDasharray","dataKey","domain","dataMin","Math","floor","dataMax","ceil","tickFormatter","value","formatter","labelFormatter","stroke","strokeWidth","dot","r","activeDot","yAxisId","orientation","opacity","min","max","map","entry","index","onClick","Object","keys"],"sources":["/Users/pranav/Desktop/stock-market-app/src/components/StockChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  BarChart, Bar, LineChart, Line, ComposedChart, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, \n  ResponsiveContainer, PieChart, Pie, Cell\n} from 'recharts';\n\nconst StockChart = ({ stockData }) => {\n  const [chartType, setChartType] = useState('bar');\n  const [historicalData, setHistoricalData] = useState([]);\n  const [sectorData, setSectorData] = useState(null);\n  const [marketData, setMarketData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  // Fetch historical data from backend API\n  useEffect(() => {\n    if (stockData && stockData['01. symbol']) {\n      setIsLoading(true);\n      setError(null);\n      setHistoricalData([]);\n      \n      const symbol = stockData['01. symbol'];\n      const period = '1mo'; // Default to 1 month\n      const interval = '1d'; // Default to daily data\n      \n      // Fetch stock historical data\n      fetch(`http://localhost:5001/api/stock/history?symbol=${symbol}&period=${period}&interval=${interval}`)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Failed to fetch historical data');\n          }\n          return response.json();\n        })\n        .then(data => {\n          if (data && data.data && Array.isArray(data.data)) {\n            setHistoricalData(data.data);\n            \n            // Get sector for the stock (simplified mapping)\n            let sector = 'TECHNOLOGY';\n            if (['AAPL', 'MSFT', 'GOOG', 'GOOGL', 'META', 'NVDA', 'ADBE', 'CSCO', 'INTC'].includes(symbol)) {\n              sector = 'XLK'; // Technology sector ETF\n            } else if (['AMZN', 'TSLA', 'NFLX', 'DIS', 'CMCSA'].includes(symbol)) {\n              sector = 'XLC'; // Communication Services sector ETF\n            } else if (['JPM', 'BAC', 'V', 'MA', 'PYPL'].includes(symbol)) {\n              sector = 'XLF'; // Financial sector ETF\n            } else if (['JNJ', 'PFE', 'MRK', 'TMO'].includes(symbol)) {\n              sector = 'XLV'; // Healthcare sector ETF\n            } else if (['WMT', 'PG', 'COST', 'KO', 'PEP'].includes(symbol)) {\n              sector = 'XLP'; // Consumer Staples sector ETF\n            }\n            \n            // Fetch sector ETF data\n            fetchComparisonData(sector, 'sector');\n            \n            // Fetch market index data (S&P 500)\n            fetchComparisonData('SPY', 'market');\n          } else {\n            setError('Invalid data format received');\n          }\n          setIsLoading(false);\n        })\n        .catch(err => {\n          console.error('Error fetching historical data:', err);\n          setError(err.message);\n          setIsLoading(false);\n        });\n    }\n  }, [stockData]);\n  \n  // Helper function to fetch comparison data (sector, market index)\n  const fetchComparisonData = (symbol, type) => {\n    fetch(`http://localhost:5001/api/stock?symbol=${symbol}`)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Failed to fetch ${type} data`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        if (type === 'sector') {\n          setSectorData(data);\n        } else if (type === 'market') {\n          setMarketData(data);\n        }\n      })\n      .catch(err => {\n        console.error(`Error fetching ${type} data:`, err);\n      });\n  };\n  \n  // Creating data for current day price levels\n  const prepareChartData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n\n    const basePrice = parseFloat(stockData['05. price']);\n    \n    // Create daily price data for visualization\n    return [\n      { name: 'Open', price: parseFloat(stockData['02. open']) },\n      { name: 'Low', price: parseFloat(stockData['04. low']) },\n      { name: 'Current', price: basePrice },\n      { name: 'High', price: parseFloat(stockData['03. high']) },\n    ];\n  };\n\n  // Generate data for price comparison with sector and index using real data\n  const generateComparisonData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    \n    // Stock data\n    const stockPrice = parseFloat(stockData['05. price']);\n    const stockChange = parseFloat(stockData['09. change'] || 0);\n    const stockPercentChange = (stockChange / stockPrice) * 100;\n    \n    const result = [\n      {\n        name: stockData['01. symbol'],\n        performance: parseFloat(stockPercentChange.toFixed(2)),\n        fill: stockPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      }\n    ];\n    \n    // Add sector data if available\n    if (sectorData && sectorData['05. price'] && sectorData['09. change']) {\n      const sectorChange = parseFloat(sectorData['09. change']);\n      const sectorPrice = parseFloat(sectorData['05. price']);\n      const sectorPercentChange = (sectorChange / sectorPrice) * 100;\n      \n      result.push({\n        name: `${sectorData['01. symbol']} (Sector)`,\n        performance: parseFloat(sectorPercentChange.toFixed(2)),\n        fill: sectorPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      });\n    } else {\n      // Default sector if data not available yet\n      result.push({\n        name: 'Sector Avg',\n        performance: 0,\n        fill: '#9E9E9E'\n      });\n    }\n    \n    // Add market index data if available\n    if (marketData && marketData['05. price'] && marketData['09. change']) {\n      const marketChange = parseFloat(marketData['09. change']);\n      const marketPrice = parseFloat(marketData['05. price']);\n      const marketPercentChange = (marketChange / marketPrice) * 100;\n      \n      result.push({\n        name: `${marketData['01. symbol']} (Market)`,\n        performance: parseFloat(marketPercentChange.toFixed(2)),\n        fill: marketPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      });\n    } else {\n      // Default market if data not available yet\n      result.push({\n        name: 'Market Index',\n        performance: 0,\n        fill: '#9E9E9E'\n      });\n    }\n    \n    return result;\n  };\n\n  const chartData = prepareChartData();\n  const comparisonData = generateComparisonData();\n  \n  // Determine if stock is up or down for color schemes\n  const isStockUp = parseFloat(stockData['09. change'] || 0) >= 0;\n  const mainColor = isStockUp ? '#4CAF50' : '#F44336';\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28'];\n\n  // Chart type options\n  const chartTypes = [\n    { id: 'bar', label: 'Price Levels' },\n    { id: 'line', label: 'Price History' },\n    { id: 'volume', label: 'Volume Analysis' },\n    { id: 'comparison', label: 'Performance Comparison' }\n  ];\n\n  // Loading state\n  if ((chartType === 'line' || chartType === 'volume') && isLoading) {\n    return (\n      <div className=\"chart-container\" style={{ height: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <p>Loading historical data...</p>\n      </div>\n    );\n  }\n\n  // Error state\n  if ((chartType === 'line' || chartType === 'volume') && error) {\n    return (\n      <div className=\"chart-container\" style={{ height: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#F44336' }}>\n        <p>Error: {error}. Unable to display historical data.</p>\n      </div>\n    );\n  }\n\n  // No data state\n  if ((chartType === 'line' || chartType === 'volume') && historicalData.length === 0 && !isLoading && !error) {\n    return (\n      <div className=\"chart-container\" style={{ height: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <p>No historical data available for this stock.</p>\n      </div>\n    );\n  }\n\n  // Render different chart based on selection\n  const renderSelectedChart = () => {\n    switch(chartType) {\n      case 'bar':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={chartData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis \n                domain={[\n                  (dataMin) => Math.floor(dataMin * 0.995),\n                  (dataMax) => Math.ceil(dataMax * 1.005)\n                ]}\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <Tooltip \n                formatter={(value) => [`$${value.toFixed(2)}`, 'Price']}\n              />\n              <Legend />\n              <Bar dataKey=\"price\" fill={mainColor} />\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'line':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart\n              data={historicalData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis \n                domain={['auto', 'auto']}\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <Tooltip \n                formatter={(value) => [`$${value.toFixed(2)}`, 'Price']} \n                labelFormatter={(label) => `Date: ${label}`}\n              />\n              <Legend />\n              <Line \n                type=\"monotone\" \n                dataKey=\"price\" \n                stroke={mainColor} \n                strokeWidth={2}\n                dot={{ r: 0 }}\n                activeDot={{ r: 6 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'volume':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <ComposedChart\n              data={historicalData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis \n                yAxisId=\"left\"\n                orientation=\"left\"\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <YAxis \n                yAxisId=\"right\"\n                orientation=\"right\"\n                domain={['auto', 'auto']}\n                tickFormatter={(value) => `${(value/1000000).toFixed(1)}M`}\n              />\n              <Tooltip \n                formatter={(value, name) => {\n                  return name === 'price' \n                    ? [`$${value.toFixed(2)}`, 'Price'] \n                    : [`${(value/1000000).toFixed(1)}M`, 'Volume'];\n                }}\n              />\n              <Legend />\n              <Line \n                yAxisId=\"left\"\n                type=\"monotone\" \n                dataKey=\"price\" \n                stroke={mainColor} \n                strokeWidth={2}\n                dot={false}\n              />\n              <Bar \n                yAxisId=\"right\"\n                dataKey=\"volume\" \n                fill=\"#8884d8\" \n                opacity={0.5} \n              />\n            </ComposedChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'comparison':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={comparisonData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis \n                tickFormatter={(value) => `${value}%`}\n                domain={[\n                  dataMin => Math.min(dataMin, -2),\n                  dataMax => Math.max(dataMax, 2)\n                ]}\n              />\n              <Tooltip \n                formatter={(value) => [`${value}%`, 'Performance']}\n              />\n              <Legend />\n              <Bar dataKey=\"performance\" fill=\"#8884d8\">\n                {\n                  comparisonData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))\n                }\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      \n      default:\n        return (\n          <div>Please select a chart type</div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"stock-chart\">\n      <div className=\"chart-selectors\">\n        {chartTypes.map((type) => (\n          <button\n            key={type.id}\n            className={`chart-type-btn ${chartType === type.id ? 'active' : ''}`}\n            onClick={() => setChartType(type.id)}\n          >\n            {type.label}\n          </button>\n        ))}\n      </div>\n      <div className=\"chart-container\" style={{ height: '400px' }}>\n        {!stockData || Object.keys(stockData).length === 0 ? (\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\n            <p>Please select a stock to display chart</p>\n          </div>\n        ) : (\n          renderSelectedChart()\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StockChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}