{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/stock-market-app/src/components/StockChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, LineChart, Line, ComposedChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockChart = ({\n  stockData\n}) => {\n  _s();\n  const [chartType, setChartType] = useState('bar');\n  const [historicalData, setHistoricalData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch historical data from backend API\n  useEffect(() => {\n    if (stockData && stockData['01. symbol']) {\n      setIsLoading(true);\n      setError(null);\n      const symbol = stockData['01. symbol'];\n      const period = '1mo'; // Default to 1 month\n      const interval = '1d'; // Default to daily data\n\n      fetch(`http://localhost:5001/api/stock/history?symbol=${symbol}&period=${period}&interval=${interval}`).then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch historical data');\n        }\n        return response.json();\n      }).then(data => {\n        if (data && data.data && Array.isArray(data.data)) {\n          setHistoricalData(data.data);\n        } else {\n          setHistoricalData([]);\n          setError('Invalid data format received');\n        }\n        setIsLoading(false);\n      }).catch(err => {\n        console.error('Error fetching historical data:', err);\n        setError(err.message);\n        setIsLoading(false);\n        // Fallback to generated data if API fails\n        setHistoricalData(generateHistoricalData());\n      });\n    }\n  }, [stockData]);\n\n  // Creating data for current day price levels\n  const prepareChartData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    const basePrice = parseFloat(stockData['05. price']);\n    const change = parseFloat(stockData['09. change'] || 0);\n\n    // Create daily price data for visualization\n    return [{\n      name: 'Open',\n      price: parseFloat(stockData['02. open'] || basePrice)\n    }, {\n      name: 'Low',\n      price: parseFloat(stockData['04. low'] || basePrice - Math.abs(change))\n    }, {\n      name: 'Current',\n      price: basePrice\n    }, {\n      name: 'High',\n      price: parseFloat(stockData['03. high'] || basePrice + Math.abs(change))\n    }];\n  };\n\n  // Generate mock historical data as fallback\n  const generateHistoricalData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    const currentPrice = parseFloat(stockData['05. price']);\n    const volatility = 0.02; // 2% daily volatility for simulation\n    const data = [];\n\n    // Start with a price 10% lower than current as baseline\n    let previousPrice = currentPrice * 0.9;\n\n    // Generate 30 days of data with actual dates\n    const today = new Date();\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n\n      // Format date as MM/DD\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`;\n\n      // Random price movement with slight upward bias\n      const change = previousPrice * volatility * (Math.random() - 0.45);\n      const price = previousPrice + change;\n      previousPrice = price;\n\n      // Generate random volume between 100,000 and 10,000,000\n      const volume = Math.floor(Math.random() * 9900000) + 100000;\n      data.push({\n        date: formattedDate,\n        price: parseFloat(price.toFixed(2)),\n        volume: volume\n      });\n    }\n    return data;\n  };\n\n  // Generate data for price movement composition (pie chart)\n  const generatePriceCompositionData = () => {\n    if (!stockData) return [];\n    const price = parseFloat(stockData['05. price'] || 0);\n    const open = parseFloat(stockData['02. open'] || 0);\n    const change = price - open;\n\n    // Components that make up the current price (simplified for demonstration)\n    return [{\n      name: 'Base Value',\n      value: open > 0 ? open : price * 0.9\n    }, {\n      name: 'Market Movement',\n      value: Math.abs(change)\n    }, {\n      name: 'Volatility',\n      value: price * 0.01\n    }];\n  };\n\n  // Generate data for price comparison with sector and index\n  const generateComparisonData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    const stockPrice = parseFloat(stockData['05. price']);\n    const stockChange = parseFloat(stockData['09. change'] || 0);\n    const stockPercentChange = stockChange / stockPrice * 100;\n\n    // Mock data for sector and market indices performance\n    const sectorChange = (Math.random() * 2 - 1) * 2; // Between -2% and 2%\n    const marketChange = (Math.random() * 1.5 - 0.5) * 1.5; // Between -1.5% and 1.5%\n\n    return [{\n      name: stockData['01. symbol'],\n      performance: parseFloat(stockPercentChange.toFixed(2)),\n      fill: stockPercentChange >= 0 ? '#4CAF50' : '#F44336'\n    }, {\n      name: 'Sector Avg',\n      performance: parseFloat(sectorChange.toFixed(2)),\n      fill: sectorChange >= 0 ? '#4CAF50' : '#F44336'\n    }, {\n      name: 'Market Index',\n      performance: parseFloat(marketChange.toFixed(2)),\n      fill: marketChange >= 0 ? '#4CAF50' : '#F44336'\n    }];\n  };\n  const chartData = prepareChartData();\n  const compositionData = generatePriceCompositionData();\n  const comparisonData = generateComparisonData();\n\n  // Determine if stock is up or down for color schemes\n  const isStockUp = parseFloat(stockData['09. change'] || 0) >= 0;\n  const mainColor = isStockUp ? '#4CAF50' : '#F44336';\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28'];\n\n  // Chart type options\n  const chartTypes = [{\n    id: 'bar',\n    label: 'Price Levels'\n  }, {\n    id: 'line',\n    label: 'Price History'\n  }, {\n    id: 'volume',\n    label: 'Volume Analysis'\n  }, {\n    id: 'comparison',\n    label: 'Performance Comparison'\n  }, {\n    id: 'pie',\n    label: 'Price Composition'\n  }];\n\n  // Loading state\n  if (chartType === 'line' && isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '400px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading historical data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Error state\n  if (chartType === 'line' && error && historicalData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '400px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error loading data: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render different chart based on selection\n  const renderSelectedChart = () => {\n    switch (chartType) {\n      case 'bar':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: chartData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: [dataMin => Math.floor(dataMin * 0.995), dataMax => Math.ceil(dataMax * 1.005)],\n              tickFormatter: value => `$${value.toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Price']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"price\",\n              fill: mainColor\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this);\n      case 'line':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: historicalData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: ['auto', 'auto'],\n              tickFormatter: value => `$${value.toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Price'],\n              labelFormatter: label => `Date: ${label}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"price\",\n              stroke: mainColor,\n              strokeWidth: 2,\n              dot: {\n                r: 0\n              },\n              activeDot: {\n                r: 6\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this);\n      case 'volume':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(ComposedChart, {\n            data: historicalData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              yAxisId: \"left\",\n              orientation: \"left\",\n              tickFormatter: value => `$${value.toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              yAxisId: \"right\",\n              orientation: \"right\",\n              domain: ['auto', 'auto'],\n              tickFormatter: value => `${(value / 1000000).toFixed(1)}M`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: (value, name) => {\n                return name === 'price' ? [`$${value.toFixed(2)}`, 'Price'] : [`${(value / 1000000).toFixed(1)}M`, 'Volume'];\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              yAxisId: \"left\",\n              type: \"monotone\",\n              dataKey: \"price\",\n              stroke: mainColor,\n              strokeWidth: 2,\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              yAxisId: \"right\",\n              dataKey: \"volume\",\n              fill: \"#8884d8\",\n              opacity: 0.5\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this);\n      case 'pie':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(PieChart, {\n            children: [/*#__PURE__*/_jsxDEV(Pie, {\n              data: compositionData,\n              cx: \"50%\",\n              cy: \"50%\",\n              innerRadius: 60,\n              outerRadius: 80,\n              fill: \"#8884d8\",\n              paddingAngle: 5,\n              dataKey: \"value\",\n              label: ({\n                name,\n                percent\n              }) => `${name}: ${(percent * 100).toFixed(0)}%`,\n              children: compositionData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: COLORS[index % COLORS.length]\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Amount']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this);\n      case 'comparison':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: comparisonData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            layout: \"vertical\",\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\",\n              horizontal: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              type: \"number\",\n              domain: [-5, 5],\n              tickFormatter: value => `${value}%`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              type: \"category\",\n              dataKey: \"name\",\n              width: 100\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`${value}%`, 'Performance']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"performance\",\n              radius: [0, 4, 4, 0],\n              label: {\n                position: 'right',\n                formatter: value => `${value}%`\n              },\n              children: comparisonData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: entry.fill\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a chart type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    style: {\n      height: '450px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Price Analysis - \", stockData['01. symbol']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-selector\",\n        children: chartTypes.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setChartType(type.id),\n          className: chartType === type.id ? 'active' : '',\n          style: {\n            backgroundColor: chartType === type.id ? '#007bff' : '#f8f9fa',\n            color: chartType === type.id ? 'white' : '#333',\n            padding: '5px 10px',\n            margin: '0 5px',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: type.label\n        }, type.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '360px',\n        marginTop: '15px'\n      },\n      children: chartData.length > 0 ? renderSelectedChart() : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No data available for chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n};\n_s(StockChart, \"Wk3fJ3J01Fbb1DJ2ugMneAqhOgg=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","LineChart","Line","ComposedChart","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","PieChart","Pie","Cell","jsxDEV","_jsxDEV","StockChart","stockData","_s","chartType","setChartType","historicalData","setHistoricalData","isLoading","setIsLoading","error","setError","symbol","period","interval","fetch","then","response","ok","Error","json","data","Array","isArray","catch","err","console","message","generateHistoricalData","prepareChartData","basePrice","parseFloat","change","name","price","Math","abs","currentPrice","volatility","previousPrice","today","Date","i","date","setDate","getDate","formattedDate","getMonth","random","volume","floor","push","toFixed","generatePriceCompositionData","open","value","generateComparisonData","stockPrice","stockChange","stockPercentChange","sectorChange","marketChange","performance","fill","chartData","compositionData","comparisonData","isStockUp","mainColor","COLORS","chartTypes","id","label","className","style","height","display","justifyContent","alignItems","children","fileName","_jsxFileName","lineNumber","columnNumber","length","renderSelectedChart","width","margin","top","right","left","bottom","strokeDasharray","dataKey","domain","dataMin","dataMax","ceil","tickFormatter","formatter","labelFormatter","type","stroke","strokeWidth","dot","r","activeDot","yAxisId","orientation","opacity","cx","cy","innerRadius","outerRadius","paddingAngle","percent","map","entry","index","layout","horizontal","radius","position","onClick","backgroundColor","color","padding","border","borderRadius","cursor","marginTop","_c","$RefreshReg$"],"sources":["/Users/pranav/stock-market-app/src/components/StockChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  BarChart, Bar, LineChart, Line, ComposedChart, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, \n  ResponsiveContainer, PieChart, Pie, Cell\n} from 'recharts';\n\nconst StockChart = ({ stockData }) => {\n  const [chartType, setChartType] = useState('bar');\n  const [historicalData, setHistoricalData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  // Fetch historical data from backend API\n  useEffect(() => {\n    if (stockData && stockData['01. symbol']) {\n      setIsLoading(true);\n      setError(null);\n      \n      const symbol = stockData['01. symbol'];\n      const period = '1mo'; // Default to 1 month\n      const interval = '1d'; // Default to daily data\n      \n      fetch(`http://localhost:5001/api/stock/history?symbol=${symbol}&period=${period}&interval=${interval}`)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Failed to fetch historical data');\n          }\n          return response.json();\n        })\n        .then(data => {\n          if (data && data.data && Array.isArray(data.data)) {\n            setHistoricalData(data.data);\n          } else {\n            setHistoricalData([]);\n            setError('Invalid data format received');\n          }\n          setIsLoading(false);\n        })\n        .catch(err => {\n          console.error('Error fetching historical data:', err);\n          setError(err.message);\n          setIsLoading(false);\n          // Fallback to generated data if API fails\n          setHistoricalData(generateHistoricalData());\n        });\n    }\n  }, [stockData]);\n  \n  // Creating data for current day price levels\n  const prepareChartData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n\n    const basePrice = parseFloat(stockData['05. price']);\n    const change = parseFloat(stockData['09. change'] || 0);\n    \n    // Create daily price data for visualization\n    return [\n      { name: 'Open', price: parseFloat(stockData['02. open'] || basePrice) },\n      { name: 'Low', price: parseFloat(stockData['04. low'] || (basePrice - Math.abs(change))) },\n      { name: 'Current', price: basePrice },\n      { name: 'High', price: parseFloat(stockData['03. high'] || (basePrice + Math.abs(change))) },\n    ];\n  };\n\n  // Generate mock historical data as fallback\n  const generateHistoricalData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    \n    const currentPrice = parseFloat(stockData['05. price']);\n    const volatility = 0.02; // 2% daily volatility for simulation\n    const data = [];\n    \n    // Start with a price 10% lower than current as baseline\n    let previousPrice = currentPrice * 0.9;\n    \n    // Generate 30 days of data with actual dates\n    const today = new Date();\n    \n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      \n      // Format date as MM/DD\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`;\n      \n      // Random price movement with slight upward bias\n      const change = previousPrice * volatility * (Math.random() - 0.45);\n      const price = previousPrice + change;\n      previousPrice = price;\n      \n      // Generate random volume between 100,000 and 10,000,000\n      const volume = Math.floor(Math.random() * 9900000) + 100000;\n      \n      data.push({\n        date: formattedDate,\n        price: parseFloat(price.toFixed(2)),\n        volume: volume\n      });\n    }\n    \n    return data;\n  };\n  \n  // Generate data for price movement composition (pie chart)\n  const generatePriceCompositionData = () => {\n    if (!stockData) return [];\n    \n    const price = parseFloat(stockData['05. price'] || 0);\n    const open = parseFloat(stockData['02. open'] || 0);\n    const change = price - open;\n    \n    // Components that make up the current price (simplified for demonstration)\n    return [\n      { name: 'Base Value', value: open > 0 ? open : price * 0.9 },\n      { name: 'Market Movement', value: Math.abs(change) },\n      { name: 'Volatility', value: price * 0.01 }\n    ];\n  };\n  \n  // Generate data for price comparison with sector and index\n  const generateComparisonData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    \n    const stockPrice = parseFloat(stockData['05. price']);\n    const stockChange = parseFloat(stockData['09. change'] || 0);\n    const stockPercentChange = (stockChange / stockPrice) * 100;\n    \n    // Mock data for sector and market indices performance\n    const sectorChange = (Math.random() * 2 - 1) * 2; // Between -2% and 2%\n    const marketChange = (Math.random() * 1.5 - 0.5) * 1.5; // Between -1.5% and 1.5%\n    \n    return [\n      {\n        name: stockData['01. symbol'],\n        performance: parseFloat(stockPercentChange.toFixed(2)),\n        fill: stockPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      },\n      {\n        name: 'Sector Avg',\n        performance: parseFloat(sectorChange.toFixed(2)),\n        fill: sectorChange >= 0 ? '#4CAF50' : '#F44336'\n      },\n      {\n        name: 'Market Index',\n        performance: parseFloat(marketChange.toFixed(2)),\n        fill: marketChange >= 0 ? '#4CAF50' : '#F44336'\n      }\n    ];\n  };\n\n  const chartData = prepareChartData();\n  const compositionData = generatePriceCompositionData();\n  const comparisonData = generateComparisonData();\n  \n  // Determine if stock is up or down for color schemes\n  const isStockUp = parseFloat(stockData['09. change'] || 0) >= 0;\n  const mainColor = isStockUp ? '#4CAF50' : '#F44336';\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28'];\n\n  // Chart type options\n  const chartTypes = [\n    { id: 'bar', label: 'Price Levels' },\n    { id: 'line', label: 'Price History' },\n    { id: 'volume', label: 'Volume Analysis' },\n    { id: 'comparison', label: 'Performance Comparison' },\n    { id: 'pie', label: 'Price Composition' },\n  ];\n\n  // Loading state\n  if (chartType === 'line' && isLoading) {\n    return (\n      <div className=\"chart-container\" style={{ height: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <p>Loading historical data...</p>\n      </div>\n    );\n  }\n\n  // Error state\n  if (chartType === 'line' && error && historicalData.length === 0) {\n    return (\n      <div className=\"chart-container\" style={{ height: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <p>Error loading data: {error}</p>\n      </div>\n    );\n  }\n\n  // Render different chart based on selection\n  const renderSelectedChart = () => {\n    switch(chartType) {\n      case 'bar':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={chartData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis \n                domain={[\n                  (dataMin) => Math.floor(dataMin * 0.995),\n                  (dataMax) => Math.ceil(dataMax * 1.005)\n                ]}\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <Tooltip \n                formatter={(value) => [`$${value.toFixed(2)}`, 'Price']}\n              />\n              <Legend />\n              <Bar dataKey=\"price\" fill={mainColor} />\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'line':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart\n              data={historicalData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis \n                domain={['auto', 'auto']}\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <Tooltip \n                formatter={(value) => [`$${value.toFixed(2)}`, 'Price']} \n                labelFormatter={(label) => `Date: ${label}`}\n              />\n              <Legend />\n              <Line \n                type=\"monotone\" \n                dataKey=\"price\" \n                stroke={mainColor} \n                strokeWidth={2}\n                dot={{ r: 0 }}\n                activeDot={{ r: 6 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'volume':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <ComposedChart\n              data={historicalData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis \n                yAxisId=\"left\"\n                orientation=\"left\"\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <YAxis \n                yAxisId=\"right\"\n                orientation=\"right\"\n                domain={['auto', 'auto']}\n                tickFormatter={(value) => `${(value/1000000).toFixed(1)}M`}\n              />\n              <Tooltip \n                formatter={(value, name) => {\n                  return name === 'price' \n                    ? [`$${value.toFixed(2)}`, 'Price'] \n                    : [`${(value/1000000).toFixed(1)}M`, 'Volume'];\n                }}\n              />\n              <Legend />\n              <Line \n                yAxisId=\"left\"\n                type=\"monotone\" \n                dataKey=\"price\" \n                stroke={mainColor} \n                strokeWidth={2}\n                dot={false}\n              />\n              <Bar \n                yAxisId=\"right\"\n                dataKey=\"volume\" \n                fill=\"#8884d8\" \n                opacity={0.5} \n              />\n            </ComposedChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'pie':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={compositionData}\n                cx=\"50%\"\n                cy=\"50%\"\n                innerRadius={60}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                paddingAngle={5}\n                dataKey=\"value\"\n                label={({name, percent}) => `${name}: ${(percent * 100).toFixed(0)}%`}\n              >\n                {compositionData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip formatter={(value) => [`$${value.toFixed(2)}`, 'Amount']} />\n              <Legend />\n            </PieChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'comparison':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={comparisonData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n              layout=\"vertical\"\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" horizontal={false} />\n              <XAxis \n                type=\"number\" \n                domain={[-5, 5]}\n                tickFormatter={(value) => `${value}%`}\n              />\n              <YAxis type=\"category\" dataKey=\"name\" width={100} />\n              <Tooltip formatter={(value) => [`${value}%`, 'Performance']} />\n              <Legend />\n              <Bar \n                dataKey=\"performance\" \n                radius={[0, 4, 4, 0]} \n                label={{ position: 'right', formatter: (value) => `${value}%` }}\n              >\n                {comparisonData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.fill} />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      \n      default:\n        return <p>Select a chart type</p>;\n    }\n  };\n\n  return (\n    <div className=\"card\" style={{ height: '450px' }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <h2>Price Analysis - {stockData['01. symbol']}</h2>\n        <div className=\"chart-selector\">\n          {chartTypes.map(type => (\n            <button\n              key={type.id}\n              onClick={() => setChartType(type.id)}\n              className={chartType === type.id ? 'active' : ''}\n              style={{\n                backgroundColor: chartType === type.id ? '#007bff' : '#f8f9fa',\n                color: chartType === type.id ? 'white' : '#333',\n                padding: '5px 10px',\n                margin: '0 5px',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n            >\n              {type.label}\n            </button>\n          ))}\n        </div>\n      </div>\n      \n      <div style={{ height: '360px', marginTop: '15px' }}>\n        {chartData.length > 0 ? (\n          renderSelectedChart()\n        ) : (\n          <div style={{ \n            height: '100%', \n            display: 'flex', \n            alignItems: 'center', \n            justifyContent: 'center' \n          }}>\n            <p>No data available for chart</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StockChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}