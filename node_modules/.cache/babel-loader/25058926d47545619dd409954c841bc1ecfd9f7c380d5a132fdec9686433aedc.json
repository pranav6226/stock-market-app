{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/Desktop/stock-market-app/src/components/TechnicalAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TechnicalAnalysis = ({\n  stockData\n}) => {\n  _s();\n  const [historicalData, setHistoricalData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [technicalIndicators, setTechnicalIndicators] = useState({});\n\n  // Fetch historical data for technical analysis\n  useEffect(() => {\n    if (stockData && stockData['01. symbol']) {\n      setIsLoading(true);\n      setError(null);\n      const symbol = stockData['01. symbol'];\n      // Get 3 months of data for better technical analysis\n      const period = '3mo';\n      const interval = '1d';\n      fetch(`http://localhost:5001/api/stock/history?symbol=${symbol}&period=${period}&interval=${interval}`).then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch historical data for technical analysis');\n        }\n        return response.json();\n      }).then(data => {\n        if (data && data.data && Array.isArray(data.data)) {\n          setHistoricalData(data.data);\n\n          // Calculate technical indicators\n          const indicators = calculateTechnicalIndicators(data.data, stockData);\n          setTechnicalIndicators(indicators);\n        } else {\n          setError('Invalid data format received');\n        }\n        setIsLoading(false);\n      }).catch(err => {\n        console.error('Error fetching historical data for technical analysis:', err);\n        setError(err.message);\n        setIsLoading(false);\n      });\n    }\n  }, [stockData]);\n\n  // Calculate technical indicators from historical data\n  const calculateTechnicalIndicators = (data, currentStockData) => {\n    if (!data || data.length < 14) {\n      return {\n        error: \"Insufficient data for analysis\"\n      };\n    }\n\n    // Make sure data is sorted by date (oldest first)\n    const sortedData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date));\n\n    // Extract prices for easier calculation\n    const prices = sortedData.map(item => parseFloat(item.price));\n    const volumes = sortedData.map(item => parseInt(item.volume));\n\n    // Get current price info\n    const currentPrice = parseFloat(currentStockData['05. price']);\n    const prevClose = parseFloat(currentStockData['08. previous close']);\n\n    // Calculate Simple Moving Averages\n    const sma20 = calculateSMA(prices, 20);\n    const sma50 = calculateSMA(prices, 50);\n    const sma200 = calculateSMA(prices, Math.min(200, prices.length));\n\n    // Calculate RSI (Relative Strength Index)\n    const rsi = calculateRSI(prices);\n\n    // Calculate MACD\n    const macd = calculateMACD(prices);\n\n    // Calculate Bollinger Bands\n    const bollingerBands = calculateBollingerBands(prices);\n\n    // Volume analysis\n    const averageVolume = volumes.slice(-10).reduce((sum, vol) => sum + vol, 0) / 10;\n    const currentVolume = parseInt(currentStockData['06. volume']);\n    const volumeRatio = currentVolume / averageVolume;\n\n    // Price momentum\n    const priceChange1Day = currentPrice - prevClose;\n    const priceChange5Day = currentPrice - prices[prices.length - 5];\n    const priceChange1Month = currentPrice - prices[0];\n\n    // Calculate trend strength\n    const trendStrength = calculateTrendStrength(prices);\n\n    // Analyze support and resistance\n    const supportResistance = analyzeSupportResistance(prices, currentPrice);\n    return {\n      sma: {\n        sma20: sma20.toFixed(2),\n        sma50: sma50.toFixed(2),\n        sma200: sma200.toFixed(2),\n        isBullish: currentPrice > sma20 && sma20 > sma50\n      },\n      rsi: {\n        value: rsi.toFixed(2),\n        isOverbought: rsi > 70,\n        isOversold: rsi < 30\n      },\n      macd: {\n        value: macd.macdLine.toFixed(2),\n        signal: macd.signalLine.toFixed(2),\n        histogram: macd.histogram.toFixed(2),\n        isBullish: macd.histogram > 0\n      },\n      bollingerBands: {\n        upper: bollingerBands.upper.toFixed(2),\n        middle: bollingerBands.middle.toFixed(2),\n        lower: bollingerBands.lower.toFixed(2),\n        width: ((bollingerBands.upper - bollingerBands.lower) / bollingerBands.middle * 100).toFixed(2),\n        isOutsideUpper: currentPrice > bollingerBands.upper,\n        isOutsideLower: currentPrice < bollingerBands.lower\n      },\n      volume: {\n        average: averageVolume.toFixed(0),\n        current: currentVolume,\n        ratio: volumeRatio.toFixed(2),\n        isHigh: volumeRatio > 1.5\n      },\n      priceChange: {\n        oneDay: priceChange1Day.toFixed(2),\n        oneDayPercent: (priceChange1Day / prevClose * 100).toFixed(2),\n        fiveDay: priceChange5Day.toFixed(2),\n        fiveDayPercent: (priceChange5Day / prices[prices.length - 5] * 100).toFixed(2),\n        oneMonth: priceChange1Month.toFixed(2),\n        oneMonthPercent: (priceChange1Month / prices[0] * 100).toFixed(2)\n      },\n      trend: {\n        strength: trendStrength.strength,\n        direction: trendStrength.direction\n      },\n      supportResistance: supportResistance\n    };\n  };\n\n  // Calculate Simple Moving Average\n  const calculateSMA = (prices, period) => {\n    if (prices.length < period) {\n      return prices[prices.length - 1] || 0;\n    }\n    const sum = prices.slice(-period).reduce((total, price) => total + price, 0);\n    return sum / period;\n  };\n\n  // Calculate RSI (Relative Strength Index)\n  const calculateRSI = (prices, period = 14) => {\n    if (prices.length < period + 1) {\n      return 50; // Neutral if not enough data\n    }\n    let gains = 0;\n    let losses = 0;\n\n    // Calculate initial average gain/loss\n    for (let i = 1; i <= period; i++) {\n      const change = prices[prices.length - period - 1 + i] - prices[prices.length - period - 1 + i - 1];\n      if (change >= 0) {\n        gains += change;\n      } else {\n        losses -= change;\n      }\n    }\n    let avgGain = gains / period;\n    let avgLoss = losses / period;\n\n    // Calculate RSI using Wilder's smoothing method\n    for (let i = period + 1; i < prices.length; i++) {\n      const change = prices[i] - prices[i - 1];\n      let currentGain = 0;\n      let currentLoss = 0;\n      if (change >= 0) {\n        currentGain = change;\n      } else {\n        currentLoss = -change;\n      }\n      avgGain = (avgGain * (period - 1) + currentGain) / period;\n      avgLoss = (avgLoss * (period - 1) + currentLoss) / period;\n    }\n    if (avgLoss === 0) {\n      return 100; // No losses means RSI = 100\n    }\n    const rs = avgGain / avgLoss;\n    return 100 - 100 / (1 + rs);\n  };\n\n  // Calculate MACD\n  const calculateMACD = prices => {\n    // Default periods: 12, 26, 9\n    const fastEMA = calculateEMA(prices, 12);\n    const slowEMA = calculateEMA(prices, 26);\n    const macdLine = fastEMA - slowEMA;\n\n    // Calculate signal line (9-day EMA of MACD line)\n    // For simplicity, we'll use a simplified approach\n    const signalLine = macdLine * 0.9 + calculateEMA(prices, 9) * 0.1;\n    const histogram = macdLine - signalLine;\n    return {\n      macdLine,\n      signalLine,\n      histogram\n    };\n  };\n\n  // Calculate Exponential Moving Average\n  const calculateEMA = (prices, period) => {\n    if (prices.length < period) {\n      return prices[prices.length - 1] || 0;\n    }\n    const sma = calculateSMA(prices.slice(0, period), period);\n    const multiplier = 2 / (period + 1);\n    let ema = sma;\n    for (let i = period; i < prices.length; i++) {\n      ema = (prices[i] - ema) * multiplier + ema;\n    }\n    return ema;\n  };\n\n  // Calculate Bollinger Bands\n  const calculateBollingerBands = (prices, period = 20, stdDev = 2) => {\n    if (prices.length < period) {\n      const price = prices[prices.length - 1] || 0;\n      return {\n        upper: price * 1.05,\n        middle: price,\n        lower: price * 0.95\n      };\n    }\n    const recentPrices = prices.slice(-period);\n    const middle = calculateSMA(recentPrices, period);\n\n    // Calculate standard deviation\n    const sqrDiff = recentPrices.map(price => {\n      const diff = price - middle;\n      return diff * diff;\n    });\n    const avgSquareDiff = sqrDiff.reduce((sum, val) => sum + val, 0) / period;\n    const standardDeviation = Math.sqrt(avgSquareDiff);\n    const upper = middle + standardDeviation * stdDev;\n    const lower = middle - standardDeviation * stdDev;\n    return {\n      upper,\n      middle,\n      lower\n    };\n  };\n\n  // Calculate trend strength\n  const calculateTrendStrength = prices => {\n    if (prices.length < 10) {\n      return {\n        strength: \"Unknown\",\n        direction: \"Neutral\"\n      };\n    }\n    const shortTerm = (prices[prices.length - 1] - prices[prices.length - 5]) / prices[prices.length - 5];\n    const mediumTerm = (prices[prices.length - 1] - prices[prices.length - 10]) / prices[prices.length - 10];\n    let direction = \"Neutral\";\n    if (shortTerm > 0 && mediumTerm > 0) {\n      direction = \"Bullish\";\n    } else if (shortTerm < 0 && mediumTerm < 0) {\n      direction = \"Bearish\";\n    } else if (shortTerm > 0 && mediumTerm < 0) {\n      direction = \"Recovering\";\n    } else if (shortTerm < 0 && mediumTerm > 0) {\n      direction = \"Weakening\";\n    }\n    let strength = \"Weak\";\n    const totalStrength = Math.abs(shortTerm) + Math.abs(mediumTerm);\n    if (totalStrength > 0.1) {\n      strength = \"Strong\";\n    } else if (totalStrength > 0.05) {\n      strength = \"Moderate\";\n    }\n    return {\n      strength,\n      direction\n    };\n  };\n\n  // Analyze support and resistance levels\n  const analyzeSupportResistance = (prices, currentPrice) => {\n    if (prices.length < 20) {\n      return {\n        support: currentPrice * 0.95,\n        resistance: currentPrice * 1.05\n      };\n    }\n\n    // Find recent highs and lows\n    const recentPrices = prices.slice(-30);\n    let potentialResistance = [];\n    let potentialSupport = [];\n\n    // Find price points that may be support or resistance\n    for (let i = 2; i < recentPrices.length - 2; i++) {\n      // Check if it's a local peak (resistance)\n      if (recentPrices[i] > recentPrices[i - 1] && recentPrices[i] > recentPrices[i - 2] && recentPrices[i] > recentPrices[i + 1] && recentPrices[i] > recentPrices[i + 2]) {\n        potentialResistance.push(recentPrices[i]);\n      }\n\n      // Check if it's a local trough (support)\n      if (recentPrices[i] < recentPrices[i - 1] && recentPrices[i] < recentPrices[i - 2] && recentPrices[i] < recentPrices[i + 1] && recentPrices[i] < recentPrices[i + 2]) {\n        potentialSupport.push(recentPrices[i]);\n      }\n    }\n\n    // Find closest levels\n    let resistance = Math.max(...recentPrices) * 1.02;\n    let support = Math.min(...recentPrices) * 0.98;\n    if (potentialResistance.length > 0) {\n      // Find the nearest resistance level above current price\n      const aboveResistances = potentialResistance.filter(price => price > currentPrice);\n      if (aboveResistances.length > 0) {\n        resistance = Math.min(...aboveResistances);\n      }\n    }\n    if (potentialSupport.length > 0) {\n      // Find the nearest support level below current price\n      const belowSupports = potentialSupport.filter(price => price < currentPrice);\n      if (belowSupports.length > 0) {\n        support = Math.max(...belowSupports);\n      }\n    }\n    return {\n      support: parseFloat(support.toFixed(2)),\n      resistance: parseFloat(resistance.toFixed(2))\n    };\n  };\n\n  // Calculate recommendation based on technical indicators\n  const calculateRecommendation = () => {\n    if (isLoading || error || !technicalIndicators.sma) {\n      return {\n        recommendation: \"Hold\",\n        signals: [],\n        color: \"#f0ad4e\"\n      };\n    }\n    const price = parseFloat(stockData['05. price'] || 0);\n    const indicators = technicalIndicators;\n    let score = 0;\n    let signals = [];\n\n    // SMA analysis\n    if (indicators.sma) {\n      const sma20 = parseFloat(indicators.sma.sma20);\n      const sma50 = parseFloat(indicators.sma.sma50);\n      const sma200 = parseFloat(indicators.sma.sma200);\n      if (price > sma20 && price > sma50 && price > sma200) {\n        score += 2;\n        signals.push(\"Price is above all major moving averages (strongly bullish)\");\n      } else if (price > sma20 && price > sma50) {\n        score += 1;\n        signals.push(\"Price is above short-term moving averages (bullish)\");\n      } else if (price < sma20 && price < sma50 && price < sma200) {\n        score -= 2;\n        signals.push(\"Price is below all major moving averages (strongly bearish)\");\n      } else if (price < sma20 && price < sma50) {\n        score -= 1;\n        signals.push(\"Price is below short-term moving averages (bearish)\");\n      }\n\n      // Golden cross / Death cross\n      if (sma20 > sma50 && sma20 - sma50 < sma20 * 0.01) {\n        score += 2;\n        signals.push(\"Recent golden cross detected (bullish)\");\n      } else if (sma20 < sma50 && sma50 - sma20 < sma50 * 0.01) {\n        score -= 2;\n        signals.push(\"Recent death cross detected (bearish)\");\n      }\n    }\n\n    // RSI analysis\n    if (indicators.rsi) {\n      const rsi = parseFloat(indicators.rsi.value);\n      if (rsi > 70) {\n        score -= 1.5;\n        signals.push(`RSI is overbought at ${rsi} (bearish)`);\n      } else if (rsi < 30) {\n        score += 1.5;\n        signals.push(`RSI is oversold at ${rsi} (bullish)`);\n      } else if (rsi > 60) {\n        score += 0.5;\n        signals.push(`RSI shows strong momentum at ${rsi} (bullish)`);\n      } else if (rsi < 40) {\n        score -= 0.5;\n        signals.push(`RSI shows weak momentum at ${rsi} (bearish)`);\n      }\n    }\n\n    // MACD analysis\n    if (indicators.macd) {\n      if (indicators.macd.isBullish) {\n        score += 1;\n        signals.push(\"MACD histogram is positive (bullish)\");\n      } else {\n        score -= 1;\n        signals.push(\"MACD histogram is negative (bearish)\");\n      }\n    }\n\n    // Bollinger Bands analysis\n    if (indicators.bollingerBands) {\n      if (indicators.bollingerBands.isOutsideUpper) {\n        score -= 1;\n        signals.push(\"Price is above upper Bollinger Band (potential reversal or strong uptrend)\");\n      } else if (indicators.bollingerBands.isOutsideLower) {\n        score += 1;\n        signals.push(\"Price is below lower Bollinger Band (potential reversal or strong downtrend)\");\n      }\n\n      // Check Bollinger Band width for potential breakout\n      const bbWidth = parseFloat(indicators.bollingerBands.width);\n      if (bbWidth < 2) {\n        signals.push(\"Tight Bollinger Bands suggest potential breakout soon\");\n      }\n    }\n\n    // Volume analysis\n    if (indicators.volume && indicators.volume.isHigh) {\n      const volumeRatio = parseFloat(indicators.volume.ratio);\n      if (indicators.priceChange && parseFloat(indicators.priceChange.oneDay) > 0) {\n        score += 1;\n        signals.push(`High volume (${volumeRatio}x avg) with price increase (bullish)`);\n      } else if (indicators.priceChange && parseFloat(indicators.priceChange.oneDay) < 0) {\n        score -= 1;\n        signals.push(`High volume (${volumeRatio}x avg) with price decrease (bearish)`);\n      }\n    }\n\n    // Trend analysis\n    if (indicators.trend) {\n      if (indicators.trend.direction === \"Bullish\" && indicators.trend.strength === \"Strong\") {\n        score += 1.5;\n        signals.push(\"Strong bullish trend detected\");\n      } else if (indicators.trend.direction === \"Bearish\" && indicators.trend.strength === \"Strong\") {\n        score -= 1.5;\n        signals.push(\"Strong bearish trend detected\");\n      } else if (indicators.trend.direction === \"Recovering\") {\n        score += 0.5;\n        signals.push(\"Recovering trend detected (potential reversal)\");\n      }\n    }\n\n    // Support/Resistance analysis\n    if (indicators.supportResistance) {\n      const support = indicators.supportResistance.support;\n      const resistance = indicators.supportResistance.resistance;\n      const nearSupportPercent = (price - support) / price * 100;\n      const nearResistancePercent = (resistance - price) / price * 100;\n      if (nearSupportPercent < 1) {\n        score += 0.5;\n        signals.push(`Price is near support level at $${support} (potential bounce)`);\n      } else if (nearResistancePercent < 1) {\n        score -= 0.5;\n        signals.push(`Price is near resistance level at $${resistance} (potential rejection)`);\n      }\n    }\n\n    // Determine recommendation\n    let recommendation = \"Hold\";\n    let color = \"#f0ad4e\"; // Yellow/orange for hold\n\n    if (score >= 3) {\n      recommendation = \"Strong Buy\";\n      color = \"#5cb85c\"; // Green\n    } else if (score > 1) {\n      recommendation = \"Buy\";\n      color = \"#5bc0de\"; // Light blue\n    } else if (score < -2) {\n      recommendation = \"Strong Sell\";\n      color = \"#d9534f\"; // Red\n    } else if (score < 0) {\n      recommendation = \"Sell\";\n      color = \"#f0605e\"; // Light red\n    }\n    return {\n      recommendation,\n      signals,\n      color\n    };\n  };\n  const {\n    recommendation,\n    signals,\n    color\n  } = calculateRecommendation();\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Technical Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          padding: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading technical indicators...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Technical Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: '#F44336',\n          textAlign: 'center',\n          padding: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Error: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Technical Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recommendation-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recommendation\",\n        style: {\n          backgroundColor: color,\n          padding: '15px',\n          borderRadius: '5px',\n          color: 'white',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          fontSize: '1.2rem',\n          marginBottom: '15px'\n        },\n        children: recommendation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"indicators-summary\",\n        children: [technicalIndicators.sma && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"indicator-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Moving Averages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"SMA 20: $\", technicalIndicators.sma.sma20]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"SMA 50: $\", technicalIndicators.sma.sma50]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"SMA 200: $\", technicalIndicators.sma.sma200]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 13\n        }, this), technicalIndicators.rsi && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"indicator-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Momentum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"RSI (14): \", technicalIndicators.rsi.value, technicalIndicators.rsi.isOverbought && \" (Overbought)\", technicalIndicators.rsi.isOversold && \" (Oversold)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 17\n            }, this), technicalIndicators.macd && /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"MACD: \", technicalIndicators.macd.histogram > 0 ? \"Bullish\" : \"Bearish\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 13\n        }, this), technicalIndicators.supportResistance && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"indicator-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Support/Resistance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Support: $\", technicalIndicators.supportResistance.support]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Resistance: $\", technicalIndicators.supportResistance.resistance]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Analysis:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"signals-list\",\n        children: signals.map((signal, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: signal\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"disclaimer\",\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"Disclaimer: This analysis is based on technical indicators only and should not be the sole basis for investment decisions.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 5\n  }, this);\n};\n_s(TechnicalAnalysis, \"clK6Qge7GEW6UTWtxsl38ar5uns=\");\n_c = TechnicalAnalysis;\nexport default TechnicalAnalysis;\nvar _c;\n$RefreshReg$(_c, \"TechnicalAnalysis\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TechnicalAnalysis","stockData","_s","historicalData","setHistoricalData","isLoading","setIsLoading","error","setError","technicalIndicators","setTechnicalIndicators","symbol","period","interval","fetch","then","response","ok","Error","json","data","Array","isArray","indicators","calculateTechnicalIndicators","catch","err","console","message","currentStockData","length","sortedData","sort","a","b","Date","date","prices","map","item","parseFloat","price","volumes","parseInt","volume","currentPrice","prevClose","sma20","calculateSMA","sma50","sma200","Math","min","rsi","calculateRSI","macd","calculateMACD","bollingerBands","calculateBollingerBands","averageVolume","slice","reduce","sum","vol","currentVolume","volumeRatio","priceChange1Day","priceChange5Day","priceChange1Month","trendStrength","calculateTrendStrength","supportResistance","analyzeSupportResistance","sma","toFixed","isBullish","value","isOverbought","isOversold","macdLine","signal","signalLine","histogram","upper","middle","lower","width","isOutsideUpper","isOutsideLower","average","current","ratio","isHigh","priceChange","oneDay","oneDayPercent","fiveDay","fiveDayPercent","oneMonth","oneMonthPercent","trend","strength","direction","total","gains","losses","i","change","avgGain","avgLoss","currentGain","currentLoss","rs","fastEMA","calculateEMA","slowEMA","multiplier","ema","stdDev","recentPrices","sqrDiff","diff","avgSquareDiff","val","standardDeviation","sqrt","shortTerm","mediumTerm","totalStrength","abs","support","resistance","potentialResistance","potentialSupport","push","max","aboveResistances","filter","belowSupports","calculateRecommendation","recommendation","signals","color","score","bbWidth","nearSupportPercent","nearResistancePercent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","padding","backgroundColor","borderRadius","fontWeight","fontSize","marginBottom","index","_c","$RefreshReg$"],"sources":["/Users/pranav/Desktop/stock-market-app/src/components/TechnicalAnalysis.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TechnicalAnalysis = ({ stockData }) => {\n  const [historicalData, setHistoricalData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [technicalIndicators, setTechnicalIndicators] = useState({});\n\n  // Fetch historical data for technical analysis\n  useEffect(() => {\n    if (stockData && stockData['01. symbol']) {\n      setIsLoading(true);\n      setError(null);\n      \n      const symbol = stockData['01. symbol'];\n      // Get 3 months of data for better technical analysis\n      const period = '3mo';\n      const interval = '1d';\n      \n      fetch(`http://localhost:5001/api/stock/history?symbol=${symbol}&period=${period}&interval=${interval}`)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Failed to fetch historical data for technical analysis');\n          }\n          return response.json();\n        })\n        .then(data => {\n          if (data && data.data && Array.isArray(data.data)) {\n            setHistoricalData(data.data);\n            \n            // Calculate technical indicators\n            const indicators = calculateTechnicalIndicators(data.data, stockData);\n            setTechnicalIndicators(indicators);\n          } else {\n            setError('Invalid data format received');\n          }\n          setIsLoading(false);\n        })\n        .catch(err => {\n          console.error('Error fetching historical data for technical analysis:', err);\n          setError(err.message);\n          setIsLoading(false);\n        });\n    }\n  }, [stockData]);\n\n  // Calculate technical indicators from historical data\n  const calculateTechnicalIndicators = (data, currentStockData) => {\n    if (!data || data.length < 14) {\n      return { error: \"Insufficient data for analysis\" };\n    }\n\n    // Make sure data is sorted by date (oldest first)\n    const sortedData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date));\n    \n    // Extract prices for easier calculation\n    const prices = sortedData.map(item => parseFloat(item.price));\n    const volumes = sortedData.map(item => parseInt(item.volume));\n    \n    // Get current price info\n    const currentPrice = parseFloat(currentStockData['05. price']);\n    const prevClose = parseFloat(currentStockData['08. previous close']);\n    \n    // Calculate Simple Moving Averages\n    const sma20 = calculateSMA(prices, 20);\n    const sma50 = calculateSMA(prices, 50);\n    const sma200 = calculateSMA(prices, Math.min(200, prices.length));\n    \n    // Calculate RSI (Relative Strength Index)\n    const rsi = calculateRSI(prices);\n    \n    // Calculate MACD\n    const macd = calculateMACD(prices);\n    \n    // Calculate Bollinger Bands\n    const bollingerBands = calculateBollingerBands(prices);\n    \n    // Volume analysis\n    const averageVolume = volumes.slice(-10).reduce((sum, vol) => sum + vol, 0) / 10;\n    const currentVolume = parseInt(currentStockData['06. volume']);\n    const volumeRatio = currentVolume / averageVolume;\n    \n    // Price momentum\n    const priceChange1Day = currentPrice - prevClose;\n    const priceChange5Day = currentPrice - prices[prices.length - 5];\n    const priceChange1Month = currentPrice - prices[0];\n    \n    // Calculate trend strength\n    const trendStrength = calculateTrendStrength(prices);\n    \n    // Analyze support and resistance\n    const supportResistance = analyzeSupportResistance(prices, currentPrice);\n    \n    return {\n      sma: { \n        sma20: sma20.toFixed(2), \n        sma50: sma50.toFixed(2), \n        sma200: sma200.toFixed(2),\n        isBullish: currentPrice > sma20 && sma20 > sma50\n      },\n      rsi: {\n        value: rsi.toFixed(2),\n        isOverbought: rsi > 70,\n        isOversold: rsi < 30\n      },\n      macd: {\n        value: macd.macdLine.toFixed(2),\n        signal: macd.signalLine.toFixed(2),\n        histogram: macd.histogram.toFixed(2),\n        isBullish: macd.histogram > 0\n      },\n      bollingerBands: {\n        upper: bollingerBands.upper.toFixed(2),\n        middle: bollingerBands.middle.toFixed(2),\n        lower: bollingerBands.lower.toFixed(2),\n        width: ((bollingerBands.upper - bollingerBands.lower) / bollingerBands.middle * 100).toFixed(2),\n        isOutsideUpper: currentPrice > bollingerBands.upper,\n        isOutsideLower: currentPrice < bollingerBands.lower\n      },\n      volume: {\n        average: averageVolume.toFixed(0),\n        current: currentVolume,\n        ratio: volumeRatio.toFixed(2),\n        isHigh: volumeRatio > 1.5\n      },\n      priceChange: {\n        oneDay: priceChange1Day.toFixed(2),\n        oneDayPercent: (priceChange1Day / prevClose * 100).toFixed(2),\n        fiveDay: priceChange5Day.toFixed(2),\n        fiveDayPercent: (priceChange5Day / prices[prices.length - 5] * 100).toFixed(2),\n        oneMonth: priceChange1Month.toFixed(2),\n        oneMonthPercent: (priceChange1Month / prices[0] * 100).toFixed(2)\n      },\n      trend: {\n        strength: trendStrength.strength,\n        direction: trendStrength.direction\n      },\n      supportResistance: supportResistance\n    };\n  };\n\n  // Calculate Simple Moving Average\n  const calculateSMA = (prices, period) => {\n    if (prices.length < period) {\n      return prices[prices.length - 1] || 0;\n    }\n    \n    const sum = prices.slice(-period).reduce((total, price) => total + price, 0);\n    return sum / period;\n  };\n\n  // Calculate RSI (Relative Strength Index)\n  const calculateRSI = (prices, period = 14) => {\n    if (prices.length < period + 1) {\n      return 50; // Neutral if not enough data\n    }\n    \n    let gains = 0;\n    let losses = 0;\n    \n    // Calculate initial average gain/loss\n    for (let i = 1; i <= period; i++) {\n      const change = prices[prices.length - period - 1 + i] - prices[prices.length - period - 1 + i - 1];\n      if (change >= 0) {\n        gains += change;\n      } else {\n        losses -= change;\n      }\n    }\n    \n    let avgGain = gains / period;\n    let avgLoss = losses / period;\n    \n    // Calculate RSI using Wilder's smoothing method\n    for (let i = period + 1; i < prices.length; i++) {\n      const change = prices[i] - prices[i - 1];\n      let currentGain = 0;\n      let currentLoss = 0;\n      \n      if (change >= 0) {\n        currentGain = change;\n      } else {\n        currentLoss = -change;\n      }\n      \n      avgGain = (avgGain * (period - 1) + currentGain) / period;\n      avgLoss = (avgLoss * (period - 1) + currentLoss) / period;\n    }\n    \n    if (avgLoss === 0) {\n      return 100; // No losses means RSI = 100\n    }\n    \n    const rs = avgGain / avgLoss;\n    return 100 - (100 / (1 + rs));\n  };\n\n  // Calculate MACD\n  const calculateMACD = (prices) => {\n    // Default periods: 12, 26, 9\n    const fastEMA = calculateEMA(prices, 12);\n    const slowEMA = calculateEMA(prices, 26);\n    const macdLine = fastEMA - slowEMA;\n    \n    // Calculate signal line (9-day EMA of MACD line)\n    // For simplicity, we'll use a simplified approach\n    const signalLine = macdLine * 0.9 + calculateEMA(prices, 9) * 0.1;\n    const histogram = macdLine - signalLine;\n    \n    return { macdLine, signalLine, histogram };\n  };\n\n  // Calculate Exponential Moving Average\n  const calculateEMA = (prices, period) => {\n    if (prices.length < period) {\n      return prices[prices.length - 1] || 0;\n    }\n    \n    const sma = calculateSMA(prices.slice(0, period), period);\n    const multiplier = 2 / (period + 1);\n    \n    let ema = sma;\n    for (let i = period; i < prices.length; i++) {\n      ema = (prices[i] - ema) * multiplier + ema;\n    }\n    \n    return ema;\n  };\n\n  // Calculate Bollinger Bands\n  const calculateBollingerBands = (prices, period = 20, stdDev = 2) => {\n    if (prices.length < period) {\n      const price = prices[prices.length - 1] || 0;\n      return { upper: price * 1.05, middle: price, lower: price * 0.95 };\n    }\n    \n    const recentPrices = prices.slice(-period);\n    const middle = calculateSMA(recentPrices, period);\n    \n    // Calculate standard deviation\n    const sqrDiff = recentPrices.map(price => {\n      const diff = price - middle;\n      return diff * diff;\n    });\n    \n    const avgSquareDiff = sqrDiff.reduce((sum, val) => sum + val, 0) / period;\n    const standardDeviation = Math.sqrt(avgSquareDiff);\n    \n    const upper = middle + (standardDeviation * stdDev);\n    const lower = middle - (standardDeviation * stdDev);\n    \n    return { upper, middle, lower };\n  };\n\n  // Calculate trend strength\n  const calculateTrendStrength = (prices) => {\n    if (prices.length < 10) {\n      return { strength: \"Unknown\", direction: \"Neutral\" };\n    }\n    \n    const shortTerm = (prices[prices.length - 1] - prices[prices.length - 5]) / prices[prices.length - 5];\n    const mediumTerm = (prices[prices.length - 1] - prices[prices.length - 10]) / prices[prices.length - 10];\n    \n    let direction = \"Neutral\";\n    if (shortTerm > 0 && mediumTerm > 0) {\n      direction = \"Bullish\";\n    } else if (shortTerm < 0 && mediumTerm < 0) {\n      direction = \"Bearish\";\n    } else if (shortTerm > 0 && mediumTerm < 0) {\n      direction = \"Recovering\";\n    } else if (shortTerm < 0 && mediumTerm > 0) {\n      direction = \"Weakening\";\n    }\n    \n    let strength = \"Weak\";\n    const totalStrength = Math.abs(shortTerm) + Math.abs(mediumTerm);\n    if (totalStrength > 0.1) {\n      strength = \"Strong\";\n    } else if (totalStrength > 0.05) {\n      strength = \"Moderate\";\n    }\n    \n    return { strength, direction };\n  };\n\n  // Analyze support and resistance levels\n  const analyzeSupportResistance = (prices, currentPrice) => {\n    if (prices.length < 20) {\n      return { support: currentPrice * 0.95, resistance: currentPrice * 1.05 };\n    }\n    \n    // Find recent highs and lows\n    const recentPrices = prices.slice(-30);\n    let potentialResistance = [];\n    let potentialSupport = [];\n    \n    // Find price points that may be support or resistance\n    for (let i = 2; i < recentPrices.length - 2; i++) {\n      // Check if it's a local peak (resistance)\n      if (recentPrices[i] > recentPrices[i-1] && \n          recentPrices[i] > recentPrices[i-2] && \n          recentPrices[i] > recentPrices[i+1] && \n          recentPrices[i] > recentPrices[i+2]) {\n        potentialResistance.push(recentPrices[i]);\n      }\n      \n      // Check if it's a local trough (support)\n      if (recentPrices[i] < recentPrices[i-1] && \n          recentPrices[i] < recentPrices[i-2] && \n          recentPrices[i] < recentPrices[i+1] && \n          recentPrices[i] < recentPrices[i+2]) {\n        potentialSupport.push(recentPrices[i]);\n      }\n    }\n    \n    // Find closest levels\n    let resistance = Math.max(...recentPrices) * 1.02;\n    let support = Math.min(...recentPrices) * 0.98;\n    \n    if (potentialResistance.length > 0) {\n      // Find the nearest resistance level above current price\n      const aboveResistances = potentialResistance.filter(price => price > currentPrice);\n      if (aboveResistances.length > 0) {\n        resistance = Math.min(...aboveResistances);\n      }\n    }\n    \n    if (potentialSupport.length > 0) {\n      // Find the nearest support level below current price\n      const belowSupports = potentialSupport.filter(price => price < currentPrice);\n      if (belowSupports.length > 0) {\n        support = Math.max(...belowSupports);\n      }\n    }\n    \n    return { support: parseFloat(support.toFixed(2)), resistance: parseFloat(resistance.toFixed(2)) };\n  };\n\n  // Calculate recommendation based on technical indicators\n  const calculateRecommendation = () => {\n    if (isLoading || error || !technicalIndicators.sma) {\n      return { recommendation: \"Hold\", signals: [], color: \"#f0ad4e\" };\n    }\n    \n    const price = parseFloat(stockData['05. price'] || 0);\n    const indicators = technicalIndicators;\n    \n    let score = 0;\n    let signals = [];\n    \n    // SMA analysis\n    if (indicators.sma) {\n      const sma20 = parseFloat(indicators.sma.sma20);\n      const sma50 = parseFloat(indicators.sma.sma50);\n      const sma200 = parseFloat(indicators.sma.sma200);\n      \n      if (price > sma20 && price > sma50 && price > sma200) {\n        score += 2;\n        signals.push(\"Price is above all major moving averages (strongly bullish)\");\n      } else if (price > sma20 && price > sma50) {\n        score += 1;\n        signals.push(\"Price is above short-term moving averages (bullish)\");\n      } else if (price < sma20 && price < sma50 && price < sma200) {\n        score -= 2;\n        signals.push(\"Price is below all major moving averages (strongly bearish)\");\n      } else if (price < sma20 && price < sma50) {\n        score -= 1;\n        signals.push(\"Price is below short-term moving averages (bearish)\");\n      }\n      \n      // Golden cross / Death cross\n      if (sma20 > sma50 && sma20 - sma50 < sma20 * 0.01) {\n        score += 2;\n        signals.push(\"Recent golden cross detected (bullish)\");\n      } else if (sma20 < sma50 && sma50 - sma20 < sma50 * 0.01) {\n        score -= 2;\n        signals.push(\"Recent death cross detected (bearish)\");\n      }\n    }\n    \n    // RSI analysis\n    if (indicators.rsi) {\n      const rsi = parseFloat(indicators.rsi.value);\n      \n      if (rsi > 70) {\n        score -= 1.5;\n        signals.push(`RSI is overbought at ${rsi} (bearish)`);\n      } else if (rsi < 30) {\n        score += 1.5;\n        signals.push(`RSI is oversold at ${rsi} (bullish)`);\n      } else if (rsi > 60) {\n        score += 0.5;\n        signals.push(`RSI shows strong momentum at ${rsi} (bullish)`);\n      } else if (rsi < 40) {\n        score -= 0.5;\n        signals.push(`RSI shows weak momentum at ${rsi} (bearish)`);\n      }\n    }\n    \n    // MACD analysis\n    if (indicators.macd) {\n      if (indicators.macd.isBullish) {\n        score += 1;\n        signals.push(\"MACD histogram is positive (bullish)\");\n      } else {\n        score -= 1;\n        signals.push(\"MACD histogram is negative (bearish)\");\n      }\n    }\n    \n    // Bollinger Bands analysis\n    if (indicators.bollingerBands) {\n      if (indicators.bollingerBands.isOutsideUpper) {\n        score -= 1;\n        signals.push(\"Price is above upper Bollinger Band (potential reversal or strong uptrend)\");\n      } else if (indicators.bollingerBands.isOutsideLower) {\n        score += 1;\n        signals.push(\"Price is below lower Bollinger Band (potential reversal or strong downtrend)\");\n      }\n      \n      // Check Bollinger Band width for potential breakout\n      const bbWidth = parseFloat(indicators.bollingerBands.width);\n      if (bbWidth < 2) {\n        signals.push(\"Tight Bollinger Bands suggest potential breakout soon\");\n      }\n    }\n    \n    // Volume analysis\n    if (indicators.volume && indicators.volume.isHigh) {\n      const volumeRatio = parseFloat(indicators.volume.ratio);\n      if (indicators.priceChange && parseFloat(indicators.priceChange.oneDay) > 0) {\n        score += 1;\n        signals.push(`High volume (${volumeRatio}x avg) with price increase (bullish)`);\n      } else if (indicators.priceChange && parseFloat(indicators.priceChange.oneDay) < 0) {\n        score -= 1;\n        signals.push(`High volume (${volumeRatio}x avg) with price decrease (bearish)`);\n      }\n    }\n    \n    // Trend analysis\n    if (indicators.trend) {\n      if (indicators.trend.direction === \"Bullish\" && indicators.trend.strength === \"Strong\") {\n        score += 1.5;\n        signals.push(\"Strong bullish trend detected\");\n      } else if (indicators.trend.direction === \"Bearish\" && indicators.trend.strength === \"Strong\") {\n        score -= 1.5;\n        signals.push(\"Strong bearish trend detected\");\n      } else if (indicators.trend.direction === \"Recovering\") {\n        score += 0.5;\n        signals.push(\"Recovering trend detected (potential reversal)\");\n      }\n    }\n    \n    // Support/Resistance analysis\n    if (indicators.supportResistance) {\n      const support = indicators.supportResistance.support;\n      const resistance = indicators.supportResistance.resistance;\n      const nearSupportPercent = ((price - support) / price) * 100;\n      const nearResistancePercent = ((resistance - price) / price) * 100;\n      \n      if (nearSupportPercent < 1) {\n        score += 0.5;\n        signals.push(`Price is near support level at $${support} (potential bounce)`);\n      } else if (nearResistancePercent < 1) {\n        score -= 0.5;\n        signals.push(`Price is near resistance level at $${resistance} (potential rejection)`);\n      }\n    }\n    \n    // Determine recommendation\n    let recommendation = \"Hold\";\n    let color = \"#f0ad4e\"; // Yellow/orange for hold\n    \n    if (score >= 3) {\n      recommendation = \"Strong Buy\";\n      color = \"#5cb85c\"; // Green\n    } else if (score > 1) {\n      recommendation = \"Buy\";\n      color = \"#5bc0de\"; // Light blue\n    } else if (score < -2) {\n      recommendation = \"Strong Sell\";\n      color = \"#d9534f\"; // Red\n    } else if (score < 0) {\n      recommendation = \"Sell\";\n      color = \"#f0605e\"; // Light red\n    }\n    \n    return { recommendation, signals, color };\n  };\n\n  const { recommendation, signals, color } = calculateRecommendation();\n\n  if (isLoading) {\n    return (\n      <div className=\"card\">\n        <h2>Technical Analysis</h2>\n        <div style={{ textAlign: 'center', padding: '20px' }}>\n          <p>Loading technical indicators...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"card\">\n        <h2>Technical Analysis</h2>\n        <div style={{ color: '#F44336', textAlign: 'center', padding: '20px' }}>\n          <p>Error: {error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card\">\n      <h2>Technical Analysis</h2>\n      \n      <div className=\"recommendation-container\">\n        <div \n          className=\"recommendation\" \n          style={{ \n            backgroundColor: color,\n            padding: '15px',\n            borderRadius: '5px',\n            color: 'white',\n            fontWeight: 'bold',\n            textAlign: 'center',\n            fontSize: '1.2rem',\n            marginBottom: '15px'\n          }}\n        >\n          {recommendation}\n        </div>\n        \n        <div className=\"indicators-summary\">\n          {technicalIndicators.sma && (\n            <div className=\"indicator-group\">\n              <h3>Moving Averages</h3>\n              <ul>\n                <li>SMA 20: ${technicalIndicators.sma.sma20}</li>\n                <li>SMA 50: ${technicalIndicators.sma.sma50}</li>\n                <li>SMA 200: ${technicalIndicators.sma.sma200}</li>\n              </ul>\n            </div>\n          )}\n          \n          {technicalIndicators.rsi && (\n            <div className=\"indicator-group\">\n              <h3>Momentum</h3>\n              <ul>\n                <li>RSI (14): {technicalIndicators.rsi.value} \n                  {technicalIndicators.rsi.isOverbought && \" (Overbought)\"}\n                  {technicalIndicators.rsi.isOversold && \" (Oversold)\"}\n                </li>\n                {technicalIndicators.macd && (\n                  <li>MACD: {technicalIndicators.macd.histogram > 0 ? \"Bullish\" : \"Bearish\"}</li>\n                )}\n              </ul>\n            </div>\n          )}\n          \n          {technicalIndicators.supportResistance && (\n            <div className=\"indicator-group\">\n              <h3>Support/Resistance</h3>\n              <ul>\n                <li>Support: ${technicalIndicators.supportResistance.support}</li>\n                <li>Resistance: ${technicalIndicators.supportResistance.resistance}</li>\n              </ul>\n            </div>\n          )}\n        </div>\n        \n        <h3>Analysis:</h3>\n        <ul className=\"signals-list\">\n          {signals.map((signal, index) => (\n            <li key={index}>{signal}</li>\n          ))}\n        </ul>\n        \n        <div className=\"disclaimer\">\n          <small>\n            <em>Disclaimer: This analysis is based on technical indicators only and should not be the sole basis for investment decisions.</em>\n          </small>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TechnicalAnalysis; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAElE;EACAC,SAAS,CAAC,MAAM;IACd,IAAII,SAAS,IAAIA,SAAS,CAAC,YAAY,CAAC,EAAE;MACxCK,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAMG,MAAM,GAAGV,SAAS,CAAC,YAAY,CAAC;MACtC;MACA,MAAMW,MAAM,GAAG,KAAK;MACpB,MAAMC,QAAQ,GAAG,IAAI;MAErBC,KAAK,CAAC,kDAAkDH,MAAM,WAAWC,MAAM,aAAaC,QAAQ,EAAE,CAAC,CACpGE,IAAI,CAACC,QAAQ,IAAI;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,wDAAwD,CAAC;QAC3E;QACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;QACZ,IAAIA,IAAI,IAAIA,IAAI,CAACA,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAACA,IAAI,CAAC,EAAE;UACjDhB,iBAAiB,CAACgB,IAAI,CAACA,IAAI,CAAC;;UAE5B;UACA,MAAMG,UAAU,GAAGC,4BAA4B,CAACJ,IAAI,CAACA,IAAI,EAAEnB,SAAS,CAAC;UACrES,sBAAsB,CAACa,UAAU,CAAC;QACpC,CAAC,MAAM;UACLf,QAAQ,CAAC,8BAA8B,CAAC;QAC1C;QACAF,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,CACDmB,KAAK,CAACC,GAAG,IAAI;QACZC,OAAO,CAACpB,KAAK,CAAC,wDAAwD,EAAEmB,GAAG,CAAC;QAC5ElB,QAAQ,CAACkB,GAAG,CAACE,OAAO,CAAC;QACrBtB,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMuB,4BAA4B,GAAGA,CAACJ,IAAI,EAAES,gBAAgB,KAAK;IAC/D,IAAI,CAACT,IAAI,IAAIA,IAAI,CAACU,MAAM,GAAG,EAAE,EAAE;MAC7B,OAAO;QAAEvB,KAAK,EAAE;MAAiC,CAAC;IACpD;;IAEA;IACA,MAAMwB,UAAU,GAAG,CAAC,GAAGX,IAAI,CAAC,CAACY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,IAAI,CAAC,GAAG,IAAID,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC,CAAC;;IAEhF;IACA,MAAMC,MAAM,GAAGN,UAAU,CAACO,GAAG,CAACC,IAAI,IAAIC,UAAU,CAACD,IAAI,CAACE,KAAK,CAAC,CAAC;IAC7D,MAAMC,OAAO,GAAGX,UAAU,CAACO,GAAG,CAACC,IAAI,IAAII,QAAQ,CAACJ,IAAI,CAACK,MAAM,CAAC,CAAC;;IAE7D;IACA,MAAMC,YAAY,GAAGL,UAAU,CAACX,gBAAgB,CAAC,WAAW,CAAC,CAAC;IAC9D,MAAMiB,SAAS,GAAGN,UAAU,CAACX,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;;IAEpE;IACA,MAAMkB,KAAK,GAAGC,YAAY,CAACX,MAAM,EAAE,EAAE,CAAC;IACtC,MAAMY,KAAK,GAAGD,YAAY,CAACX,MAAM,EAAE,EAAE,CAAC;IACtC,MAAMa,MAAM,GAAGF,YAAY,CAACX,MAAM,EAAEc,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEf,MAAM,CAACP,MAAM,CAAC,CAAC;;IAEjE;IACA,MAAMuB,GAAG,GAAGC,YAAY,CAACjB,MAAM,CAAC;;IAEhC;IACA,MAAMkB,IAAI,GAAGC,aAAa,CAACnB,MAAM,CAAC;;IAElC;IACA,MAAMoB,cAAc,GAAGC,uBAAuB,CAACrB,MAAM,CAAC;;IAEtD;IACA,MAAMsB,aAAa,GAAGjB,OAAO,CAACkB,KAAK,CAAC,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE;IAChF,MAAMC,aAAa,GAAGrB,QAAQ,CAACd,gBAAgB,CAAC,YAAY,CAAC,CAAC;IAC9D,MAAMoC,WAAW,GAAGD,aAAa,GAAGL,aAAa;;IAEjD;IACA,MAAMO,eAAe,GAAGrB,YAAY,GAAGC,SAAS;IAChD,MAAMqB,eAAe,GAAGtB,YAAY,GAAGR,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,CAAC,CAAC;IAChE,MAAMsC,iBAAiB,GAAGvB,YAAY,GAAGR,MAAM,CAAC,CAAC,CAAC;;IAElD;IACA,MAAMgC,aAAa,GAAGC,sBAAsB,CAACjC,MAAM,CAAC;;IAEpD;IACA,MAAMkC,iBAAiB,GAAGC,wBAAwB,CAACnC,MAAM,EAAEQ,YAAY,CAAC;IAExE,OAAO;MACL4B,GAAG,EAAE;QACH1B,KAAK,EAAEA,KAAK,CAAC2B,OAAO,CAAC,CAAC,CAAC;QACvBzB,KAAK,EAAEA,KAAK,CAACyB,OAAO,CAAC,CAAC,CAAC;QACvBxB,MAAM,EAAEA,MAAM,CAACwB,OAAO,CAAC,CAAC,CAAC;QACzBC,SAAS,EAAE9B,YAAY,GAAGE,KAAK,IAAIA,KAAK,GAAGE;MAC7C,CAAC;MACDI,GAAG,EAAE;QACHuB,KAAK,EAAEvB,GAAG,CAACqB,OAAO,CAAC,CAAC,CAAC;QACrBG,YAAY,EAAExB,GAAG,GAAG,EAAE;QACtByB,UAAU,EAAEzB,GAAG,GAAG;MACpB,CAAC;MACDE,IAAI,EAAE;QACJqB,KAAK,EAAErB,IAAI,CAACwB,QAAQ,CAACL,OAAO,CAAC,CAAC,CAAC;QAC/BM,MAAM,EAAEzB,IAAI,CAAC0B,UAAU,CAACP,OAAO,CAAC,CAAC,CAAC;QAClCQ,SAAS,EAAE3B,IAAI,CAAC2B,SAAS,CAACR,OAAO,CAAC,CAAC,CAAC;QACpCC,SAAS,EAAEpB,IAAI,CAAC2B,SAAS,GAAG;MAC9B,CAAC;MACDzB,cAAc,EAAE;QACd0B,KAAK,EAAE1B,cAAc,CAAC0B,KAAK,CAACT,OAAO,CAAC,CAAC,CAAC;QACtCU,MAAM,EAAE3B,cAAc,CAAC2B,MAAM,CAACV,OAAO,CAAC,CAAC,CAAC;QACxCW,KAAK,EAAE5B,cAAc,CAAC4B,KAAK,CAACX,OAAO,CAAC,CAAC,CAAC;QACtCY,KAAK,EAAE,CAAC,CAAC7B,cAAc,CAAC0B,KAAK,GAAG1B,cAAc,CAAC4B,KAAK,IAAI5B,cAAc,CAAC2B,MAAM,GAAG,GAAG,EAAEV,OAAO,CAAC,CAAC,CAAC;QAC/Fa,cAAc,EAAE1C,YAAY,GAAGY,cAAc,CAAC0B,KAAK;QACnDK,cAAc,EAAE3C,YAAY,GAAGY,cAAc,CAAC4B;MAChD,CAAC;MACDzC,MAAM,EAAE;QACN6C,OAAO,EAAE9B,aAAa,CAACe,OAAO,CAAC,CAAC,CAAC;QACjCgB,OAAO,EAAE1B,aAAa;QACtB2B,KAAK,EAAE1B,WAAW,CAACS,OAAO,CAAC,CAAC,CAAC;QAC7BkB,MAAM,EAAE3B,WAAW,GAAG;MACxB,CAAC;MACD4B,WAAW,EAAE;QACXC,MAAM,EAAE5B,eAAe,CAACQ,OAAO,CAAC,CAAC,CAAC;QAClCqB,aAAa,EAAE,CAAC7B,eAAe,GAAGpB,SAAS,GAAG,GAAG,EAAE4B,OAAO,CAAC,CAAC,CAAC;QAC7DsB,OAAO,EAAE7B,eAAe,CAACO,OAAO,CAAC,CAAC,CAAC;QACnCuB,cAAc,EAAE,CAAC9B,eAAe,GAAG9B,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE4C,OAAO,CAAC,CAAC,CAAC;QAC9EwB,QAAQ,EAAE9B,iBAAiB,CAACM,OAAO,CAAC,CAAC,CAAC;QACtCyB,eAAe,EAAE,CAAC/B,iBAAiB,GAAG/B,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,EAAEqC,OAAO,CAAC,CAAC;MAClE,CAAC;MACD0B,KAAK,EAAE;QACLC,QAAQ,EAAEhC,aAAa,CAACgC,QAAQ;QAChCC,SAAS,EAAEjC,aAAa,CAACiC;MAC3B,CAAC;MACD/B,iBAAiB,EAAEA;IACrB,CAAC;EACH,CAAC;;EAED;EACA,MAAMvB,YAAY,GAAGA,CAACX,MAAM,EAAEzB,MAAM,KAAK;IACvC,IAAIyB,MAAM,CAACP,MAAM,GAAGlB,MAAM,EAAE;MAC1B,OAAOyB,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC;IACvC;IAEA,MAAMgC,GAAG,GAAGzB,MAAM,CAACuB,KAAK,CAAC,CAAChD,MAAM,CAAC,CAACiD,MAAM,CAAC,CAAC0C,KAAK,EAAE9D,KAAK,KAAK8D,KAAK,GAAG9D,KAAK,EAAE,CAAC,CAAC;IAC5E,OAAOqB,GAAG,GAAGlD,MAAM;EACrB,CAAC;;EAED;EACA,MAAM0C,YAAY,GAAGA,CAACjB,MAAM,EAAEzB,MAAM,GAAG,EAAE,KAAK;IAC5C,IAAIyB,MAAM,CAACP,MAAM,GAAGlB,MAAM,GAAG,CAAC,EAAE;MAC9B,OAAO,EAAE,CAAC,CAAC;IACb;IAEA,IAAI4F,KAAK,GAAG,CAAC;IACb,IAAIC,MAAM,GAAG,CAAC;;IAEd;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI9F,MAAM,EAAE8F,CAAC,EAAE,EAAE;MAChC,MAAMC,MAAM,GAAGtE,MAAM,CAACA,MAAM,CAACP,MAAM,GAAGlB,MAAM,GAAG,CAAC,GAAG8F,CAAC,CAAC,GAAGrE,MAAM,CAACA,MAAM,CAACP,MAAM,GAAGlB,MAAM,GAAG,CAAC,GAAG8F,CAAC,GAAG,CAAC,CAAC;MAClG,IAAIC,MAAM,IAAI,CAAC,EAAE;QACfH,KAAK,IAAIG,MAAM;MACjB,CAAC,MAAM;QACLF,MAAM,IAAIE,MAAM;MAClB;IACF;IAEA,IAAIC,OAAO,GAAGJ,KAAK,GAAG5F,MAAM;IAC5B,IAAIiG,OAAO,GAAGJ,MAAM,GAAG7F,MAAM;;IAE7B;IACA,KAAK,IAAI8F,CAAC,GAAG9F,MAAM,GAAG,CAAC,EAAE8F,CAAC,GAAGrE,MAAM,CAACP,MAAM,EAAE4E,CAAC,EAAE,EAAE;MAC/C,MAAMC,MAAM,GAAGtE,MAAM,CAACqE,CAAC,CAAC,GAAGrE,MAAM,CAACqE,CAAC,GAAG,CAAC,CAAC;MACxC,IAAII,WAAW,GAAG,CAAC;MACnB,IAAIC,WAAW,GAAG,CAAC;MAEnB,IAAIJ,MAAM,IAAI,CAAC,EAAE;QACfG,WAAW,GAAGH,MAAM;MACtB,CAAC,MAAM;QACLI,WAAW,GAAG,CAACJ,MAAM;MACvB;MAEAC,OAAO,GAAG,CAACA,OAAO,IAAIhG,MAAM,GAAG,CAAC,CAAC,GAAGkG,WAAW,IAAIlG,MAAM;MACzDiG,OAAO,GAAG,CAACA,OAAO,IAAIjG,MAAM,GAAG,CAAC,CAAC,GAAGmG,WAAW,IAAInG,MAAM;IAC3D;IAEA,IAAIiG,OAAO,KAAK,CAAC,EAAE;MACjB,OAAO,GAAG,CAAC,CAAC;IACd;IAEA,MAAMG,EAAE,GAAGJ,OAAO,GAAGC,OAAO;IAC5B,OAAO,GAAG,GAAI,GAAG,IAAI,CAAC,GAAGG,EAAE,CAAE;EAC/B,CAAC;;EAED;EACA,MAAMxD,aAAa,GAAInB,MAAM,IAAK;IAChC;IACA,MAAM4E,OAAO,GAAGC,YAAY,CAAC7E,MAAM,EAAE,EAAE,CAAC;IACxC,MAAM8E,OAAO,GAAGD,YAAY,CAAC7E,MAAM,EAAE,EAAE,CAAC;IACxC,MAAM0C,QAAQ,GAAGkC,OAAO,GAAGE,OAAO;;IAElC;IACA;IACA,MAAMlC,UAAU,GAAGF,QAAQ,GAAG,GAAG,GAAGmC,YAAY,CAAC7E,MAAM,EAAE,CAAC,CAAC,GAAG,GAAG;IACjE,MAAM6C,SAAS,GAAGH,QAAQ,GAAGE,UAAU;IAEvC,OAAO;MAAEF,QAAQ;MAAEE,UAAU;MAAEC;IAAU,CAAC;EAC5C,CAAC;;EAED;EACA,MAAMgC,YAAY,GAAGA,CAAC7E,MAAM,EAAEzB,MAAM,KAAK;IACvC,IAAIyB,MAAM,CAACP,MAAM,GAAGlB,MAAM,EAAE;MAC1B,OAAOyB,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC;IACvC;IAEA,MAAM2C,GAAG,GAAGzB,YAAY,CAACX,MAAM,CAACuB,KAAK,CAAC,CAAC,EAAEhD,MAAM,CAAC,EAAEA,MAAM,CAAC;IACzD,MAAMwG,UAAU,GAAG,CAAC,IAAIxG,MAAM,GAAG,CAAC,CAAC;IAEnC,IAAIyG,GAAG,GAAG5C,GAAG;IACb,KAAK,IAAIiC,CAAC,GAAG9F,MAAM,EAAE8F,CAAC,GAAGrE,MAAM,CAACP,MAAM,EAAE4E,CAAC,EAAE,EAAE;MAC3CW,GAAG,GAAG,CAAChF,MAAM,CAACqE,CAAC,CAAC,GAAGW,GAAG,IAAID,UAAU,GAAGC,GAAG;IAC5C;IAEA,OAAOA,GAAG;EACZ,CAAC;;EAED;EACA,MAAM3D,uBAAuB,GAAGA,CAACrB,MAAM,EAAEzB,MAAM,GAAG,EAAE,EAAE0G,MAAM,GAAG,CAAC,KAAK;IACnE,IAAIjF,MAAM,CAACP,MAAM,GAAGlB,MAAM,EAAE;MAC1B,MAAM6B,KAAK,GAAGJ,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC;MAC5C,OAAO;QAAEqD,KAAK,EAAE1C,KAAK,GAAG,IAAI;QAAE2C,MAAM,EAAE3C,KAAK;QAAE4C,KAAK,EAAE5C,KAAK,GAAG;MAAK,CAAC;IACpE;IAEA,MAAM8E,YAAY,GAAGlF,MAAM,CAACuB,KAAK,CAAC,CAAChD,MAAM,CAAC;IAC1C,MAAMwE,MAAM,GAAGpC,YAAY,CAACuE,YAAY,EAAE3G,MAAM,CAAC;;IAEjD;IACA,MAAM4G,OAAO,GAAGD,YAAY,CAACjF,GAAG,CAACG,KAAK,IAAI;MACxC,MAAMgF,IAAI,GAAGhF,KAAK,GAAG2C,MAAM;MAC3B,OAAOqC,IAAI,GAAGA,IAAI;IACpB,CAAC,CAAC;IAEF,MAAMC,aAAa,GAAGF,OAAO,CAAC3D,MAAM,CAAC,CAACC,GAAG,EAAE6D,GAAG,KAAK7D,GAAG,GAAG6D,GAAG,EAAE,CAAC,CAAC,GAAG/G,MAAM;IACzE,MAAMgH,iBAAiB,GAAGzE,IAAI,CAAC0E,IAAI,CAACH,aAAa,CAAC;IAElD,MAAMvC,KAAK,GAAGC,MAAM,GAAIwC,iBAAiB,GAAGN,MAAO;IACnD,MAAMjC,KAAK,GAAGD,MAAM,GAAIwC,iBAAiB,GAAGN,MAAO;IAEnD,OAAO;MAAEnC,KAAK;MAAEC,MAAM;MAAEC;IAAM,CAAC;EACjC,CAAC;;EAED;EACA,MAAMf,sBAAsB,GAAIjC,MAAM,IAAK;IACzC,IAAIA,MAAM,CAACP,MAAM,GAAG,EAAE,EAAE;MACtB,OAAO;QAAEuE,QAAQ,EAAE,SAAS;QAAEC,SAAS,EAAE;MAAU,CAAC;IACtD;IAEA,MAAMwB,SAAS,GAAG,CAACzF,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,CAAC,CAAC,GAAGO,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,CAAC,CAAC,IAAIO,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,CAAC,CAAC;IACrG,MAAMiG,UAAU,GAAG,CAAC1F,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,CAAC,CAAC,GAAGO,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,EAAE,CAAC,IAAIO,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,EAAE,CAAC;IAExG,IAAIwE,SAAS,GAAG,SAAS;IACzB,IAAIwB,SAAS,GAAG,CAAC,IAAIC,UAAU,GAAG,CAAC,EAAE;MACnCzB,SAAS,GAAG,SAAS;IACvB,CAAC,MAAM,IAAIwB,SAAS,GAAG,CAAC,IAAIC,UAAU,GAAG,CAAC,EAAE;MAC1CzB,SAAS,GAAG,SAAS;IACvB,CAAC,MAAM,IAAIwB,SAAS,GAAG,CAAC,IAAIC,UAAU,GAAG,CAAC,EAAE;MAC1CzB,SAAS,GAAG,YAAY;IAC1B,CAAC,MAAM,IAAIwB,SAAS,GAAG,CAAC,IAAIC,UAAU,GAAG,CAAC,EAAE;MAC1CzB,SAAS,GAAG,WAAW;IACzB;IAEA,IAAID,QAAQ,GAAG,MAAM;IACrB,MAAM2B,aAAa,GAAG7E,IAAI,CAAC8E,GAAG,CAACH,SAAS,CAAC,GAAG3E,IAAI,CAAC8E,GAAG,CAACF,UAAU,CAAC;IAChE,IAAIC,aAAa,GAAG,GAAG,EAAE;MACvB3B,QAAQ,GAAG,QAAQ;IACrB,CAAC,MAAM,IAAI2B,aAAa,GAAG,IAAI,EAAE;MAC/B3B,QAAQ,GAAG,UAAU;IACvB;IAEA,OAAO;MAAEA,QAAQ;MAAEC;IAAU,CAAC;EAChC,CAAC;;EAED;EACA,MAAM9B,wBAAwB,GAAGA,CAACnC,MAAM,EAAEQ,YAAY,KAAK;IACzD,IAAIR,MAAM,CAACP,MAAM,GAAG,EAAE,EAAE;MACtB,OAAO;QAAEoG,OAAO,EAAErF,YAAY,GAAG,IAAI;QAAEsF,UAAU,EAAEtF,YAAY,GAAG;MAAK,CAAC;IAC1E;;IAEA;IACA,MAAM0E,YAAY,GAAGlF,MAAM,CAACuB,KAAK,CAAC,CAAC,EAAE,CAAC;IACtC,IAAIwE,mBAAmB,GAAG,EAAE;IAC5B,IAAIC,gBAAgB,GAAG,EAAE;;IAEzB;IACA,KAAK,IAAI3B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,YAAY,CAACzF,MAAM,GAAG,CAAC,EAAE4E,CAAC,EAAE,EAAE;MAChD;MACA,IAAIa,YAAY,CAACb,CAAC,CAAC,GAAGa,YAAY,CAACb,CAAC,GAAC,CAAC,CAAC,IACnCa,YAAY,CAACb,CAAC,CAAC,GAAGa,YAAY,CAACb,CAAC,GAAC,CAAC,CAAC,IACnCa,YAAY,CAACb,CAAC,CAAC,GAAGa,YAAY,CAACb,CAAC,GAAC,CAAC,CAAC,IACnCa,YAAY,CAACb,CAAC,CAAC,GAAGa,YAAY,CAACb,CAAC,GAAC,CAAC,CAAC,EAAE;QACvC0B,mBAAmB,CAACE,IAAI,CAACf,YAAY,CAACb,CAAC,CAAC,CAAC;MAC3C;;MAEA;MACA,IAAIa,YAAY,CAACb,CAAC,CAAC,GAAGa,YAAY,CAACb,CAAC,GAAC,CAAC,CAAC,IACnCa,YAAY,CAACb,CAAC,CAAC,GAAGa,YAAY,CAACb,CAAC,GAAC,CAAC,CAAC,IACnCa,YAAY,CAACb,CAAC,CAAC,GAAGa,YAAY,CAACb,CAAC,GAAC,CAAC,CAAC,IACnCa,YAAY,CAACb,CAAC,CAAC,GAAGa,YAAY,CAACb,CAAC,GAAC,CAAC,CAAC,EAAE;QACvC2B,gBAAgB,CAACC,IAAI,CAACf,YAAY,CAACb,CAAC,CAAC,CAAC;MACxC;IACF;;IAEA;IACA,IAAIyB,UAAU,GAAGhF,IAAI,CAACoF,GAAG,CAAC,GAAGhB,YAAY,CAAC,GAAG,IAAI;IACjD,IAAIW,OAAO,GAAG/E,IAAI,CAACC,GAAG,CAAC,GAAGmE,YAAY,CAAC,GAAG,IAAI;IAE9C,IAAIa,mBAAmB,CAACtG,MAAM,GAAG,CAAC,EAAE;MAClC;MACA,MAAM0G,gBAAgB,GAAGJ,mBAAmB,CAACK,MAAM,CAAChG,KAAK,IAAIA,KAAK,GAAGI,YAAY,CAAC;MAClF,IAAI2F,gBAAgB,CAAC1G,MAAM,GAAG,CAAC,EAAE;QAC/BqG,UAAU,GAAGhF,IAAI,CAACC,GAAG,CAAC,GAAGoF,gBAAgB,CAAC;MAC5C;IACF;IAEA,IAAIH,gBAAgB,CAACvG,MAAM,GAAG,CAAC,EAAE;MAC/B;MACA,MAAM4G,aAAa,GAAGL,gBAAgB,CAACI,MAAM,CAAChG,KAAK,IAAIA,KAAK,GAAGI,YAAY,CAAC;MAC5E,IAAI6F,aAAa,CAAC5G,MAAM,GAAG,CAAC,EAAE;QAC5BoG,OAAO,GAAG/E,IAAI,CAACoF,GAAG,CAAC,GAAGG,aAAa,CAAC;MACtC;IACF;IAEA,OAAO;MAAER,OAAO,EAAE1F,UAAU,CAAC0F,OAAO,CAACxD,OAAO,CAAC,CAAC,CAAC,CAAC;MAAEyD,UAAU,EAAE3F,UAAU,CAAC2F,UAAU,CAACzD,OAAO,CAAC,CAAC,CAAC;IAAE,CAAC;EACnG,CAAC;;EAED;EACA,MAAMiE,uBAAuB,GAAGA,CAAA,KAAM;IACpC,IAAItI,SAAS,IAAIE,KAAK,IAAI,CAACE,mBAAmB,CAACgE,GAAG,EAAE;MAClD,OAAO;QAAEmE,cAAc,EAAE,MAAM;QAAEC,OAAO,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAU,CAAC;IAClE;IAEA,MAAMrG,KAAK,GAAGD,UAAU,CAACvC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACrD,MAAMsB,UAAU,GAAGd,mBAAmB;IAEtC,IAAIsI,KAAK,GAAG,CAAC;IACb,IAAIF,OAAO,GAAG,EAAE;;IAEhB;IACA,IAAItH,UAAU,CAACkD,GAAG,EAAE;MAClB,MAAM1B,KAAK,GAAGP,UAAU,CAACjB,UAAU,CAACkD,GAAG,CAAC1B,KAAK,CAAC;MAC9C,MAAME,KAAK,GAAGT,UAAU,CAACjB,UAAU,CAACkD,GAAG,CAACxB,KAAK,CAAC;MAC9C,MAAMC,MAAM,GAAGV,UAAU,CAACjB,UAAU,CAACkD,GAAG,CAACvB,MAAM,CAAC;MAEhD,IAAIT,KAAK,GAAGM,KAAK,IAAIN,KAAK,GAAGQ,KAAK,IAAIR,KAAK,GAAGS,MAAM,EAAE;QACpD6F,KAAK,IAAI,CAAC;QACVF,OAAO,CAACP,IAAI,CAAC,6DAA6D,CAAC;MAC7E,CAAC,MAAM,IAAI7F,KAAK,GAAGM,KAAK,IAAIN,KAAK,GAAGQ,KAAK,EAAE;QACzC8F,KAAK,IAAI,CAAC;QACVF,OAAO,CAACP,IAAI,CAAC,qDAAqD,CAAC;MACrE,CAAC,MAAM,IAAI7F,KAAK,GAAGM,KAAK,IAAIN,KAAK,GAAGQ,KAAK,IAAIR,KAAK,GAAGS,MAAM,EAAE;QAC3D6F,KAAK,IAAI,CAAC;QACVF,OAAO,CAACP,IAAI,CAAC,6DAA6D,CAAC;MAC7E,CAAC,MAAM,IAAI7F,KAAK,GAAGM,KAAK,IAAIN,KAAK,GAAGQ,KAAK,EAAE;QACzC8F,KAAK,IAAI,CAAC;QACVF,OAAO,CAACP,IAAI,CAAC,qDAAqD,CAAC;MACrE;;MAEA;MACA,IAAIvF,KAAK,GAAGE,KAAK,IAAIF,KAAK,GAAGE,KAAK,GAAGF,KAAK,GAAG,IAAI,EAAE;QACjDgG,KAAK,IAAI,CAAC;QACVF,OAAO,CAACP,IAAI,CAAC,wCAAwC,CAAC;MACxD,CAAC,MAAM,IAAIvF,KAAK,GAAGE,KAAK,IAAIA,KAAK,GAAGF,KAAK,GAAGE,KAAK,GAAG,IAAI,EAAE;QACxD8F,KAAK,IAAI,CAAC;QACVF,OAAO,CAACP,IAAI,CAAC,uCAAuC,CAAC;MACvD;IACF;;IAEA;IACA,IAAI/G,UAAU,CAAC8B,GAAG,EAAE;MAClB,MAAMA,GAAG,GAAGb,UAAU,CAACjB,UAAU,CAAC8B,GAAG,CAACuB,KAAK,CAAC;MAE5C,IAAIvB,GAAG,GAAG,EAAE,EAAE;QACZ0F,KAAK,IAAI,GAAG;QACZF,OAAO,CAACP,IAAI,CAAC,wBAAwBjF,GAAG,YAAY,CAAC;MACvD,CAAC,MAAM,IAAIA,GAAG,GAAG,EAAE,EAAE;QACnB0F,KAAK,IAAI,GAAG;QACZF,OAAO,CAACP,IAAI,CAAC,sBAAsBjF,GAAG,YAAY,CAAC;MACrD,CAAC,MAAM,IAAIA,GAAG,GAAG,EAAE,EAAE;QACnB0F,KAAK,IAAI,GAAG;QACZF,OAAO,CAACP,IAAI,CAAC,gCAAgCjF,GAAG,YAAY,CAAC;MAC/D,CAAC,MAAM,IAAIA,GAAG,GAAG,EAAE,EAAE;QACnB0F,KAAK,IAAI,GAAG;QACZF,OAAO,CAACP,IAAI,CAAC,8BAA8BjF,GAAG,YAAY,CAAC;MAC7D;IACF;;IAEA;IACA,IAAI9B,UAAU,CAACgC,IAAI,EAAE;MACnB,IAAIhC,UAAU,CAACgC,IAAI,CAACoB,SAAS,EAAE;QAC7BoE,KAAK,IAAI,CAAC;QACVF,OAAO,CAACP,IAAI,CAAC,sCAAsC,CAAC;MACtD,CAAC,MAAM;QACLS,KAAK,IAAI,CAAC;QACVF,OAAO,CAACP,IAAI,CAAC,sCAAsC,CAAC;MACtD;IACF;;IAEA;IACA,IAAI/G,UAAU,CAACkC,cAAc,EAAE;MAC7B,IAAIlC,UAAU,CAACkC,cAAc,CAAC8B,cAAc,EAAE;QAC5CwD,KAAK,IAAI,CAAC;QACVF,OAAO,CAACP,IAAI,CAAC,4EAA4E,CAAC;MAC5F,CAAC,MAAM,IAAI/G,UAAU,CAACkC,cAAc,CAAC+B,cAAc,EAAE;QACnDuD,KAAK,IAAI,CAAC;QACVF,OAAO,CAACP,IAAI,CAAC,8EAA8E,CAAC;MAC9F;;MAEA;MACA,MAAMU,OAAO,GAAGxG,UAAU,CAACjB,UAAU,CAACkC,cAAc,CAAC6B,KAAK,CAAC;MAC3D,IAAI0D,OAAO,GAAG,CAAC,EAAE;QACfH,OAAO,CAACP,IAAI,CAAC,uDAAuD,CAAC;MACvE;IACF;;IAEA;IACA,IAAI/G,UAAU,CAACqB,MAAM,IAAIrB,UAAU,CAACqB,MAAM,CAACgD,MAAM,EAAE;MACjD,MAAM3B,WAAW,GAAGzB,UAAU,CAACjB,UAAU,CAACqB,MAAM,CAAC+C,KAAK,CAAC;MACvD,IAAIpE,UAAU,CAACsE,WAAW,IAAIrD,UAAU,CAACjB,UAAU,CAACsE,WAAW,CAACC,MAAM,CAAC,GAAG,CAAC,EAAE;QAC3EiD,KAAK,IAAI,CAAC;QACVF,OAAO,CAACP,IAAI,CAAC,gBAAgBrE,WAAW,sCAAsC,CAAC;MACjF,CAAC,MAAM,IAAI1C,UAAU,CAACsE,WAAW,IAAIrD,UAAU,CAACjB,UAAU,CAACsE,WAAW,CAACC,MAAM,CAAC,GAAG,CAAC,EAAE;QAClFiD,KAAK,IAAI,CAAC;QACVF,OAAO,CAACP,IAAI,CAAC,gBAAgBrE,WAAW,sCAAsC,CAAC;MACjF;IACF;;IAEA;IACA,IAAI1C,UAAU,CAAC6E,KAAK,EAAE;MACpB,IAAI7E,UAAU,CAAC6E,KAAK,CAACE,SAAS,KAAK,SAAS,IAAI/E,UAAU,CAAC6E,KAAK,CAACC,QAAQ,KAAK,QAAQ,EAAE;QACtF0C,KAAK,IAAI,GAAG;QACZF,OAAO,CAACP,IAAI,CAAC,+BAA+B,CAAC;MAC/C,CAAC,MAAM,IAAI/G,UAAU,CAAC6E,KAAK,CAACE,SAAS,KAAK,SAAS,IAAI/E,UAAU,CAAC6E,KAAK,CAACC,QAAQ,KAAK,QAAQ,EAAE;QAC7F0C,KAAK,IAAI,GAAG;QACZF,OAAO,CAACP,IAAI,CAAC,+BAA+B,CAAC;MAC/C,CAAC,MAAM,IAAI/G,UAAU,CAAC6E,KAAK,CAACE,SAAS,KAAK,YAAY,EAAE;QACtDyC,KAAK,IAAI,GAAG;QACZF,OAAO,CAACP,IAAI,CAAC,gDAAgD,CAAC;MAChE;IACF;;IAEA;IACA,IAAI/G,UAAU,CAACgD,iBAAiB,EAAE;MAChC,MAAM2D,OAAO,GAAG3G,UAAU,CAACgD,iBAAiB,CAAC2D,OAAO;MACpD,MAAMC,UAAU,GAAG5G,UAAU,CAACgD,iBAAiB,CAAC4D,UAAU;MAC1D,MAAMc,kBAAkB,GAAI,CAACxG,KAAK,GAAGyF,OAAO,IAAIzF,KAAK,GAAI,GAAG;MAC5D,MAAMyG,qBAAqB,GAAI,CAACf,UAAU,GAAG1F,KAAK,IAAIA,KAAK,GAAI,GAAG;MAElE,IAAIwG,kBAAkB,GAAG,CAAC,EAAE;QAC1BF,KAAK,IAAI,GAAG;QACZF,OAAO,CAACP,IAAI,CAAC,mCAAmCJ,OAAO,qBAAqB,CAAC;MAC/E,CAAC,MAAM,IAAIgB,qBAAqB,GAAG,CAAC,EAAE;QACpCH,KAAK,IAAI,GAAG;QACZF,OAAO,CAACP,IAAI,CAAC,sCAAsCH,UAAU,wBAAwB,CAAC;MACxF;IACF;;IAEA;IACA,IAAIS,cAAc,GAAG,MAAM;IAC3B,IAAIE,KAAK,GAAG,SAAS,CAAC,CAAC;;IAEvB,IAAIC,KAAK,IAAI,CAAC,EAAE;MACdH,cAAc,GAAG,YAAY;MAC7BE,KAAK,GAAG,SAAS,CAAC,CAAC;IACrB,CAAC,MAAM,IAAIC,KAAK,GAAG,CAAC,EAAE;MACpBH,cAAc,GAAG,KAAK;MACtBE,KAAK,GAAG,SAAS,CAAC,CAAC;IACrB,CAAC,MAAM,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAE;MACrBH,cAAc,GAAG,aAAa;MAC9BE,KAAK,GAAG,SAAS,CAAC,CAAC;IACrB,CAAC,MAAM,IAAIC,KAAK,GAAG,CAAC,EAAE;MACpBH,cAAc,GAAG,MAAM;MACvBE,KAAK,GAAG,SAAS,CAAC,CAAC;IACrB;IAEA,OAAO;MAAEF,cAAc;MAAEC,OAAO;MAAEC;IAAM,CAAC;EAC3C,CAAC;EAED,MAAM;IAAEF,cAAc;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGH,uBAAuB,CAAC,CAAC;EAEpE,IAAItI,SAAS,EAAE;IACb,oBACEN,OAAA;MAAKoJ,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBrJ,OAAA;QAAAqJ,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BzJ,OAAA;QAAK0J,KAAK,EAAE;UAAEC,SAAS,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAO,CAAE;QAAAP,QAAA,eACnDrJ,OAAA;UAAAqJ,QAAA,EAAG;QAA+B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,IAAIjJ,KAAK,EAAE;IACT,oBACER,OAAA;MAAKoJ,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBrJ,OAAA;QAAAqJ,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BzJ,OAAA;QAAK0J,KAAK,EAAE;UAAEX,KAAK,EAAE,SAAS;UAAEY,SAAS,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAO,CAAE;QAAAP,QAAA,eACrErJ,OAAA;UAAAqJ,QAAA,GAAG,SAAO,EAAC7I,KAAK;QAAA;UAAA8I,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,oBACEzJ,OAAA;IAAKoJ,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBrJ,OAAA;MAAAqJ,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE3BzJ,OAAA;MAAKoJ,SAAS,EAAC,0BAA0B;MAAAC,QAAA,gBACvCrJ,OAAA;QACEoJ,SAAS,EAAC,gBAAgB;QAC1BM,KAAK,EAAE;UACLG,eAAe,EAAEd,KAAK;UACtBa,OAAO,EAAE,MAAM;UACfE,YAAY,EAAE,KAAK;UACnBf,KAAK,EAAE,OAAO;UACdgB,UAAU,EAAE,MAAM;UAClBJ,SAAS,EAAE,QAAQ;UACnBK,QAAQ,EAAE,QAAQ;UAClBC,YAAY,EAAE;QAChB,CAAE;QAAAZ,QAAA,EAEDR;MAAc;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,eAENzJ,OAAA;QAAKoJ,SAAS,EAAC,oBAAoB;QAAAC,QAAA,GAChC3I,mBAAmB,CAACgE,GAAG,iBACtB1E,OAAA;UAAKoJ,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BrJ,OAAA;YAAAqJ,QAAA,EAAI;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxBzJ,OAAA;YAAAqJ,QAAA,gBACErJ,OAAA;cAAAqJ,QAAA,GAAI,WAAS,EAAC3I,mBAAmB,CAACgE,GAAG,CAAC1B,KAAK;YAAA;cAAAsG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACjDzJ,OAAA;cAAAqJ,QAAA,GAAI,WAAS,EAAC3I,mBAAmB,CAACgE,GAAG,CAACxB,KAAK;YAAA;cAAAoG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACjDzJ,OAAA;cAAAqJ,QAAA,GAAI,YAAU,EAAC3I,mBAAmB,CAACgE,GAAG,CAACvB,MAAM;YAAA;cAAAmG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CACN,EAEA/I,mBAAmB,CAAC4C,GAAG,iBACtBtD,OAAA;UAAKoJ,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BrJ,OAAA;YAAAqJ,QAAA,EAAI;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACjBzJ,OAAA;YAAAqJ,QAAA,gBACErJ,OAAA;cAAAqJ,QAAA,GAAI,YAAU,EAAC3I,mBAAmB,CAAC4C,GAAG,CAACuB,KAAK,EACzCnE,mBAAmB,CAAC4C,GAAG,CAACwB,YAAY,IAAI,eAAe,EACvDpE,mBAAmB,CAAC4C,GAAG,CAACyB,UAAU,IAAI,aAAa;YAAA;cAAAuE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClD,CAAC,EACJ/I,mBAAmB,CAAC8C,IAAI,iBACvBxD,OAAA;cAAAqJ,QAAA,GAAI,QAAM,EAAC3I,mBAAmB,CAAC8C,IAAI,CAAC2B,SAAS,GAAG,CAAC,GAAG,SAAS,GAAG,SAAS;YAAA;cAAAmE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAC/E;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CACN,EAEA/I,mBAAmB,CAAC8D,iBAAiB,iBACpCxE,OAAA;UAAKoJ,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BrJ,OAAA;YAAAqJ,QAAA,EAAI;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC3BzJ,OAAA;YAAAqJ,QAAA,gBACErJ,OAAA;cAAAqJ,QAAA,GAAI,YAAU,EAAC3I,mBAAmB,CAAC8D,iBAAiB,CAAC2D,OAAO;YAAA;cAAAmB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAClEzJ,OAAA;cAAAqJ,QAAA,GAAI,eAAa,EAAC3I,mBAAmB,CAAC8D,iBAAiB,CAAC4D,UAAU;YAAA;cAAAkB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAENzJ,OAAA;QAAAqJ,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClBzJ,OAAA;QAAIoJ,SAAS,EAAC,cAAc;QAAAC,QAAA,EACzBP,OAAO,CAACvG,GAAG,CAAC,CAAC0C,MAAM,EAAEiF,KAAK,kBACzBlK,OAAA;UAAAqJ,QAAA,EAAiBpE;QAAM,GAAdiF,KAAK;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc,CAC7B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eAELzJ,OAAA;QAAKoJ,SAAS,EAAC,YAAY;QAAAC,QAAA,eACzBrJ,OAAA;UAAAqJ,QAAA,eACErJ,OAAA;YAAAqJ,QAAA,EAAI;UAA0H;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9H;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtJ,EAAA,CA1kBIF,iBAAiB;AAAAkK,EAAA,GAAjBlK,iBAAiB;AA4kBvB,eAAeA,iBAAiB;AAAC,IAAAkK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}