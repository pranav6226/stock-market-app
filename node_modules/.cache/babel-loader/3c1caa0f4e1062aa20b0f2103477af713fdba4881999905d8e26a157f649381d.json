{"ast":null,"code":"var _jsxFileName = \"/Users/pranav/stock-market-app/src/components/StockChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, LineChart, Line, ComposedChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockChart = ({\n  stockData\n}) => {\n  _s();\n  const [chartType, setChartType] = useState('bar');\n  const [historicalData, setHistoricalData] = useState([]);\n  const [sectorData, setSectorData] = useState(null);\n  const [marketData, setMarketData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch historical data from backend API\n  useEffect(() => {\n    if (stockData && stockData['01. symbol']) {\n      setIsLoading(true);\n      setError(null);\n      setHistoricalData([]);\n      const symbol = stockData['01. symbol'];\n      const period = '1mo'; // Default to 1 month\n      const interval = '1d'; // Default to daily data\n\n      // Fetch stock historical data\n      fetch(`http://localhost:5001/api/stock/history?symbol=${symbol}&period=${period}&interval=${interval}`).then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch historical data');\n        }\n        return response.json();\n      }).then(data => {\n        if (data && data.data && Array.isArray(data.data)) {\n          setHistoricalData(data.data);\n\n          // Get sector for the stock (simplified mapping)\n          let sector = 'TECHNOLOGY';\n          if (['AAPL', 'MSFT', 'GOOG', 'GOOGL', 'META', 'NVDA', 'ADBE', 'CSCO', 'INTC'].includes(symbol)) {\n            sector = 'XLK'; // Technology sector ETF\n          } else if (['AMZN', 'TSLA', 'NFLX', 'DIS', 'CMCSA'].includes(symbol)) {\n            sector = 'XLC'; // Communication Services sector ETF\n          } else if (['JPM', 'BAC', 'V', 'MA', 'PYPL'].includes(symbol)) {\n            sector = 'XLF'; // Financial sector ETF\n          } else if (['JNJ', 'PFE', 'MRK', 'TMO'].includes(symbol)) {\n            sector = 'XLV'; // Healthcare sector ETF\n          } else if (['WMT', 'PG', 'COST', 'KO', 'PEP'].includes(symbol)) {\n            sector = 'XLP'; // Consumer Staples sector ETF\n          }\n\n          // Fetch sector ETF data\n          fetchComparisonData(sector, 'sector');\n\n          // Fetch market index data (S&P 500)\n          fetchComparisonData('SPY', 'market');\n        } else {\n          setError('Invalid data format received');\n        }\n        setIsLoading(false);\n      }).catch(err => {\n        console.error('Error fetching historical data:', err);\n        setError(err.message);\n        setIsLoading(false);\n      });\n    }\n  }, [stockData]);\n\n  // Helper function to fetch comparison data (sector, market index)\n  const fetchComparisonData = (symbol, type) => {\n    fetch(`http://localhost:5001/api/stock?symbol=${symbol}`).then(response => {\n      if (!response.ok) {\n        throw new Error(`Failed to fetch ${type} data`);\n      }\n      return response.json();\n    }).then(data => {\n      if (type === 'sector') {\n        setSectorData(data);\n      } else if (type === 'market') {\n        setMarketData(data);\n      }\n    }).catch(err => {\n      console.error(`Error fetching ${type} data:`, err);\n    });\n  };\n\n  // Creating data for current day price levels\n  const prepareChartData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    const basePrice = parseFloat(stockData['05. price']);\n\n    // Create daily price data for visualization\n    return [{\n      name: 'Open',\n      price: parseFloat(stockData['02. open'])\n    }, {\n      name: 'Low',\n      price: parseFloat(stockData['04. low'])\n    }, {\n      name: 'Current',\n      price: basePrice\n    }, {\n      name: 'High',\n      price: parseFloat(stockData['03. high'])\n    }];\n  };\n\n  // Generate data for price comparison with sector and index using real data\n  const generateComparisonData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n\n    // Stock data\n    const stockPrice = parseFloat(stockData['05. price']);\n    const stockChange = parseFloat(stockData['09. change'] || 0);\n    const stockPercentChange = stockChange / stockPrice * 100;\n    const result = [{\n      name: stockData['01. symbol'],\n      performance: parseFloat(stockPercentChange.toFixed(2)),\n      fill: stockPercentChange >= 0 ? '#4CAF50' : '#F44336'\n    }];\n\n    // Add sector data if available\n    if (sectorData && sectorData['05. price'] && sectorData['09. change']) {\n      const sectorChange = parseFloat(sectorData['09. change']);\n      const sectorPrice = parseFloat(sectorData['05. price']);\n      const sectorPercentChange = sectorChange / sectorPrice * 100;\n      result.push({\n        name: `${sectorData['01. symbol']} (Sector)`,\n        performance: parseFloat(sectorPercentChange.toFixed(2)),\n        fill: sectorPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      });\n    } else {\n      // Default sector if data not available yet\n      result.push({\n        name: 'Sector Avg',\n        performance: 0,\n        fill: '#9E9E9E'\n      });\n    }\n\n    // Add market index data if available\n    if (marketData && marketData['05. price'] && marketData['09. change']) {\n      const marketChange = parseFloat(marketData['09. change']);\n      const marketPrice = parseFloat(marketData['05. price']);\n      const marketPercentChange = marketChange / marketPrice * 100;\n      result.push({\n        name: `${marketData['01. symbol']} (Market)`,\n        performance: parseFloat(marketPercentChange.toFixed(2)),\n        fill: marketPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      });\n    } else {\n      // Default market if data not available yet\n      result.push({\n        name: 'Market Index',\n        performance: 0,\n        fill: '#9E9E9E'\n      });\n    }\n    return result;\n  };\n  const chartData = prepareChartData();\n  const comparisonData = generateComparisonData();\n\n  // Determine if stock is up or down for color schemes\n  const isStockUp = parseFloat(stockData['09. change'] || 0) >= 0;\n  const mainColor = isStockUp ? '#4CAF50' : '#F44336';\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28'];\n\n  // Chart type options\n  const chartTypes = [{\n    id: 'bar',\n    label: 'Price Levels'\n  }, {\n    id: 'line',\n    label: 'Price History'\n  }, {\n    id: 'volume',\n    label: 'Volume Analysis'\n  }, {\n    id: 'comparison',\n    label: 'Performance Comparison'\n  }];\n\n  // Loading state\n  if ((chartType === 'line' || chartType === 'volume') && isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '400px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading historical data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Error state\n  if ((chartType === 'line' || chartType === 'volume') && error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '400px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: '#F44336'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error, \". Unable to display historical data.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this);\n  }\n\n  // No data state\n  if ((chartType === 'line' || chartType === 'volume') && historicalData.length === 0 && !isLoading && !error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '400px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No historical data available for this stock.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render different chart based on selection\n  const renderSelectedChart = () => {\n    switch (chartType) {\n      case 'bar':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: chartData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: [dataMin => Math.floor(dataMin * 0.995), dataMax => Math.ceil(dataMax * 1.005)],\n              tickFormatter: value => `$${value.toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Price']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"price\",\n              fill: mainColor\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this);\n      case 'line':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: historicalData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: ['auto', 'auto'],\n              tickFormatter: value => `$${value.toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`$${value.toFixed(2)}`, 'Price'],\n              labelFormatter: label => `Date: ${label}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"price\",\n              stroke: mainColor,\n              strokeWidth: 2,\n              dot: {\n                r: 0\n              },\n              activeDot: {\n                r: 6\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this);\n      case 'volume':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(ComposedChart, {\n            data: historicalData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              yAxisId: \"left\",\n              orientation: \"left\",\n              tickFormatter: value => `$${value.toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              yAxisId: \"right\",\n              orientation: \"right\",\n              domain: ['auto', 'auto'],\n              tickFormatter: value => `${(value / 1000000).toFixed(1)}M`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: (value, name) => {\n                return name === 'price' ? [`$${value.toFixed(2)}`, 'Price'] : [`${(value / 1000000).toFixed(1)}M`, 'Volume'];\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              yAxisId: \"left\",\n              type: \"monotone\",\n              dataKey: \"price\",\n              stroke: mainColor,\n              strokeWidth: 2,\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              yAxisId: \"right\",\n              dataKey: \"volume\",\n              fill: \"#8884d8\",\n              opacity: 0.5\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this);\n      case 'comparison':\n        return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: comparisonData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              tickFormatter: value => `${value}%`,\n              domain: [dataMin => Math.min(dataMin, -2), dataMax => Math.max(dataMax, 2)]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`${value}%`, 'Performance']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"performance\",\n              fill: \"#8884d8\",\n              children: comparisonData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: entry.fill\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Please select a chart type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-selectors\",\n      children: chartTypes.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `chart-type-btn ${chartType === type.id ? 'active' : ''}`,\n        onClick: () => setChartType(type.id),\n        children: type.label\n      }, type.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '400px'\n      },\n      children: !stockData || Object.keys(stockData).length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please select a stock to display chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this) : renderSelectedChart()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 357,\n    columnNumber: 5\n  }, this);\n};\n_s(StockChart, \"83vtBTHmHsGJtaedhROMfimI7Vs=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","LineChart","Line","ComposedChart","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","PieChart","Pie","Cell","jsxDEV","_jsxDEV","StockChart","stockData","_s","chartType","setChartType","historicalData","setHistoricalData","sectorData","setSectorData","marketData","setMarketData","isLoading","setIsLoading","error","setError","symbol","period","interval","fetch","then","response","ok","Error","json","data","Array","isArray","sector","includes","fetchComparisonData","catch","err","console","message","type","prepareChartData","basePrice","parseFloat","name","price","generateComparisonData","stockPrice","stockChange","stockPercentChange","result","performance","toFixed","fill","sectorChange","sectorPrice","sectorPercentChange","push","marketChange","marketPrice","marketPercentChange","chartData","comparisonData","isStockUp","mainColor","COLORS","chartTypes","id","label","className","style","height","display","justifyContent","alignItems","children","fileName","_jsxFileName","lineNumber","columnNumber","color","length","renderSelectedChart","width","margin","top","right","left","bottom","strokeDasharray","dataKey","domain","dataMin","Math","floor","dataMax","ceil","tickFormatter","value","formatter","labelFormatter","stroke","strokeWidth","dot","r","activeDot","yAxisId","orientation","opacity","min","max","map","entry","index","onClick","Object","keys","_c","$RefreshReg$"],"sources":["/Users/pranav/stock-market-app/src/components/StockChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  BarChart, Bar, LineChart, Line, ComposedChart, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, \n  ResponsiveContainer, PieChart, Pie, Cell\n} from 'recharts';\n\nconst StockChart = ({ stockData }) => {\n  const [chartType, setChartType] = useState('bar');\n  const [historicalData, setHistoricalData] = useState([]);\n  const [sectorData, setSectorData] = useState(null);\n  const [marketData, setMarketData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  // Fetch historical data from backend API\n  useEffect(() => {\n    if (stockData && stockData['01. symbol']) {\n      setIsLoading(true);\n      setError(null);\n      setHistoricalData([]);\n      \n      const symbol = stockData['01. symbol'];\n      const period = '1mo'; // Default to 1 month\n      const interval = '1d'; // Default to daily data\n      \n      // Fetch stock historical data\n      fetch(`http://localhost:5001/api/stock/history?symbol=${symbol}&period=${period}&interval=${interval}`)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Failed to fetch historical data');\n          }\n          return response.json();\n        })\n        .then(data => {\n          if (data && data.data && Array.isArray(data.data)) {\n            setHistoricalData(data.data);\n            \n            // Get sector for the stock (simplified mapping)\n            let sector = 'TECHNOLOGY';\n            if (['AAPL', 'MSFT', 'GOOG', 'GOOGL', 'META', 'NVDA', 'ADBE', 'CSCO', 'INTC'].includes(symbol)) {\n              sector = 'XLK'; // Technology sector ETF\n            } else if (['AMZN', 'TSLA', 'NFLX', 'DIS', 'CMCSA'].includes(symbol)) {\n              sector = 'XLC'; // Communication Services sector ETF\n            } else if (['JPM', 'BAC', 'V', 'MA', 'PYPL'].includes(symbol)) {\n              sector = 'XLF'; // Financial sector ETF\n            } else if (['JNJ', 'PFE', 'MRK', 'TMO'].includes(symbol)) {\n              sector = 'XLV'; // Healthcare sector ETF\n            } else if (['WMT', 'PG', 'COST', 'KO', 'PEP'].includes(symbol)) {\n              sector = 'XLP'; // Consumer Staples sector ETF\n            }\n            \n            // Fetch sector ETF data\n            fetchComparisonData(sector, 'sector');\n            \n            // Fetch market index data (S&P 500)\n            fetchComparisonData('SPY', 'market');\n          } else {\n            setError('Invalid data format received');\n          }\n          setIsLoading(false);\n        })\n        .catch(err => {\n          console.error('Error fetching historical data:', err);\n          setError(err.message);\n          setIsLoading(false);\n        });\n    }\n  }, [stockData]);\n  \n  // Helper function to fetch comparison data (sector, market index)\n  const fetchComparisonData = (symbol, type) => {\n    fetch(`http://localhost:5001/api/stock?symbol=${symbol}`)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Failed to fetch ${type} data`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        if (type === 'sector') {\n          setSectorData(data);\n        } else if (type === 'market') {\n          setMarketData(data);\n        }\n      })\n      .catch(err => {\n        console.error(`Error fetching ${type} data:`, err);\n      });\n  };\n  \n  // Creating data for current day price levels\n  const prepareChartData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n\n    const basePrice = parseFloat(stockData['05. price']);\n    \n    // Create daily price data for visualization\n    return [\n      { name: 'Open', price: parseFloat(stockData['02. open']) },\n      { name: 'Low', price: parseFloat(stockData['04. low']) },\n      { name: 'Current', price: basePrice },\n      { name: 'High', price: parseFloat(stockData['03. high']) },\n    ];\n  };\n\n  // Generate data for price comparison with sector and index using real data\n  const generateComparisonData = () => {\n    if (!stockData || !stockData['05. price']) {\n      return [];\n    }\n    \n    // Stock data\n    const stockPrice = parseFloat(stockData['05. price']);\n    const stockChange = parseFloat(stockData['09. change'] || 0);\n    const stockPercentChange = (stockChange / stockPrice) * 100;\n    \n    const result = [\n      {\n        name: stockData['01. symbol'],\n        performance: parseFloat(stockPercentChange.toFixed(2)),\n        fill: stockPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      }\n    ];\n    \n    // Add sector data if available\n    if (sectorData && sectorData['05. price'] && sectorData['09. change']) {\n      const sectorChange = parseFloat(sectorData['09. change']);\n      const sectorPrice = parseFloat(sectorData['05. price']);\n      const sectorPercentChange = (sectorChange / sectorPrice) * 100;\n      \n      result.push({\n        name: `${sectorData['01. symbol']} (Sector)`,\n        performance: parseFloat(sectorPercentChange.toFixed(2)),\n        fill: sectorPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      });\n    } else {\n      // Default sector if data not available yet\n      result.push({\n        name: 'Sector Avg',\n        performance: 0,\n        fill: '#9E9E9E'\n      });\n    }\n    \n    // Add market index data if available\n    if (marketData && marketData['05. price'] && marketData['09. change']) {\n      const marketChange = parseFloat(marketData['09. change']);\n      const marketPrice = parseFloat(marketData['05. price']);\n      const marketPercentChange = (marketChange / marketPrice) * 100;\n      \n      result.push({\n        name: `${marketData['01. symbol']} (Market)`,\n        performance: parseFloat(marketPercentChange.toFixed(2)),\n        fill: marketPercentChange >= 0 ? '#4CAF50' : '#F44336'\n      });\n    } else {\n      // Default market if data not available yet\n      result.push({\n        name: 'Market Index',\n        performance: 0,\n        fill: '#9E9E9E'\n      });\n    }\n    \n    return result;\n  };\n\n  const chartData = prepareChartData();\n  const comparisonData = generateComparisonData();\n  \n  // Determine if stock is up or down for color schemes\n  const isStockUp = parseFloat(stockData['09. change'] || 0) >= 0;\n  const mainColor = isStockUp ? '#4CAF50' : '#F44336';\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28'];\n\n  // Chart type options\n  const chartTypes = [\n    { id: 'bar', label: 'Price Levels' },\n    { id: 'line', label: 'Price History' },\n    { id: 'volume', label: 'Volume Analysis' },\n    { id: 'comparison', label: 'Performance Comparison' }\n  ];\n\n  // Loading state\n  if ((chartType === 'line' || chartType === 'volume') && isLoading) {\n    return (\n      <div className=\"chart-container\" style={{ height: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <p>Loading historical data...</p>\n      </div>\n    );\n  }\n\n  // Error state\n  if ((chartType === 'line' || chartType === 'volume') && error) {\n    return (\n      <div className=\"chart-container\" style={{ height: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#F44336' }}>\n        <p>Error: {error}. Unable to display historical data.</p>\n      </div>\n    );\n  }\n\n  // No data state\n  if ((chartType === 'line' || chartType === 'volume') && historicalData.length === 0 && !isLoading && !error) {\n    return (\n      <div className=\"chart-container\" style={{ height: '400px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <p>No historical data available for this stock.</p>\n      </div>\n    );\n  }\n\n  // Render different chart based on selection\n  const renderSelectedChart = () => {\n    switch(chartType) {\n      case 'bar':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={chartData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis \n                domain={[\n                  (dataMin) => Math.floor(dataMin * 0.995),\n                  (dataMax) => Math.ceil(dataMax * 1.005)\n                ]}\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <Tooltip \n                formatter={(value) => [`$${value.toFixed(2)}`, 'Price']}\n              />\n              <Legend />\n              <Bar dataKey=\"price\" fill={mainColor} />\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'line':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart\n              data={historicalData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis \n                domain={['auto', 'auto']}\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <Tooltip \n                formatter={(value) => [`$${value.toFixed(2)}`, 'Price']} \n                labelFormatter={(label) => `Date: ${label}`}\n              />\n              <Legend />\n              <Line \n                type=\"monotone\" \n                dataKey=\"price\" \n                stroke={mainColor} \n                strokeWidth={2}\n                dot={{ r: 0 }}\n                activeDot={{ r: 6 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'volume':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <ComposedChart\n              data={historicalData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis \n                yAxisId=\"left\"\n                orientation=\"left\"\n                tickFormatter={(value) => `$${value.toFixed(2)}`}\n              />\n              <YAxis \n                yAxisId=\"right\"\n                orientation=\"right\"\n                domain={['auto', 'auto']}\n                tickFormatter={(value) => `${(value/1000000).toFixed(1)}M`}\n              />\n              <Tooltip \n                formatter={(value, name) => {\n                  return name === 'price' \n                    ? [`$${value.toFixed(2)}`, 'Price'] \n                    : [`${(value/1000000).toFixed(1)}M`, 'Volume'];\n                }}\n              />\n              <Legend />\n              <Line \n                yAxisId=\"left\"\n                type=\"monotone\" \n                dataKey=\"price\" \n                stroke={mainColor} \n                strokeWidth={2}\n                dot={false}\n              />\n              <Bar \n                yAxisId=\"right\"\n                dataKey=\"volume\" \n                fill=\"#8884d8\" \n                opacity={0.5} \n              />\n            </ComposedChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'comparison':\n        return (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={comparisonData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis \n                tickFormatter={(value) => `${value}%`}\n                domain={[\n                  dataMin => Math.min(dataMin, -2),\n                  dataMax => Math.max(dataMax, 2)\n                ]}\n              />\n              <Tooltip \n                formatter={(value) => [`${value}%`, 'Performance']}\n              />\n              <Legend />\n              <Bar dataKey=\"performance\" fill=\"#8884d8\">\n                {\n                  comparisonData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))\n                }\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      \n      default:\n        return (\n          <div>Please select a chart type</div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"stock-chart\">\n      <div className=\"chart-selectors\">\n        {chartTypes.map((type) => (\n          <button\n            key={type.id}\n            className={`chart-type-btn ${chartType === type.id ? 'active' : ''}`}\n            onClick={() => setChartType(type.id)}\n          >\n            {type.label}\n          </button>\n        ))}\n      </div>\n      <div className=\"chart-container\" style={{ height: '400px' }}>\n        {!stockData || Object.keys(stockData).length === 0 ? (\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\n            <p>Please select a stock to display chart</p>\n          </div>\n        ) : (\n          renderSelectedChart()\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StockChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}